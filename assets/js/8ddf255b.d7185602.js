"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[7045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),v=o,N=c["".concat(p,".").concat(v)]||c[v]||m[v]||r;return n?i.createElement(N,a(a({ref:t},d),{},{components:n})):i.createElement(N,a({ref:t},d))}));function N(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=v;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},7977:(e,t,n)=>{n.d(t,{ZP:()=>s});var i=n(7462),o=(n(7294),n(3905));const r={toc:[]},a="wrapper";function s(e){let{components:t,...n}=e;return(0,o.kt)(a,(0,i.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can run codegen to generate native classes and interfaces, and also check if specification is defined in correct way:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"on iOS: run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn codegen:ios"),", the code-generated classes should be available under your app's ",(0,o.kt)("inlineCode",{parentName:"p"},"<rootDir>/ios/build/generated/ios")," directory")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"on Android: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn codegen:android"),", the code-generated classes should be available under the package's ",(0,o.kt)("inlineCode",{parentName:"p"},"android/build/generated/source/codegen")," directory"))))}s.isMDXComponent=!0},957:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>v,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var i=n(7462),o=(n(7294),n(3905)),r=n(7977);const a={sidebar_label:"JS specification",sidebar_position:3,title:"JS specification"},s=void 0,p={unversionedId:"guides/native-list-view/js-spec",id:"guides/native-list-view/js-spec",title:"JS specification",description:"When all boilerplate is ready, let's navigate to src directory, where JS specification files are located.",source:"@site/docs/guides/native-list-view/js-spec.mdx",sourceDirName:"guides/native-list-view",slug:"/guides/native-list-view/js-spec",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/js-spec",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/guides/native-list-view/js-spec.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"JS specification",sidebar_position:3,title:"JS specification"},sidebar:"tutorialSidebar",previous:{title:"View boilerplate",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/setup"},next:{title:"iOS implementation",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/ios-impl"}},l={},d=[],c={toc:d},m="wrapper";function v(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When all boilerplate is ready, let's navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," directory, where JS specification files are located.\nVery often, complex native layouts expose different APIs, that are platform-specific, so it's hard to handle them with one specification.\nLuckily, RN's ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/the-new-architecture/pillars-fabric-components#2-javascript-specification"},"codegenNativeComponent")," function accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"excludedPlatforms")," field as an option.\n",(0,o.kt)("strong",{parentName:"p"},"We'll use it for learning purposes"),", to declare Android-only and iOS-only specifications."),(0,o.kt)("p",null,"Let's start with the iOS - navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/RNNativeListViewNativeComponent.tsx")," and declare the spec:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/RNNativeListViewNativeComponent.tsx"',title:'"src/RNNativeListViewNativeComponent.tsx"'},"import type * as React from 'react';\nimport type {\n  HostComponent,\n  ViewProps,\n} from 'react-native';\nimport type { Int32 } from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\ntype DataItem = { imageUrl: string; description: string }\n\nexport interface RNNativeListViewProps extends ViewProps {\n  data: ReadonlyArray<Readonly<DataItem>>;\n  options: { placeholderImage: string };\n}\n\nexport type RNNativeListViewComponent = HostComponent<RNNativeListViewProps>;\n\nexport interface RNNativeListViewNativeCommands {\n  scrollToItem: (viewRef: React.ElementRef<RNNativeListViewComponent>, index: Int32) => void;\n}\n\nexport const RNNativeListViewCommands = codegenNativeCommands<RNNativeListViewNativeCommands>({\n  supportedCommands: [ 'scrollToItem' ],\n});\n\nexport default codegenNativeComponent<RNNativeListViewProps>('RNNativeListView', {\n  excludedPlatforms: [ 'android' ],\n}) as RNNativeListViewComponent;\n")),(0,o.kt)("p",null,"The iOS native component will accept two props, first is an array of objects, and second is an object.\nAdditionally, component will have one scroll command declared with ",(0,o.kt)("inlineCode",{parentName:"p"},"codegenNativeCommands")," function.\nTo mark the component as iOS-only, let's put ",(0,o.kt)("inlineCode",{parentName:"p"},"excludedPlatforms")," array to the ",(0,o.kt)("inlineCode",{parentName:"p"},"codegenNativeComponent")," options argument."),(0,o.kt)("p",null,"Now, let's handle Android - navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/AndroidNativeListViewNativeComponent.tsx")," and declare the spec:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/AndroidNativeListViewNativeComponent.tsx"',title:'"src/AndroidNativeListViewNativeComponent.tsx"'},"import type * as React from 'react';\nimport type {\n  HostComponent,\n  ViewProps,\n} from 'react-native';\nimport type { Int32 } from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\ntype DataItem = { imageUrl: string; description: string }\n\nexport interface AndroidNativeListViewProps extends ViewProps {\n  data: ReadonlyArray<Readonly<DataItem>>;\n  options: { placeholderImage: string };\n}\n\nexport type AndroidNativeListViewComponent = HostComponent<AndroidNativeListViewProps>;\n\nexport interface AndroidNativeListViewNativeCommands {\n  scrollToItem: (viewRef: React.ElementRef<AndroidNativeListViewComponent>, index: Int32) => void;\n}\n\nexport const AndroidNativeListViewCommands = codegenNativeCommands<AndroidNativeListViewNativeCommands>({\n  supportedCommands: [ 'scrollToItem' ],\n});\n\nexport default codegenNativeComponent<AndroidNativeListViewProps>('AndroidNativeListView', {\n  excludedPlatforms: [ 'iOS' ],\n}) as AndroidNativeListViewComponent;\n")),(0,o.kt)("p",null,"The spec looks very similar to the iOS one, ",(0,o.kt)("strong",{parentName:"p"},"however we keep them separate for learning purposes")," - after finishing this guide, you may want to play with those platform layouts and try to expose some specific props or commands without breaking the other platform."),(0,o.kt)(r.ZP,{mdxType:"CodegenSpec"}),(0,o.kt)("p",null,"Now let's wrap native components - to do that, we will use platform-specific file extension (",(0,o.kt)("inlineCode",{parentName:"p"},".ios.tsx")," & ",(0,o.kt)("inlineCode",{parentName:"p"},".android.tsx"),") to let the bundler pick correct one, depending on the platform:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/NativeListView.ios.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeListView.ios.tsx"',title:'"src/NativeListView.ios.tsx"'},"import * as React from 'react';\n\nimport type { RNNativeListViewComponent } from './RNNativeListViewNativeComponent';\nimport RNNativeListViewNativeComponent, { RNNativeListViewCommands } from './RNNativeListViewNativeComponent';\n\ntype Props = React.ComponentProps<typeof RNNativeListViewNativeComponent>;\n\nexport class NativeListView extends React.Component<Props> {\n  private innerRef = React.createRef<React.ElementRef<RNNativeListViewComponent>>();\n\n  scrollToItem = (index: number) => {\n    const ref = this.innerRef.current;\n\n    if (ref) {\n      RNNativeListViewCommands.scrollToItem(ref, index);\n    }\n  };\n\n  render() {\n    return <RNNativeListViewNativeComponent ref={this.innerRef} {...this.props} />;\n  }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/NativeListView.android.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeListView.android.tsx"',title:'"src/NativeListView.android.tsx"'},"import * as React from 'react';\n\nimport type { AndroidNativeListViewComponent } from './AndroidNativeListViewNativeComponent';\nimport AndroidNativeListViewNativeComponent, { AndroidNativeListViewCommands } from './AndroidNativeListViewNativeComponent';\n\ntype Props = React.ComponentProps<typeof AndroidNativeListViewNativeComponent>;\n\nexport class NativeListView extends React.Component<Props> {\n  private innerRef = React.createRef<React.ElementRef<AndroidNativeListViewComponent>>();\n\n  scrollToItem = (index: number) => {\n    const ref = this.innerRef.current;\n\n    if (ref) {\n      AndroidNativeListViewCommands.scrollToItem(ref, index);\n    }\n  };\n\n  render() {\n    return <AndroidNativeListViewNativeComponent ref={this.innerRef} {...this.props} />;\n  }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/NativeListView.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeListView.tsx"',title:'"src/NativeListView.tsx"'},"import * as React from 'react';\nimport type { ViewProps } from 'react-native';\nimport { View } from 'react-native';\n\ntype Props = ViewProps & {\n  data: ReadonlyArray<{ imageUrl: string; description: string }>\n  options: Readonly<{ placeholderImage: string }>\n};\n\nexport class NativeListView extends React.Component<Props> {\n  scrollToItem = (index: number) => {\n    console.log(index);\n  };\n\n  render() {\n    return <View {...this.props} />;\n  }\n}\n")),(0,o.kt)("p",null,"In iOS & Android specific implementations, we pass all the props, and handle the ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem")," command.\nInside the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/NativeListView.tsx"),' we declare "dummy" implementation for out-of-tree platforms.'),(0,o.kt)("p",null,"After that, let's finalize JS part with exporting module from ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/index.ts"',title:'"src/index.ts"'},"export { NativeListView } from './NativeListView';\n")),(0,o.kt)("p",null,"JS part finished! Let's jump to ",(0,o.kt)("a",{parentName:"p",href:"./ios-impl"},"iOS implementation"),"."))}v.isMDXComponent=!0}}]);