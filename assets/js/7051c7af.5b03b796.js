"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[4542],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(g,a(a({ref:t},l),{},{components:n})):i.createElement(g,a({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[d]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7977:(e,t,n)=>{n.d(t,{ZP:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={toc:[]},a="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(a,(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can run codegen to generate native classes and interfaces, and also check if specification is defined in correct way:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"on iOS: run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn codegen:ios"),", the code-generated classes should be available under your app's ",(0,r.kt)("inlineCode",{parentName:"p"},"<rootDir>/ios/build/generated/ios")," directory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"on Android: ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn codegen:android"),", the code-generated classes should be available under the package's ",(0,r.kt)("inlineCode",{parentName:"p"},"<rootDir>/<packageDir>/android/build/generated/source/codegen")," directory"))))}c.isMDXComponent=!0},7471:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var i=n(7462),r=(n(7294),n(3905)),o=n(7977);const a={sidebar_label:"JS specification",sidebar_position:3,title:"JS specification"},c=void 0,p={unversionedId:"guides/conic-gradient-view/js-spec",id:"guides/conic-gradient-view/js-spec",title:"JS specification",description:"When all boilerplate is ready, let's navigate to src/ConicGradientViewNativeComponent.ts. To declare native component spec, let's paste following content:",source:"@site/docs/guides/conic-gradient-view/js-spec.mdx",sourceDirName:"guides/conic-gradient-view",slug:"/guides/conic-gradient-view/js-spec",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/js-spec",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/guides/conic-gradient-view/js-spec.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"JS specification",sidebar_position:3,title:"JS specification"},sidebar:"tutorialSidebar",previous:{title:"View boilerplate",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/setup"},next:{title:"iOS implementation",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/ios-impl"}},s={},l=[],d={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When all boilerplate is ready, let's navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/ConicGradientViewNativeComponent.ts"),". To declare native component spec, let's paste following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/ConicGradientViewNativeComponent.ts"',title:'"src/ConicGradientViewNativeComponent.ts"'},"import type {\n  ColorValue,\n  HostComponent,\n  ViewProps,\n} from 'react-native';\nimport type { Double } from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nexport interface ConicGradientViewProps extends ViewProps {\n  colors: ReadonlyArray<ColorValue>;\n  locations: ReadonlyArray<Double>;\n  centerPoint?: Readonly<{ x: Double, y: Double }>;\n}\n\nexport type ConicGradientViewComponent = HostComponent<ConicGradientViewProps>;\n\nexport default codegenNativeComponent<ConicGradientViewProps>('ConicGradientView') as ConicGradientViewComponent;\n")),(0,r.kt)("p",null,"This does 2 things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"declares native component specification with 3 props"),(0,r.kt)("li",{parentName:"ul"},"declares that native component, should be available under ",(0,r.kt)("inlineCode",{parentName:"li"},"ConicGradientView")," name")),(0,r.kt)(o.ZP,{mdxType:"CodegenSpec"}),(0,r.kt)("p",null,"After that, go to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/ConicGradientView.tsx")," and paste following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/ConicGradientView.tsx"',title:'"src/ConicGradientView.tsx"'},"import * as React from 'react';\nimport type { ColorValue } from 'react-native';\nimport { processColor } from 'react-native';\n\nimport ConicGradientViewNativeComponent from './ConicGradientViewNativeComponent';\n\ntype Props = React.ComponentProps<typeof ConicGradientViewNativeComponent>;\n\nexport class ConicGradientView extends React.Component<Props> {\n  render() {\n    const colors = this.props.colors.map(processColor) as ReadonlyArray<ColorValue>;\n\n    return <ConicGradientViewNativeComponent {...this.props} colors={colors} />;\n  }\n}\n")),(0,r.kt)("p",null,"Here we are forwarding all props to the native component, additionally we are making sure that values in ",(0,r.kt)("inlineCode",{parentName:"p"},"colors")," prop are parsed with ",(0,r.kt)("inlineCode",{parentName:"p"},"processColor")," function."),(0,r.kt)("p",null,"After that, let's finalize JS part with exporting module from ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/index.ts"',title:'"src/index.ts"'},"export { ConicGradientView } from './ConicGradientView';\n")),(0,r.kt)("p",null,"JS part finished! Let's jump to ",(0,r.kt)("a",{parentName:"p",href:"./ios-impl"},"iOS implementation"),"."))}m.isMDXComponent=!0}}]);