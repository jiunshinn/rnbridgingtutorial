"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[2451],{5162:(e,n,a)=>{a.d(n,{Z:()=>l});var t=a(7294),i=a(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,l),hidden:a},n)}},4866:(e,n,a)=>{a.d(n,{Z:()=>R});var t=a(7462),i=a(7294),r=a(6010),l=a(2466),o=a(6550),d=a(1980),s=a(7392),u=a(12);function c(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:i}}=e;return{value:n,label:a,attributes:t,default:i}}))}function g(e){const{values:n,children:a}=e;return(0,i.useMemo)((()=>{const e=n??c(a);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:a}=e;const t=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,d._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,r=g(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[d,s]=m({queryString:a,groupId:t}),[c,v]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,r]=(0,u.Nk)(a);return[t,(0,i.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:t}),w=(()=>{const e=d??c;return p({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{w&&o(w)}),[w]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),v(e)}),[s,v,r]),tabValues:r}}var w=a(2389);const V={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:a,selectedValue:o,selectValue:d,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),g=e=>{const n=e.currentTarget,a=u.indexOf(n),t=s[a].value;t!==o&&(c(n),d(t))},p=e=>{let n=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;n=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;n=u[a]??u[u.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n)},s.map((e=>{let{value:n,label:a,attributes:l}=e;return i.createElement("li",(0,t.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>u.push(e),onKeyDown:p,onClick:g},l,{className:(0,r.Z)("tabs__item",V.tabItem,l?.className,{"tabs__item--active":o===n})}),a??n)})))}function h(e){let{lazy:n,children:a,selectedValue:t}=e;if(a=Array.isArray(a)?a:[a],n){const e=a.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function f(e){const n=v(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",V.tabList)},i.createElement(b,(0,t.Z)({},e,n)),i.createElement(h,(0,t.Z)({},e,n)))}function R(e){const n=(0,w.Z)();return i.createElement(f,(0,t.Z)({key:String(n)},e))}},6105:(e,n,a)=>{a.d(n,{ZP:()=>d});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const l={toc:[]},o="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(o,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",null,(0,i.kt)("code",null,a.packageClass,".","java"===a.language?"java":"kt")),(0,i.kt)("p",null,"The last thing we need to do is to export ",(0,i.kt)("code",null,a.viewManagerClass?a.viewManagerClass:a.moduleClass)," in the ",(0,i.kt)("code",null,"TurboReactPackage")," instance. Let's go to ",(0,i.kt)("code",null,a.packageClass,".","java"===a.language?"java":"kt")," and add our new module."),(0,i.kt)(r.Z,{language:a.language,title:`android/src/main/java/com/${a.namespace}/${a.packageClass}.${"java"===a.language?"java":"kt"}`,mdxType:"CodeBlock"},"java"===a.language?`package com.${a.namespace};\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.TurboReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.module.model.ReactModuleInfo;\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule;\n${a.viewManagerClass?"// highlight-start\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.Arrays;\n// highlight-end":""}\nimport java.util.HashMap;${a.viewManagerClass?"\n// highlight-start\nimport java.util.List;\n// highlight-end":""}\nimport java.util.Map;\n\npublic class ${a.packageClass} extends TurboReactPackage {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    @Override\n    @Nullable\n    public NativeModule getModule(String name, ReactApplicationContext reactContext) {\n        ${a.moduleClass?`// highlight-start\n        if (name.equals(${a.moduleClass}.NAME)) {\n            return new ${a.moduleClass}(reactContext);\n        }\n        return null;\n// highlight-end`:"return null;"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    @Override\n    public ReactModuleInfoProvider getReactModuleInfoProvider() {\n        /**\n         * Here declare the array of exported modules\n         */\n        Class<? extends NativeModule>[] moduleList = new Class[] {${a.moduleClass?`\n// highlight-start\n            ${a.moduleClass}.class\n            // highlight-end`:""}\n        };\n        final Map<String, ReactModuleInfo> reactModuleInfoMap = new HashMap<>();\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (Class<? extends NativeModule> moduleClass : moduleList) {\n            ReactModule reactModule = moduleClass.getAnnotation(ReactModule.class);\n\n            reactModuleInfoMap.put(\n                reactModule.name(),\n                new ReactModuleInfo(\n                    reactModule.name(),\n                    moduleClass.getName(),\n                    true,\n                    reactModule.needsEagerInit(),\n                    reactModule.hasConstants(),\n                    reactModule.isCxxModule(),\n                    TurboModule.class.isAssignableFrom(moduleClass)\n                )\n            );\n        }\n\n        return new ReactModuleInfoProvider() {\n            @Override\n            public Map<String, ReactModuleInfo> getReactModuleInfos() {\n                return reactModuleInfoMap;\n            }\n        };\n    }${a.viewManagerClass?`\n\n// highlight-start\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n        /**\n        * Here declare the list of exported native components\n        */\n        return Arrays.<ViewManager>asList(new ${a.viewManagerClass}());\n    }\n    // highlight-end`:""}\n}`:`package com.${a.namespace}\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ${a.packageClass} : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        ${a.moduleClass?`// highlight-start\n        return when (name) {\n            ${a.moduleClass}.NAME -> ${a.moduleClass}(reactContext)\n            else -> null\n        }\n        // highlight-end`:"return null"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(${a.moduleClass?`\n// highlight-start\n            ${a.moduleClass}::class.java\n            // highlight-end`:""}\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }${a.viewManagerClass?`\n\n// highlight-start\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(${a.viewManagerClass}())\n    }\n    // highlight-end`:""}\n}`),(0,i.kt)("div",null,a.moduleClass?(0,i.kt)("div",null,(0,i.kt)("p",null,"To export the module, as the first step, we need to return it from ",(0,i.kt)("code",null,"getModule")," method inside ",(0,i.kt)("code",null,a.packageClass),", if it's requested (the method takes name as a parameter and makes decision which module should be served)."),(0,i.kt)("p",null,"The second step is to implement ",(0,i.kt)("code",null,"getReactModuleInfoProvider")," method, where the module is injected to the info provider instance.")):a.viewManagerClass?(0,i.kt)("p",null,"Here the most important bit is ",(0,i.kt)("code",null,"createViewManagers")," method, which returns collection of view manager classes. Because our package exports only a single view, we register one-element list, with ",(0,i.kt)("code",null,a.viewManagerClass)," class."):null))}d.isMDXComponent=!0},6162:(e,n,a)=>{a.d(n,{ZP:()=>d});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const l={toc:[]},o="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(o,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Complete ",(0,i.kt)("code",null,a.filename)," file"),(0,i.kt)("div",null,(0,i.kt)(r.Z,{language:a.language,mdxType:"CodeBlock"},a.children))))}d.isMDXComponent=!0},6571:(e,n,a)=>{a.d(n,{ZP:()=>d});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const l={toc:[]},o="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(o,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Old architecture view manager"),(0,i.kt)("div",null,"The implementation of old architecture view manager won't be visible in Android Studio when you have new architecture enabled. To handle that, you can open ",(0,i.kt)("code",null,a.filename)," at other text editor and paste following content:",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)(r.Z,{language:a.language,mdxType:"CodeBlock"},a.children))))}d.isMDXComponent=!0},3851:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>U,contentTitle:()=>H,default:()=>$,frontMatter:()=>_,metadata:()=>F,toc:()=>Z});var t=a(7462),i=(a(7294),a(3905)),r=a(4866),l=a(5162),o=a(6105);const d={toc:[{value:"Add native library as dependency for the package",id:"add-native-library-as-dependency-for-the-package",level:4}]},s="wrapper";function u(e){let{components:n,...a}=e;return(0,i.kt)(s,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"add-native-library-as-dependency-for-the-package"},"Add native library as dependency for the package"),(0,i.kt)("p",null,"When developing some Android native code, you often need to use some external package, whether it's from Jetpack, MaterialComponents or some 3rd party.\nUsually those libraries are integrated with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/userguide.html"},"Gradle"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For more information on how to add dependencies to Android project visit ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/build/dependencies"},"Android's dedicated docs"),".")),(0,i.kt)("p",null,"Each RN library that includes some Android native code is, in fact, integrated with Gradle and our range slider will also need to depend on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/material-components/material-components-android"},"MaterialComponents")," dependency.\nSo let's not waste time and navigate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," in our package."),(0,i.kt)(r.Z,{groupId:"gradle",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"groovy",label:"Groovy script (build.gradle)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="android/build.gradle"',title:'"android/build.gradle"'},'buildscript {\n    // ...\n}\n\n// ...\n\nandroid {\n    // ...\n}\n\nrepositories {\n    // ...\n}\n\ndependencies {\n    // ...\n\n// highlight-start\n    // Add the dependency to the MaterialComponents library\n    implementation "com.google.android.material:material:1.8.0"\n// highlight-end\n}\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin script (build.gradle.kts)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/build.gradle.kts"',title:'"android/build.gradle.kts"'},'buildscript {\n    // ...\n}\n\n// ...\n\nplugins {\n    // ...\n}\n\n// ...\n\nandroid {\n    // ...\n}\n\nrepositories {\n    // ...\n}\n\n// ...\n\ndependencies {\n    // ...\n\n// highlight-start\n    // Add the dependency to the MaterialComponents library\n    implementation("com.google.android.material:material:1.8.0")\n// highlight-end\n}\n')))),(0,i.kt)("p",null,"To add a dependency we need to write ",(0,i.kt)("inlineCode",{parentName:"p"},"implementation")," keyword and declare the package (and its version) we want to include.\nAfter that you can invoke Gradle Sync in the Android Studio."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In this guide, version 1.8.0 of MaterialComponents library is used. In your case this version may be different, you can visit ",(0,i.kt)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/com.google.android.material/material"},"Maven Repository")," and check available versions.")))}u.isMDXComponent=!0;const c={toc:[{value:"Change Android theme to <code>Material3</code>",id:"change-android-theme-to-material3",level:4}]},g="wrapper";function p(e){let{components:n,...a}=e;return(0,i.kt)(g,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"change-android-theme-to-material3"},"Change Android theme to ",(0,i.kt)("inlineCode",{parentName:"h4"},"Material3")),(0,i.kt)("p",null,"To use ",(0,i.kt)("inlineCode",{parentName:"p"},"MaterialComponents")," library, we need to change the Android app's theme to the Material theme.\nTo do that, let's navigate to our tutorial app and go to ",(0,i.kt)("inlineCode",{parentName:"p"},"styles.xml")," in Android resources directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="android/app/src/main/res/values/styles.xml"',title:'"android/app/src/main/res/values/styles.xml"'},'- <style name="AppTheme" parent="Theme.AppCompat.DayNight.NoActionBar">\n+ <style name="AppTheme" parent="Theme.Material3.DayNight.NoActionBar">\n')))}p.isMDXComponent=!0;const m={toc:[{value:"Events",id:"events",level:4}]},v="wrapper";function w(e){let{components:n,...a}=e;return(0,i.kt)(v,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"events"},"Events"),(0,i.kt)("p",null,"Let's start by handling direct events - go to ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewBeginDragEvent.java"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewEndDragEvent.java")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewValueChangeEvent.java")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewBeginDragEvent.java"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewBeginDragEvent.java"'},'package com.rangesliderpackage;\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\npublic class OnRangeSliderViewBeginDragEvent extends Event<OnRangeSliderViewBeginDragEvent> {\n    public static final String NAME = "topRangeSliderViewBeginDrag";\n    public static final String EVENT_PROP_NAME = "onRangeSliderViewBeginDrag";\n\n    public OnRangeSliderViewBeginDragEvent(int surfaceId, int viewId) {\n        super(surfaceId, viewId);\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Nullable\n    @Override\n    public WritableMap getEventData() {\n        return Arguments.createMap();\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewEndDragEvent.java"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewEndDragEvent.java"'},'package com.rangesliderpackage;\n\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\npublic class OnRangeSliderViewEndDragEvent extends Event<OnRangeSliderViewEndDragEvent> {\n    private final double leftKnobValue;\n    private final double rightKnobValue;\n    private static final String LEFT_KNOB_KEY = "leftKnobValue";\n    private static final String RIGHT_KNOB_KEY = "rightKnobValue";\n\n    public static final String NAME = "topRangeSliderViewEndDrag";\n    public static final String EVENT_PROP_NAME = "onRangeSliderViewEndDrag";\n\n    public OnRangeSliderViewEndDragEvent(\n        int surfaceId,\n        int viewId,\n        double leftKnobValue,\n        double rightKnobValue\n    ) {\n        super(surfaceId, viewId);\n        this.leftKnobValue = leftKnobValue;\n        this.rightKnobValue = rightKnobValue;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Nullable\n    @Override\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap payload = Arguments.createMap();\n        payload.putDouble(LEFT_KNOB_KEY, leftKnobValue);\n        payload.putDouble(RIGHT_KNOB_KEY, rightKnobValue);\n        return payload;\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewValueChangeEvent.java"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewValueChangeEvent.java"'},'package com.rangesliderpackage;\n\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\npublic class OnRangeSliderViewValueChangeEvent extends Event<OnRangeSliderViewValueChangeEvent> {\n    private final double leftKnobValue;\n    private final double rightKnobValue;\n    private static final String LEFT_KNOB_KEY = "leftKnobValue";\n    private static final String RIGHT_KNOB_KEY = "rightKnobValue";\n\n    public static final String NAME = "topRangeSliderViewValueChange";\n    public static final String EVENT_PROP_NAME = "onRangeSliderViewValueChange";\n\n    public OnRangeSliderViewValueChangeEvent(\n        int surfaceId,\n        int viewId,\n        double leftKnobValue,\n        double rightKnobValue\n    ) {\n        super(surfaceId, viewId);\n        this.leftKnobValue = leftKnobValue;\n        this.rightKnobValue = rightKnobValue;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Nullable\n    @Override\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap payload = Arguments.createMap();\n        payload.putDouble(LEFT_KNOB_KEY, leftKnobValue);\n        payload.putDouble(RIGHT_KNOB_KEY, rightKnobValue);\n        return payload;\n    }\n}\n')),(0,i.kt)("p",null,"In each case we are creating event class that extends RN's ",(0,i.kt)("inlineCode",{parentName:"p"},"Event"),".\nThose classes take at least 2 arguments - ",(0,i.kt)("inlineCode",{parentName:"p"},"surfaceId")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"viewId"),".\nTo construct the payload object, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"Arguments.createMap")," utility helper.\nAnd we also define static constants that will be used to register events with specified JS name."))}w.isMDXComponent=!0;var V=a(6162);const b={toc:[{value:"<code>RangeSliderView.java</code>",id:"rangesliderviewjava",level:4}]},h="wrapper";function f(e){let{components:n,...a}=e;return(0,i.kt)(h,(0,t.Z)({},b,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"rangesliderviewjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"RangeSliderView.java")),(0,i.kt)("p",null,"Now, let's declare the custom view that will hold our range slider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.java"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.java"'},'package com.rangesliderpackage;\n\nimport android.content.res.ColorStateList;\nimport android.graphics.Color;\nimport android.widget.FrameLayout;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.uimanager.PixelUtil;\nimport com.google.android.material.slider.RangeSlider;\n\npublic class RangeSliderView extends FrameLayout {\n    private final ReactContext reactContext;\n\n    private final RangeSlider slider;\n    private float mLastLeftKnobValue = 0f;\n    private float mLastRightKnobValue = 1f;\n\n    public static final String NAME = "RangeSliderView";\n  \n    public RangeSliderView(ReactContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n        this.slider = new RangeSlider(reactContext);\n        this.slider.setTrackHeight((int) PixelUtil.toPixelFromDIP(10f));\n        this.slider.setThumbTintList(ColorStateList.valueOf(Color.BLUE));\n        this.slider.addOnSliderTouchListener(new RangeSlider.OnSliderTouchListener() {\n            @Override\n            public void onStartTrackingTouch(@NonNull RangeSlider slider) {\n                //\n            }\n\n            @Override\n            public void onStopTrackingTouch(@NonNull RangeSlider slider) {\n                //\n            }\n        });\n        this.slider.addOnChangeListener(\n                (slider, value, fromUser) -> {\n                    float newLeftKnobValue = slider.getValues().get(0);\n                    float newRightKnobValue = slider.getValues().get(1);\n                    if (\n                        Math.abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f &&\n                        Math.abs(newRightKnobValue - mLastRightKnobValue) < 0.1f\n                    ) {\n                        return;\n                    }\n                    mLastLeftKnobValue = newLeftKnobValue;\n                    mLastRightKnobValue = newRightKnobValue;\n                    // ...\n                }\n        );\n        this.addView(this.slider, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n    }\n}\n')),(0,i.kt)("p",null,"Our custom view extends ",(0,i.kt)("inlineCode",{parentName:"p"},"FrameLayout")," class, it declares static ",(0,i.kt)("inlineCode",{parentName:"p"},"NAME")," constant, that's value matches the one from JS specification, it also declares ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeSlider")," instance with some default configuration."),(0,i.kt)("p",null,"As a next step, let's forward props to the slider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.java"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.java"'},"// ...\n\npublic class RangeSliderView extends FrameLayout {\n    // ...\n\n// highlight-start\n    public void setActiveColor(@Nullable Integer activeColor) {\n        int newColor = Color.BLUE;\n        if (activeColor != null) {\n            newColor = activeColor;\n        }\n        slider.setTrackActiveTintList(ColorStateList.valueOf(newColor));\n    }\n\n    public void setInactiveColor(@Nullable Integer inactiveColor) {\n        int newColor = Color.GRAY;\n        if (inactiveColor != null) {\n            newColor = inactiveColor;\n        }\n        slider.setTrackInactiveTintList(ColorStateList.valueOf(newColor));\n    }\n\n    public void setMinValue(double minValue) {\n        slider.setValueFrom((float) minValue);\n    }\n\n    public void setMaxValue(double maxValue) {\n        slider.setValueTo((float) maxValue);\n    }\n\n    public void setLeftKnobValue(double leftKnobValue) {\n        if (Double.isNaN(leftKnobValue)) {\n            return;\n        }\n        if (slider.getValues().size() < 2) {\n            slider.setValues((float) leftKnobValue, (float) leftKnobValue + 1);\n            return;\n        }\n        float rightKnobValue = slider.getValues().get(1);\n        slider.setValues((float) leftKnobValue, rightKnobValue);\n    }\n\n    public void setRightKnobValue(double rightKnobValue) {\n        if (Double.isNaN(rightKnobValue)) {\n            return;\n        }\n        if (slider.getValues().size() < 1) {\n            slider.setValues((float) rightKnobValue - 1, (float) rightKnobValue);\n            return;\n        }\n        float leftKnobValue = slider.getValues().get(0);\n        slider.setValues(leftKnobValue, (float) rightKnobValue);\n    }\n\n    public void setStep(int step) {\n        slider.setStepSize((float) step);\n    }\n// highlight-end\n}\n")),(0,i.kt)("p",null,"Here we are defining public setter function that will be used by view manager class.\nInside those functions we parse arguments and pass them to the slider."),(0,i.kt)("p",null,"Good, we communicate with our slider, but we still have to make the slider communicate back with us!\nWe'll do it by introducing listener property, that view manager class will use to receive events from slider."),(0,i.kt)("p",null,"Let's start by defining the interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.java"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.java"'},"public class RangeSliderView extends FrameLayout {\n    public RangeSliderView(ReactContext reactContext) {\n        //\n    }\n\n    public interface OnRangeSliderViewListener {\n        void onRangeSliderViewBeginDrag();\n        void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue);\n        void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue);\n    }\n\n    // ...\n}\n")),(0,i.kt)("p",null,"Next, we'll add a listener property and use it to send events to the receiver:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.java"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.java"'},"public class RangeSliderView extends FrameLayout {\n    public RangeSliderView(ReactContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n        this.slider = new RangeSlider(reactContext);\n        this.slider.setTrackHeight((int) PixelUtil.toPixelFromDIP(10f));\n        this.slider.setThumbTintList(ColorStateList.valueOf(Color.BLUE));\n        this.slider.addOnSliderTouchListener(new RangeSlider.OnSliderTouchListener() {\n            @Override\n            public void onStartTrackingTouch(@NonNull RangeSlider slider) {\n// highlight-start\n                sendOnRangeSliderViewBeginDragEvent();\n// highlight-end\n            }\n\n            @Override\n            public void onStopTrackingTouch(@NonNull RangeSlider slider) {\n// highlight-start\n                sendOnRangeSliderViewEndDragEvent((double) slider.getValues().get(0), (double) slider.getValues().get(1));\n// highlight-end\n            }\n        });\n        this.slider.addOnChangeListener(\n                (slider, value, fromUser) -> {\n                    float newLeftKnobValue = slider.getValues().get(0);\n                    float newRightKnobValue = slider.getValues().get(1);\n                    if (\n                        Math.abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f &&\n                        Math.abs(newRightKnobValue - mLastRightKnobValue) < 0.1f\n                    ) {\n                        return;\n                    }\n                    mLastLeftKnobValue = newLeftKnobValue;\n                    mLastRightKnobValue = newRightKnobValue;\n// highlight-start\n                    sendOnRangeSliderViewValueChangeEvent(newLeftKnobValue, newRightKnobValue);\n// highlight-end\n                }\n        );\n        this.addView(this.slider, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n    }\n\n    public interface OnRangeSliderViewListener {\n        void onRangeSliderViewBeginDrag();\n        void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue);\n        void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue);\n    }\n\n// highlight-start\n    private @Nullable OnRangeSliderViewListener mListener = null;\n\n    public void setOnRangeSliderViewListener(@Nullable OnRangeSliderViewListener listener) {\n        mListener = listener;\n    }\n// highlight-end\n\n    // ...\n\n// highlight-start\n    private void sendOnRangeSliderViewValueChangeEvent(double leftKnobValue, double rightKnobValue) {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewValueChange(leftKnobValue, rightKnobValue);\n        }\n    }\n\n    private void sendOnRangeSliderViewBeginDragEvent() {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewBeginDrag();\n        }\n    }\n\n    private void sendOnRangeSliderViewEndDragEvent(double leftKnobValue, double rightKnobValue) {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewEndDrag(leftKnobValue, rightKnobValue);\n        }\n    }\n// highlight-end\n}\n")),(0,i.kt)("p",null,"Cool! Now we have everything in place, let's use it in view manager class."),(0,i.kt)(V.ZP,{filename:"RangeSliderView.java",language:"java",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage;\n\nimport android.content.res.ColorStateList;\nimport android.graphics.Color;\nimport android.widget.FrameLayout;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.uimanager.PixelUtil;\nimport com.google.android.material.slider.RangeSlider;\n\npublic class RangeSliderView extends FrameLayout {\n    private final ReactContext reactContext;\n\n    private final RangeSlider slider;\n    private float mLastLeftKnobValue = 0f;\n    private float mLastRightKnobValue = 1f;\n\n    public static final String NAME = "RangeSliderView";\n  \n    public RangeSliderView(ReactContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n        this.slider = new RangeSlider(reactContext);\n        this.slider.setTrackHeight((int) PixelUtil.toPixelFromDIP(10f));\n        this.slider.setThumbTintList(ColorStateList.valueOf(Color.BLUE));\n        this.slider.addOnSliderTouchListener(new RangeSlider.OnSliderTouchListener() {\n            @Override\n            public void onStartTrackingTouch(@NonNull RangeSlider slider) {\n                sendOnRangeSliderViewBeginDragEvent();\n            }\n\n            @Override\n            public void onStopTrackingTouch(@NonNull RangeSlider slider) {\n                sendOnRangeSliderViewEndDragEvent((double) slider.getValues().get(0), (double) slider.getValues().get(1));\n            }\n        });\n        this.slider.addOnChangeListener(\n                (slider, value, fromUser) -> {\n                    float newLeftKnobValue = slider.getValues().get(0);\n                    float newRightKnobValue = slider.getValues().get(1);\n                    if (\n                        Math.abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f &&\n                        Math.abs(newRightKnobValue - mLastRightKnobValue) < 0.1f\n                    ) {\n                        return;\n                    }\n                    mLastLeftKnobValue = newLeftKnobValue;\n                    mLastRightKnobValue = newRightKnobValue;\n                    sendOnRangeSliderViewValueChangeEvent(newLeftKnobValue, newRightKnobValue);\n                }\n        );\n        this.addView(this.slider, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n    }\n\n    public interface OnRangeSliderViewListener {\n        void onRangeSliderViewBeginDrag();\n        void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue);\n        void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue);\n    }\n\n    private @Nullable OnRangeSliderViewListener mListener = null;\n\n    public void setOnRangeSliderViewListener(@Nullable OnRangeSliderViewListener listener) {\n        mListener = listener;\n    }\n\n    public void setActiveColor(@Nullable Integer activeColor) {\n        int newColor = Color.BLUE;\n        if (activeColor != null) {\n            newColor = activeColor;\n        }\n        slider.setTrackActiveTintList(ColorStateList.valueOf(newColor));\n    }\n\n    public void setInactiveColor(@Nullable Integer inactiveColor) {\n        int newColor = Color.GRAY;\n        if (inactiveColor != null) {\n            newColor = inactiveColor;\n        }\n        slider.setTrackInactiveTintList(ColorStateList.valueOf(newColor));\n    }\n\n    public void setMinValue(double minValue) {\n        slider.setValueFrom((float) minValue);\n    }\n\n    public void setMaxValue(double maxValue) {\n        slider.setValueTo((float) maxValue);\n    }\n\n    public void setLeftKnobValue(double leftKnobValue) {\n        if (Double.isNaN(leftKnobValue)) {\n            return;\n        }\n        if (slider.getValues().size() < 2) {\n            slider.setValues((float) leftKnobValue, (float) leftKnobValue + 1);\n            return;\n        }\n        float rightKnobValue = slider.getValues().get(1);\n        slider.setValues((float) leftKnobValue, rightKnobValue);\n    }\n\n    public void setRightKnobValue(double rightKnobValue) {\n        if (Double.isNaN(rightKnobValue)) {\n            return;\n        }\n        if (slider.getValues().size() < 1) {\n            slider.setValues((float) rightKnobValue - 1, (float) rightKnobValue);\n            return;\n        }\n        float leftKnobValue = slider.getValues().get(0);\n        slider.setValues(leftKnobValue, (float) rightKnobValue);\n    }\n\n    public void setStep(int step) {\n        slider.setStepSize((float) step);\n    }\n\n    private void sendOnRangeSliderViewValueChangeEvent(double leftKnobValue, double rightKnobValue) {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewValueChange(leftKnobValue, rightKnobValue);\n        }\n    }\n\n    private void sendOnRangeSliderViewBeginDragEvent() {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewBeginDrag();\n        }\n    }\n\n    private void sendOnRangeSliderViewEndDragEvent(double leftKnobValue, double rightKnobValue) {\n        @Nullable final OnRangeSliderViewListener listener = mListener;\n        if (listener != null) {\n            listener.onRangeSliderViewEndDrag(leftKnobValue, rightKnobValue);\n        }\n    }\n}\n'))))}f.isMDXComponent=!0;var R=a(6571);const S={toc:[{value:"<code>RangeSliderViewManager.java</code>",id:"rangesliderviewmanagerjava",level:4}]},k="wrapper";function C(e){let{components:n,...a}=e;return(0,i.kt)(k,(0,t.Z)({},S,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"rangesliderviewmanagerjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"RangeSliderViewManager.java")),(0,i.kt)("p",null,"The view manager class will connect the slider with our RN app - let's start by creating the boilerplate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.java"',title:'"android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.java"'},'package com.rangesliderpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.common.MapBuilder;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.ViewGroupManager;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.events.EventDispatcher;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface;\nimport java.util.List;\nimport java.util.Map;\n\n@ReactModule(name = RangeSliderView.NAME)\npublic class RangeSliderViewManager extends ViewGroupManager<RangeSliderView> implements RangeSliderViewManagerInterface<RangeSliderView> {\n    private final RangeSliderViewManagerDelegate mDelegate = new RangeSliderViewManagerDelegate(this);\n  \n    @Override\n    public String getName() {\n        return RangeSliderView.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<RangeSliderView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(RangeSliderView root, String commandId, ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public RangeSliderView createViewInstance(ThemedReactContext reactContext) {\n        return new RangeSliderView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "activeColor", customType = "Color")\n    public void setActiveColor(RangeSliderView view, @Nullable Integer activeColor) {\n        view.setActiveColor(activeColor);\n    }\n\n    @Override\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    public void setInactiveColor(RangeSliderView view, @Nullable Integer inactiveColor) {\n        view.setInactiveColor(inactiveColor);\n    }\n\n    @Override\n    @ReactProp(name = "minValue")\n    public void setMinValue(RangeSliderView view, double value) {\n        view.setMinValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "maxValue")\n    public void setMaxValue(RangeSliderView view, double value) {\n        view.setMaxValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "leftKnobValue")\n    public void setLeftKnobValue(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "rightKnobValue")\n    public void setRightKnobValue(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "step")\n    public void setStep(RangeSliderView view, int step) {\n        view.setStep(step);\n    }\n\n    @Override\n    public void setLeftKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    @Override\n    public void setRightKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @Override\n    public void addView(RangeSliderView parent, View child, int index) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void addViews(RangeSliderView parent, List<View> views) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeAllViews(RangeSliderView parent) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeView(RangeSliderView parent, View view) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeViewAt(RangeSliderView parent, int index) {\n        // That component does not accept child views\n    }\n}\n')),(0,i.kt)("p",null,"So we are doing a bunch of things in the view manager class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we create codegenerated delegate and return it from ",(0,i.kt)("inlineCode",{parentName:"li"},"getDelegate")," method"),(0,i.kt)("li",{parentName:"ul"},"we use custom view's ",(0,i.kt)("inlineCode",{parentName:"li"},"NAME")," constant in ",(0,i.kt)("inlineCode",{parentName:"li"},"getName")," (this needs to match the name from JS specification)"),(0,i.kt)("li",{parentName:"ul"},"we use delegate to handle native commands in ",(0,i.kt)("inlineCode",{parentName:"li"},"receiveCommand")," method"),(0,i.kt)("li",{parentName:"ul"},"we initialize instance of our custom view in ",(0,i.kt)("inlineCode",{parentName:"li"},"createViewInstance")," method"),(0,i.kt)("li",{parentName:"ul"},"we handle all props and native commands")),(0,i.kt)("p",null,"You may have noticed, that view manager class also overrides add/remove view methods.\nThose methods can be used to control how the child views should be added/removed in the view managed by the view manager.\nIn our case, we prevent adding/removal to be sure that our slider view does not have any child views."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Usually when the android view does not handle any children, you will use ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleViewManager")," class instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewGroupManager")," - here the latter is used, just to showcase that add/remove view methods exist and can be overriden")),(0,i.kt)("p",null,"We are in the half way, now it's time to handle event emitting based on the values received from the slider.\nLet's add the following snippet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.java"',title:'"android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.java"'},'package com.rangesliderpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\n// highlight-start\nimport com.facebook.react.common.MapBuilder;\n// highlight-end\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\n// highlight-start\nimport com.facebook.react.uimanager.UIManagerHelper;\n// highlight-end\nimport com.facebook.react.uimanager.ViewGroupManager;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.events.EventDispatcher;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface;\nimport java.util.List;\nimport java.util.Map;\n\n@ReactModule(name = RangeSliderView.NAME)\npublic class RangeSliderViewManager extends ViewGroupManager<RangeSliderView> implements RangeSliderViewManagerInterface<RangeSliderView> {\n    // ...\n\n// highlight-start\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, RangeSliderView view) {\n        super.addEventEmitters(reactContext, view);\n        view.setOnRangeSliderViewListener(new RangeSliderView.OnRangeSliderViewListener() {\n            @Override\n            public void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewBeginDrag() {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId()\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n        });\n    }\n\n    @Override\n    public Map<String, Object> getExportedCustomDirectEventTypeConstants() {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        );\n    }\n// highlight-end\n}\n')),(0,i.kt)("p",null,"To handle the events, we can override ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventEmitters")," method on the view manager class.\nIn that method, we can register listener where we'll dispatch events based on received values.\nDispatching events is available thanks to ",(0,i.kt)("inlineCode",{parentName:"p"},"UIManagerHelper.getEventDispatcherForReactTag")," method - it needs context and the id (react tag) of the view.\nAnd each dispatched event gets at least 2 arguments - ",(0,i.kt)("inlineCode",{parentName:"p"},"surfaceId")," (obtained with ",(0,i.kt)("inlineCode",{parentName:"p"},"UIManagerHelper.getSurfaceId"),") and id of the view."),(0,i.kt)("p",null,"However, to dispatch events we need to also register their names, so that we can consume them in the JS code.\nThis is done in ",(0,i.kt)("inlineCode",{parentName:"p"},"getExportedCustomDirectEventTypeConstants")," method that we can override on the view manager class."),(0,i.kt)(V.ZP,{filename:"RangeSliderViewManager.java",language:"java",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.common.MapBuilder;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.ViewGroupManager;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.events.EventDispatcher;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate;\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface;\nimport java.util.List;\nimport java.util.Map;\n\n@ReactModule(name = RangeSliderView.NAME)\npublic class RangeSliderViewManager extends ViewGroupManager<RangeSliderView> implements RangeSliderViewManagerInterface<RangeSliderView> {\n    private final RangeSliderViewManagerDelegate mDelegate = new RangeSliderViewManagerDelegate(this);\n  \n    @Override\n    public String getName() {\n        return RangeSliderView.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<RangeSliderView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(RangeSliderView root, String commandId, ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public RangeSliderView createViewInstance(ThemedReactContext reactContext) {\n        return new RangeSliderView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "activeColor", customType = "Color")\n    public void setActiveColor(RangeSliderView view, @Nullable Integer activeColor) {\n        view.setActiveColor(activeColor);\n    }\n\n    @Override\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    public void setInactiveColor(RangeSliderView view, @Nullable Integer inactiveColor) {\n        view.setInactiveColor(inactiveColor);\n    }\n\n    @Override\n    @ReactProp(name = "minValue")\n    public void setMinValue(RangeSliderView view, double value) {\n        view.setMinValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "maxValue")\n    public void setMaxValue(RangeSliderView view, double value) {\n        view.setMaxValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "leftKnobValue")\n    public void setLeftKnobValue(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "rightKnobValue")\n    public void setRightKnobValue(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @Override\n    @ReactProp(name = "step")\n    public void setStep(RangeSliderView view, int step) {\n        view.setStep(step);\n    }\n\n    @Override\n    public void setLeftKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    @Override\n    public void setRightKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @Override\n    public void addView(RangeSliderView parent, View child, int index) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void addViews(RangeSliderView parent, List<View> views) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeAllViews(RangeSliderView parent) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeView(RangeSliderView parent, View view) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeViewAt(RangeSliderView parent, int index) {\n        // That component does not accept child views\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, RangeSliderView view) {\n        super.addEventEmitters(reactContext, view);\n        view.setOnRangeSliderViewListener(new RangeSliderView.OnRangeSliderViewListener() {\n            @Override\n            public void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewBeginDrag() {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId()\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n        });\n    }\n\n    @Override\n    public Map<String, Object> getExportedCustomDirectEventTypeConstants() {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        );\n    }\n}\n'))),(0,i.kt)(R.ZP,{filename:"android/src/oldarch/java/com/rangesliderpackage/RangeSliderViewManager.java",language:"java",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.common.MapBuilder;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.ViewGroupManager;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.events.EventDispatcher;\nimport java.util.List;\nimport java.util.Map;\n\n@ReactModule(name = RangeSliderView.NAME)\npublic class RangeSliderViewManager extends ViewGroupManager<RangeSliderView> {\n    @Override\n    public String getName() {\n        return RangeSliderView.NAME;\n    }\n\n    @Override\n    public void receiveCommand(RangeSliderView root, String commandId, @Nullable ReadableArray args) {\n        super.receiveCommand(root, commandId, args);\n\n        switch (commandId) {\n            case "setLeftKnobValueProgrammatically":\n                final double leftKnobValue = args.getDouble(0);\n                setLeftKnobValueProgrammatically(root, leftKnobValue);\n                break;\n            case "setRightKnobValueProgrammatically":\n                final double rightKnobValue = args.getDouble(0);\n                setRightKnobValueProgrammatically(root, rightKnobValue);\n                break;\n        }\n    }\n\n    @Override\n    public RangeSliderView createViewInstance(ThemedReactContext reactContext) {\n        return new RangeSliderView(reactContext);\n    }\n\n    @ReactProp(name = "activeColor", customType = "Color")\n    public void setActiveColor(RangeSliderView view, @Nullable Integer activeColor) {\n        view.setActiveColor(activeColor);\n    }\n\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    public void setInactiveColor(RangeSliderView view, @Nullable Integer inactiveColor) {\n        view.setInactiveColor(inactiveColor);\n    }\n\n    @ReactProp(name = "minValue")\n    public void setMinValue(RangeSliderView view, double value) {\n        view.setMinValue(value);\n    }\n\n    @ReactProp(name = "maxValue")\n    public void setMaxValue(RangeSliderView view, double value) {\n        view.setMaxValue(value);\n    }\n\n    @ReactProp(name = "leftKnobValue")\n    public void setLeftKnobValue(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    @ReactProp(name = "rightKnobValue")\n    public void setRightKnobValue(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @ReactProp(name = "step")\n    public void setStep(RangeSliderView view, int step) {\n        view.setStep(step);\n    }\n\n    private void setLeftKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setLeftKnobValue(value);\n    }\n\n    private void setRightKnobValueProgrammatically(RangeSliderView view, double value) {\n        view.setRightKnobValue(value);\n    }\n\n    @Override\n    public void addView(RangeSliderView parent, View child, int index) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void addViews(RangeSliderView parent, List<View> views) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeAllViews(RangeSliderView parent) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeView(RangeSliderView parent, View view) {\n        // That component does not accept child views\n    }\n\n    @Override\n    public void removeViewAt(RangeSliderView parent, int index) {\n        // That component does not accept child views\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, RangeSliderView view) {\n        super.addEventEmitters(reactContext, view);\n        view.setOnRangeSliderViewListener(new RangeSliderView.OnRangeSliderViewListener() {\n            @Override\n            public void onRangeSliderViewValueChange(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewBeginDrag() {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId()\n                        )\n                    );\n                }\n            }\n\n            @Override\n            public void onRangeSliderViewEndDrag(double leftKnobValue, double rightKnobValue) {\n                final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n                if (dispatcher != null) {\n                    dispatcher.dispatchEvent(\n                        new OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.getId(),\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    );\n                }\n            }\n        });\n    }\n\n    @Override\n    public Map getExportedCustomDirectEventTypeConstants() {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        );\n    }\n}\n'))),(0,i.kt)("p",null,"Let's finalize it by exporting the view manager in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboReactPackage")," instance."))}C.isMDXComponent=!0;const E={toc:[]},M="wrapper";function N(e){let{components:n,...a}=e;return(0,i.kt)(M,(0,t.Z)({},E,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{mdxType:"AndroidAddLibraryInGradle"}),(0,i.kt)(p,{mdxType:"AndroidChangeThemeToMaterial3"}),(0,i.kt)(w,{mdxType:"AndroidJavaEvents"}),(0,i.kt)(f,{mdxType:"AndroidJavaView"}),(0,i.kt)(C,{mdxType:"AndroidJavaViewManager"}),(0,i.kt)(o.ZP,{language:"java",namespace:"rangesliderpackage",packageClass:"RangeSliderTurboPackage",viewManagerClass:"RangeSliderViewManager",mdxType:"AndroidTurboPackage"}))}N.isMDXComponent=!0;const K={toc:[{value:"Events",id:"events",level:4}]},D="wrapper";function T(e){let{components:n,...a}=e;return(0,i.kt)(D,(0,t.Z)({},K,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"events"},"Events"),(0,i.kt)("p",null,"Let's start by handling direct events - go to ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewBeginDragEvent.kt"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewEndDragEvent.kt")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRangeSliderViewValueChangeEvent.kt")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewBeginDragEvent.kt"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewBeginDragEvent.kt"'},'package com.rangesliderpackage\n\nimport com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\nclass OnRangeSliderViewBeginDragEvent(\n    surfaceId: Int,\n    viewId: Int\n) : Event<OnRangeSliderViewBeginDragEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return Arguments.createMap()\n    }\n\n    companion object {\n        const val NAME = "topRangeSliderViewBeginDrag"\n        const val EVENT_PROP_NAME = "onRangeSliderViewBeginDrag"\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewEndDragEvent.kt"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewEndDragEvent.kt"'},'package com.rangesliderpackage\n\nimport com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\nclass OnRangeSliderViewEndDragEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val leftKnobValue: Double,\n    private val rightKnobValue: Double\n) : Event<OnRangeSliderViewEndDragEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putDouble(LEFT_KNOB_KEY, leftKnobValue)\n        putDouble(RIGHT_KNOB_KEY, rightKnobValue)\n    }\n\n    companion object {\n        private const val LEFT_KNOB_KEY = "leftKnobValue"\n        private const val RIGHT_KNOB_KEY = "rightKnobValue"\n        const val NAME = "topRangeSliderViewEndDrag"\n        const val EVENT_PROP_NAME = "onRangeSliderViewEndDrag"\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/OnRangeSliderViewValueChangeEvent.kt"',title:'"android/src/main/java/com/rangesliderpackage/OnRangeSliderViewValueChangeEvent.kt"'},'package com.rangesliderpackage\n\nimport com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\nclass OnRangeSliderViewValueChangeEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val leftKnobValue: Double,\n    private val rightKnobValue: Double\n) : Event<OnRangeSliderViewValueChangeEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putDouble(LEFT_KNOB_KEY, leftKnobValue)\n        putDouble(RIGHT_KNOB_KEY, rightKnobValue)\n    }\n\n    companion object {\n        private const val LEFT_KNOB_KEY = "leftKnobValue"\n        private const val RIGHT_KNOB_KEY = "rightKnobValue"\n        const val NAME = "topRangeSliderViewValueChange"\n        const val EVENT_PROP_NAME = "onRangeSliderViewValueChange"\n    }\n}\n')),(0,i.kt)("p",null,"In each case we are creating event class that extends RN's ",(0,i.kt)("inlineCode",{parentName:"p"},"Event"),".\nThose classes take at least 2 arguments - ",(0,i.kt)("inlineCode",{parentName:"p"},"surfaceId")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"viewId"),".\nTo construct the payload object, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"Arguments.createMap")," utility helper.\nAnd we also define static constants that will be used to register events with specified JS name."))}T.isMDXComponent=!0;const L={toc:[{value:"<code>RangeSliderView.kt</code>",id:"rangesliderviewkt",level:4}]},x="wrapper";function O(e){let{components:n,...a}=e;return(0,i.kt)(x,(0,t.Z)({},L,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"rangesliderviewkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"RangeSliderView.kt")),(0,i.kt)("p",null,"Now, let's declare the custom view that will hold our range slider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"'},'package com.rangesliderpackage\n\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.widget.FrameLayout\nimport com.facebook.react.bridge.ReactContext\nimport com.facebook.react.uimanager.PixelUtil\nimport com.google.android.material.slider.RangeSlider\nimport kotlin.math.abs\n\nclass RangeSliderView(private val reactContext: ReactContext) : FrameLayout(reactContext) {\n    private var mLastLeftKnobValue = 0f\n    private var mLastRightKnobValue = 1f\n    private var slider = RangeSlider(reactContext).apply {\n        trackHeight = PixelUtil.toPixelFromDIP(10f).toInt()\n        thumbTintList = ColorStateList.valueOf(Color.BLUE)\n        addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {\n            override fun onStartTrackingTouch(slider: RangeSlider) {\n                //\n            }\n\n            override fun onStopTrackingTouch(slider: RangeSlider) {\n                //\n            }\n        })\n        addOnChangeListener { slider, _, _ ->\n            val newLeftKnobValue = slider.values[0]\n            val newRightKnobValue = slider.values[1]\n            if (abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f && abs(newRightKnobValue - mLastRightKnobValue) < 0.1f) {\n                return@addOnChangeListener\n            }\n            mLastLeftKnobValue = newLeftKnobValue\n            mLastRightKnobValue = newRightKnobValue\n\n            // ...\n        }\n    }\n\n    init {\n        this.addView(slider, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))\n    }\n\n    companion object {\n        const val NAME = "RangeSliderView"\n    }\n}\n')),(0,i.kt)("p",null,"Our custom view extends ",(0,i.kt)("inlineCode",{parentName:"p"},"FrameLayout")," class, it declares static ",(0,i.kt)("inlineCode",{parentName:"p"},"NAME")," constant, that's value matches the one from JS specification, it also declares ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeSlider")," instance with some default configuration."),(0,i.kt)("p",null,"As a next step, let's forward props to the slider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"'},"// ...\n\nclass RangeSliderView(private val reactContext: ReactContext) : FrameLayout(reactContext) {\n    // ...\n\n    init {\n        this.addView(slider, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))\n    }\n\n// highlight-start\n    fun setActiveColor(activeColor: Int?) {\n        slider.trackActiveTintList = ColorStateList.valueOf(activeColor ?: Color.BLUE)\n    }\n\n    fun setInactiveColor(inactiveColor: Int?) {\n        slider.trackInactiveTintList = ColorStateList.valueOf(inactiveColor ?: Color.GRAY)\n    }\n\n    fun setMinValue(minValue: Double) {\n        slider.valueFrom = minValue.toFloat()\n    }\n\n    fun setMaxValue(maxValue: Double) {\n        slider.valueTo = maxValue.toFloat()\n    }\n\n    fun setLeftKnobValue(leftKnobValue: Double) {\n        if (leftKnobValue.isNaN()) {\n            return\n        }\n        if (slider.values.count() < 2) {\n            slider.values = listOf(leftKnobValue.toFloat(), leftKnobValue.toFloat() + 1)\n            return\n        }\n        val rightKnobValue = slider.values[1]\n        slider.values = listOf(leftKnobValue.toFloat(), rightKnobValue)\n    }\n\n    fun setRightKnobValue(rightKnobValue: Double) {\n        if (rightKnobValue.isNaN()) {\n            return\n        }\n        if (slider.values.isEmpty()) {\n            slider.values = listOf(rightKnobValue.toFloat() - 1, rightKnobValue.toFloat())\n            return\n        }\n        val leftKnobValue = slider.values[0]\n        slider.values = listOf(leftKnobValue, rightKnobValue.toFloat())\n    }\n\n    fun setStep(step: Int) {\n        slider.stepSize = step.toFloat()\n    }\n// highlight-end\n\n    // ...\n}\n")),(0,i.kt)("p",null,"Here we are defining public setter function that will be used by view manager class.\nInside those functions we parse arguments and pass them to the slider."),(0,i.kt)("p",null,"Good, we communicate with our slider, but we still have to make the slider communicate back with us!\nWe'll do it by introducing listener property, that view manager class will use to receive events from slider."),(0,i.kt)("p",null,"Let's start by defining the interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"'},"class RangeSliderView(private val reactContext: ReactContext) : FrameLayout(reactContext) {\n    interface OnRangeSliderViewListener {\n        fun onRangeSliderViewBeginDrag()\n        fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double)\n        fun onRangeSliderViewValueChange(leftKnobValue: Double, rightKnobValue: Double)\n    }\n\n    // ...\n}\n")),(0,i.kt)("p",null,"Next, we'll add a listener property and use it to send events to the receiver:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"',title:'"android/src/main/java/com/rangesliderpackage/RangeSliderView.kt"'},"class RangeSliderView(private val reactContext: ReactContext) : FrameLayout(reactContext) {\n    interface OnRangeSliderViewListener {\n        fun onRangeSliderViewBeginDrag()\n        fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double)\n        fun onRangeSliderViewValueChange(leftKnobValue: Double, rightKnobValue: Double)\n    }\n\n// highlight-start\n    private var mListener: OnRangeSliderViewListener? = null\n// highlight-end\n    private var mLastLeftKnobValue = 0f\n    private var mLastRightKnobValue = 1f\n    private var slider = RangeSlider(reactContext).apply {\n        trackHeight = PixelUtil.toPixelFromDIP(10f).toInt()\n        thumbTintList = ColorStateList.valueOf(Color.BLUE)\n        addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {\n            override fun onStartTrackingTouch(slider: RangeSlider) {\n// highlight-start\n                sendOnRangeSliderViewBeginDragEvent()\n// highlight-end\n            }\n\n            override fun onStopTrackingTouch(slider: RangeSlider) {\n// highlight-start\n                sendOnRangeSliderViewEndDragEvent(slider.values[0].toDouble(), slider.values[1].toDouble())\n// highlight-end\n            }\n        })\n        addOnChangeListener { slider, _, _ ->\n            val newLeftKnobValue = slider.values[0]\n            val newRightKnobValue = slider.values[1]\n            if (abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f && abs(newRightKnobValue - mLastRightKnobValue) < 0.1f) {\n                return@addOnChangeListener\n            }\n            mLastLeftKnobValue = newLeftKnobValue\n            mLastRightKnobValue = newRightKnobValue\n// highlight-start\n            sendOnRangeSliderViewValueChangeEvent(newLeftKnobValue.toDouble(), newRightKnobValue.toDouble())\n// highlight-end\n        }\n    }\n\n    init {\n        this.addView(slider, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))\n    }\n\n// highlight-start\n    fun setOnRangeSliderViewListener(listener: OnRangeSliderViewListener?) {\n        mListener = listener\n    }\n// highlight-end\n\n    // ...\n\n// highlight-start\n    private fun sendOnRangeSliderViewValueChangeEvent(leftKnobValue: Double, rightKnobValue: Double) {\n        mListener?.onRangeSliderViewValueChange(leftKnobValue, rightKnobValue)\n    }\n\n    private fun sendOnRangeSliderViewBeginDragEvent() {\n        mListener?.onRangeSliderViewBeginDrag()\n    }\n\n    private fun sendOnRangeSliderViewEndDragEvent(leftKnobValue: Double, rightKnobValue: Double) {\n        mListener?.onRangeSliderViewEndDrag(leftKnobValue, rightKnobValue)\n    }\n// highlight-end\n\n    // ...\n}\n")),(0,i.kt)("p",null,"Cool! Now we have everything in place, let's use it in view manager class."),(0,i.kt)(V.ZP,{filename:"RangeSliderView.kt",language:"kotlin",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage\n\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.widget.FrameLayout\nimport com.facebook.react.bridge.ReactContext\nimport com.facebook.react.uimanager.PixelUtil\nimport com.google.android.material.slider.RangeSlider\nimport kotlin.math.abs\n\nclass RangeSliderView(private val reactContext: ReactContext) : FrameLayout(reactContext) {\n    interface OnRangeSliderViewListener {\n        fun onRangeSliderViewBeginDrag()\n        fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double)\n        fun onRangeSliderViewValueChange(leftKnobValue: Double, rightKnobValue: Double)\n    }\n\n    private var mListener: OnRangeSliderViewListener? = null\n    private var mLastLeftKnobValue = 0f\n    private var mLastRightKnobValue = 1f\n    private var slider = RangeSlider(reactContext).apply {\n        trackHeight = PixelUtil.toPixelFromDIP(10f).toInt()\n        thumbTintList = ColorStateList.valueOf(Color.BLUE)\n        addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {\n            override fun onStartTrackingTouch(slider: RangeSlider) {\n                sendOnRangeSliderViewBeginDragEvent()\n            }\n\n            override fun onStopTrackingTouch(slider: RangeSlider) {\n                sendOnRangeSliderViewEndDragEvent(slider.values[0].toDouble(), slider.values[1].toDouble())\n            }\n        })\n        addOnChangeListener { slider, _, _ ->\n            val newLeftKnobValue = slider.values[0]\n            val newRightKnobValue = slider.values[1]\n            if (abs(newLeftKnobValue - mLastLeftKnobValue) < 0.1f && abs(newRightKnobValue - mLastRightKnobValue) < 0.1f) {\n                return@addOnChangeListener\n            }\n            mLastLeftKnobValue = newLeftKnobValue\n            mLastRightKnobValue = newRightKnobValue\n            sendOnRangeSliderViewValueChangeEvent(newLeftKnobValue.toDouble(), newRightKnobValue.toDouble())\n        }\n    }\n\n    init {\n        this.addView(slider, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))\n    }\n\n    fun setOnRangeSliderViewListener(listener: OnRangeSliderViewListener?) {\n        mListener = listener\n    }\n\n    fun setActiveColor(activeColor: Int?) {\n        slider.trackActiveTintList = ColorStateList.valueOf(activeColor ?: Color.BLUE)\n    }\n\n    fun setInactiveColor(inactiveColor: Int?) {\n        slider.trackInactiveTintList = ColorStateList.valueOf(inactiveColor ?: Color.GRAY)\n    }\n\n    fun setMinValue(minValue: Double) {\n        slider.valueFrom = minValue.toFloat()\n    }\n\n    fun setMaxValue(maxValue: Double) {\n        slider.valueTo = maxValue.toFloat()\n    }\n\n    fun setLeftKnobValue(leftKnobValue: Double) {\n        if (leftKnobValue.isNaN()) {\n            return\n        }\n        if (slider.values.count() < 2) {\n            slider.values = listOf(leftKnobValue.toFloat(), leftKnobValue.toFloat() + 1)\n            return\n        }\n        val rightKnobValue = slider.values[1]\n        slider.values = listOf(leftKnobValue.toFloat(), rightKnobValue)\n    }\n\n    fun setRightKnobValue(rightKnobValue: Double) {\n        if (rightKnobValue.isNaN()) {\n            return\n        }\n        if (slider.values.isEmpty()) {\n            slider.values = listOf(rightKnobValue.toFloat() - 1, rightKnobValue.toFloat())\n            return\n        }\n        val leftKnobValue = slider.values[0]\n        slider.values = listOf(leftKnobValue, rightKnobValue.toFloat())\n    }\n\n    fun setStep(step: Int) {\n        slider.stepSize = step.toFloat()\n    }\n\n    private fun sendOnRangeSliderViewValueChangeEvent(leftKnobValue: Double, rightKnobValue: Double) {\n        mListener?.onRangeSliderViewValueChange(leftKnobValue, rightKnobValue)\n    }\n\n    private fun sendOnRangeSliderViewBeginDragEvent() {\n        mListener?.onRangeSliderViewBeginDrag()\n    }\n\n    private fun sendOnRangeSliderViewEndDragEvent(leftKnobValue: Double, rightKnobValue: Double) {\n        mListener?.onRangeSliderViewEndDrag(leftKnobValue, rightKnobValue)\n    }\n\n    companion object {\n        const val NAME = "RangeSliderView"\n    }\n}\n'))))}O.isMDXComponent=!0;const y={toc:[{value:"<code>RangeSliderViewManager.kt</code>",id:"rangesliderviewmanagerkt",level:4}]},I="wrapper";function A(e){let{components:n,...a}=e;return(0,i.kt)(I,(0,t.Z)({},y,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"rangesliderviewmanagerkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"RangeSliderViewManager.kt")),(0,i.kt)("p",null,"The view manager class will connect the slider with our RN app - let's start by creating the boilerplate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.kt"',title:'"android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.kt"'},'package com.rangesliderpackage\n\nimport android.view.View\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewGroupManager\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface\n\n@ReactModule(name = RangeSliderView.NAME)\nclass RangeSliderViewManager : ViewGroupManager<RangeSliderView>(), RangeSliderViewManagerInterface<RangeSliderView> {\n    private val mDelegate = RangeSliderViewManagerDelegate(this)\n\n    override fun getName() = RangeSliderView.NAME\n\n    override fun getDelegate(): ViewManagerDelegate<RangeSliderView> = mDelegate\n\n    override fun receiveCommand(root: RangeSliderView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): RangeSliderView {\n        return RangeSliderView(reactContext)\n    }\n\n    @ReactProp(name = "activeColor", customType = "Color")\n    override fun setActiveColor(view: RangeSliderView, activeColor: Int?) {\n        view.setActiveColor(activeColor)\n    }\n\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    override fun setInactiveColor(view: RangeSliderView, inactiveColor: Int?) {\n        view.setInactiveColor(inactiveColor)\n    }\n\n    @ReactProp(name = "minValue")\n    override fun setMinValue(view: RangeSliderView, value: Double) {\n        view.setMinValue(value)\n    }\n\n    @ReactProp(name = "maxValue")\n    override fun setMaxValue(view: RangeSliderView, value: Double) {\n        view.setMaxValue(value)\n    }\n\n    @ReactProp(name = "leftKnobValue")\n    override fun setLeftKnobValue(view: RangeSliderView, value: Double) {\n        view.setLeftKnobValue(value)\n    }\n\n    @ReactProp(name = "rightKnobValue")\n    override fun setRightKnobValue(view: RangeSliderView, value: Double) {\n        view.setRightKnobValue(value)\n    }\n\n    @ReactProp(name = "step")\n    override fun setStep(view: RangeSliderView, step: Int) {\n        view.setStep(step)\n    }\n\n    override fun setLeftKnobValueProgrammatically(view: RangeSliderView?, value: Double) {\n        view?.setLeftKnobValue(value)\n    }\n\n    override fun setRightKnobValueProgrammatically(view: RangeSliderView?, value: Double) {\n        view?.setRightKnobValue(value)\n    }\n\n    override fun addView(parent: RangeSliderView, child: View?, index: Int) {\n        // That component does not accept child views\n    }\n\n    override fun addViews(parent: RangeSliderView, views: MutableList<View>?) {\n        // That component does not accept child views\n    }\n\n    override fun removeAllViews(parent: RangeSliderView) {\n        // That component does not accept child views\n    }\n\n    override fun removeView(parent: RangeSliderView, view: View?) {\n        // That component does not accept child views\n    }\n\n    override fun removeViewAt(parent: RangeSliderView, index: Int) {\n        // That component does not accept child views\n    }\n}\n')),(0,i.kt)("p",null,"So we are doing a bunch of things in the view manager class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we create codegenerated delegate and return it from ",(0,i.kt)("inlineCode",{parentName:"li"},"getDelegate")," method"),(0,i.kt)("li",{parentName:"ul"},"we use custom view's ",(0,i.kt)("inlineCode",{parentName:"li"},"NAME")," constant in ",(0,i.kt)("inlineCode",{parentName:"li"},"getName")," (this needs to match the name from JS specification)"),(0,i.kt)("li",{parentName:"ul"},"we use delegate to handle native commands in ",(0,i.kt)("inlineCode",{parentName:"li"},"receiveCommand")," method"),(0,i.kt)("li",{parentName:"ul"},"we initialize instance of our custom view in ",(0,i.kt)("inlineCode",{parentName:"li"},"createViewInstance")," method"),(0,i.kt)("li",{parentName:"ul"},"we handle all props and native commands")),(0,i.kt)("p",null,"You may have noticed, that view manager class also overrides add/remove view methods.\nThose methods can be used to control how the child views should be added/removed in the view managed by the view manager.\nIn our case, we prevent adding/removal to be sure that our slider view does not have any child views."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Usually when the android view does not handle any children, you will use ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleViewManager")," class instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewGroupManager")," - here the latter is used, just to showcase that add/remove view methods exist and can be overriden")),(0,i.kt)("p",null,"We are in the half way, now it's time to handle event emitting based on the values received from the slider.\nLet's add the following snippet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.kt"',title:'"android/src/newarch/java/com/rangesliderpackage/RangeSliderViewManager.kt"'},'package com.rangesliderpackage\n\nimport android.view.View\nimport com.facebook.react.bridge.ReadableArray\n// highlight-start\nimport com.facebook.react.common.MapBuilder\n// highlight-end\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\n// highlight-start\nimport com.facebook.react.uimanager.UIManagerHelper\n// highlight-end\nimport com.facebook.react.uimanager.ViewGroupManager\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface\n\n@ReactModule(name = RangeSliderView.NAME)\nclass RangeSliderViewManager : ViewGroupManager<RangeSliderView>(), RangeSliderViewManagerInterface<RangeSliderView> {\n    // ...\n\n// highlight-start\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: RangeSliderView) {\n        super.addEventEmitters(reactContext, view)\n        view.setOnRangeSliderViewListener(object : RangeSliderView.OnRangeSliderViewListener {\n            override fun onRangeSliderViewValueChange(\n                leftKnobValue: Double,\n                rightKnobValue: Double\n            ) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewBeginDrag() {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n        })\n    }\n\n    override fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        )\n    }\n// highlight-end\n}\n')),(0,i.kt)("p",null,"To handle the events, we can override ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventEmitters")," method on the view manager class.\nIn that method, we can register listener where we'll dispatch events based on received values.\nDispatching events is available thanks to ",(0,i.kt)("inlineCode",{parentName:"p"},"UIManagerHelper.getEventDispatcherForReactTag")," method - it needs context and the id (react tag) of the view.\nAnd each dispatched event gets at least 2 arguments - ",(0,i.kt)("inlineCode",{parentName:"p"},"surfaceId")," (obtained with ",(0,i.kt)("inlineCode",{parentName:"p"},"UIManagerHelper.getSurfaceId"),") and id of the view."),(0,i.kt)("p",null,"However, to dispatch events we need to also register their names, so that we can consume them in the JS code.\nThis is done in ",(0,i.kt)("inlineCode",{parentName:"p"},"getExportedCustomDirectEventTypeConstants")," method that we can override on the view manager class."),(0,i.kt)(V.ZP,{filename:"RangeSliderViewManager.kt",language:"kotlin",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage\n\nimport android.view.View\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.common.MapBuilder\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\nimport com.facebook.react.uimanager.ViewGroupManager\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerDelegate\nimport com.facebook.react.viewmanagers.RangeSliderViewManagerInterface\n\n@ReactModule(name = RangeSliderView.NAME)\nclass RangeSliderViewManager : ViewGroupManager<RangeSliderView>(), RangeSliderViewManagerInterface<RangeSliderView> {\n    private val mDelegate = RangeSliderViewManagerDelegate(this)\n\n    override fun getName() = RangeSliderView.NAME\n\n    override fun getDelegate(): ViewManagerDelegate<RangeSliderView> = mDelegate\n\n    override fun receiveCommand(root: RangeSliderView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): RangeSliderView {\n        return RangeSliderView(reactContext)\n    }\n\n    @ReactProp(name = "activeColor", customType = "Color")\n    override fun setActiveColor(view: RangeSliderView, activeColor: Int?) {\n        view.setActiveColor(activeColor)\n    }\n\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    override fun setInactiveColor(view: RangeSliderView, inactiveColor: Int?) {\n        view.setInactiveColor(inactiveColor)\n    }\n\n    @ReactProp(name = "minValue")\n    override fun setMinValue(view: RangeSliderView, value: Double) {\n        view.setMinValue(value)\n    }\n\n    @ReactProp(name = "maxValue")\n    override fun setMaxValue(view: RangeSliderView, value: Double) {\n        view.setMaxValue(value)\n    }\n\n    @ReactProp(name = "leftKnobValue")\n    override fun setLeftKnobValue(view: RangeSliderView, value: Double) {\n        view.setLeftKnobValue(value)\n    }\n\n    @ReactProp(name = "rightKnobValue")\n    override fun setRightKnobValue(view: RangeSliderView, value: Double) {\n        view.setRightKnobValue(value)\n    }\n\n    @ReactProp(name = "step")\n    override fun setStep(view: RangeSliderView, step: Int) {\n        view.setStep(step)\n    }\n\n    override fun setLeftKnobValueProgrammatically(view: RangeSliderView?, value: Double) {\n        view?.setLeftKnobValue(value)\n    }\n\n    override fun setRightKnobValueProgrammatically(view: RangeSliderView?, value: Double) {\n        view?.setRightKnobValue(value)\n    }\n\n    override fun addView(parent: RangeSliderView, child: View?, index: Int) {\n        // That component does not accept child views\n    }\n\n    override fun addViews(parent: RangeSliderView, views: MutableList<View>?) {\n        // That component does not accept child views\n    }\n\n    override fun removeAllViews(parent: RangeSliderView) {\n        // That component does not accept child views\n    }\n\n    override fun removeView(parent: RangeSliderView, view: View?) {\n        // That component does not accept child views\n    }\n\n    override fun removeViewAt(parent: RangeSliderView, index: Int) {\n        // That component does not accept child views\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: RangeSliderView) {\n        super.addEventEmitters(reactContext, view)\n        view.setOnRangeSliderViewListener(object : RangeSliderView.OnRangeSliderViewListener {\n            override fun onRangeSliderViewValueChange(\n                leftKnobValue: Double,\n                rightKnobValue: Double\n            ) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewBeginDrag() {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n        })\n    }\n\n    override fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        )\n    }\n}\n'))),(0,i.kt)(R.ZP,{filename:"android/src/oldarch/java/com/rangesliderpackage/RangeSliderViewManager.kt",language:"kotlin",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.rangesliderpackage\n\nimport android.view.View\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.common.MapBuilder\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\nimport com.facebook.react.uimanager.ViewGroupManager\nimport com.facebook.react.uimanager.annotations.ReactProp\n\n@ReactModule(name = RangeSliderView.NAME)\nclass RangeSliderViewManager : ViewGroupManager<RangeSliderView>() {\n    override fun getName() = RangeSliderView.NAME\n\n    override fun receiveCommand(root: RangeSliderView, commandId: String?, args: ReadableArray?) {\n        super.receiveCommand(root, commandId, args)\n\n        when (commandId) {\n            "setLeftKnobValueProgrammatically" -> {\n                val value = args!!.getDouble(0)\n                setLeftKnobValueProgrammatically(root, value)\n            }\n            "setRightKnobValueProgrammatically" -> {\n                val value = args!!.getDouble(0)\n                setRightKnobValueProgrammatically(root, value)\n            }\n        }\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): RangeSliderView {\n        return RangeSliderView(reactContext)\n    }\n\n    @ReactProp(name = "activeColor", customType = "Color")\n    fun setActiveColor(view: RangeSliderView, activeColor: Int?) {\n        view.setActiveColor(activeColor)\n    }\n\n    @ReactProp(name = "inactiveColor", customType = "Color")\n    fun setInactiveColor(view: RangeSliderView, inactiveColor: Int?) {\n        view.setInactiveColor(inactiveColor)\n    }\n\n    @ReactProp(name = "minValue")\n    fun setMinValue(view: RangeSliderView, value: Double) {\n        view.setMinValue(value)\n    }\n\n    @ReactProp(name = "maxValue")\n    fun setMaxValue(view: RangeSliderView, value: Double) {\n        view.setMaxValue(value)\n    }\n\n    @ReactProp(name = "leftKnobValue")\n    fun setLeftKnobValue(view: RangeSliderView, value: Double) {\n        view.setLeftKnobValue(value)\n    }\n\n    @ReactProp(name = "rightKnobValue")\n    fun setRightKnobValue(view: RangeSliderView, value: Double) {\n        view.setRightKnobValue(value)\n    }\n\n    @ReactProp(name = "step")\n    fun setStep(view: RangeSliderView, step: Int) {\n        view.setStep(step)\n    }\n\n    private fun setLeftKnobValueProgrammatically(view: RangeSliderView, value: Double) {\n        view.setLeftKnobValue(value)\n    }\n\n    private fun setRightKnobValueProgrammatically(view: RangeSliderView, value: Double) {\n        view.setRightKnobValue(value)\n    }\n\n    override fun addView(parent: RangeSliderView, child: View?, index: Int) {\n        // That component does not accept child views\n    }\n\n    override fun addViews(parent: RangeSliderView, views: MutableList<View>?) {\n        // That component does not accept child views\n    }\n\n    override fun removeAllViews(parent: RangeSliderView) {\n        // That component does not accept child views\n    }\n\n    override fun removeView(parent: RangeSliderView, view: View?) {\n        // That component does not accept child views\n    }\n\n    override fun removeViewAt(parent: RangeSliderView, index: Int) {\n        // That component does not accept child views\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: RangeSliderView) {\n        super.addEventEmitters(reactContext, view)\n        view.setOnRangeSliderViewListener(object : RangeSliderView.OnRangeSliderViewListener {\n            override fun onRangeSliderViewValueChange(\n              leftKnobValue: Double,\n              rightKnobValue: Double\n            ) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewValueChangeEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewBeginDrag() {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewBeginDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id\n                        )\n                    )\n            }\n\n            override fun onRangeSliderViewEndDrag(leftKnobValue: Double, rightKnobValue: Double) {\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                    ?.dispatchEvent(\n                        OnRangeSliderViewEndDragEvent(\n                            UIManagerHelper.getSurfaceId(reactContext),\n                            view.id,\n                            leftKnobValue,\n                            rightKnobValue\n                        )\n                    )\n            }\n        })\n    }\n\n    override fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {\n        return MapBuilder.of(\n            OnRangeSliderViewValueChangeEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewValueChangeEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewBeginDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewBeginDragEvent.EVENT_PROP_NAME),\n            OnRangeSliderViewEndDragEvent.NAME,\n            MapBuilder.of("registrationName", OnRangeSliderViewEndDragEvent.EVENT_PROP_NAME)\n        )\n    }\n}\n'))),(0,i.kt)("p",null,"Let's finalize it by exporting the view manager in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboReactPackage")," instance."))}A.isMDXComponent=!0;const P={toc:[]},j="wrapper";function B(e){let{components:n,...a}=e;return(0,i.kt)(j,(0,t.Z)({},P,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{mdxType:"AndroidAddLibraryInGradle"}),(0,i.kt)(p,{mdxType:"AndroidChangeThemeToMaterial3"}),(0,i.kt)(T,{mdxType:"AndroidKotlinEvents"}),(0,i.kt)(O,{mdxType:"AndroidKotlinView"}),(0,i.kt)(A,{mdxType:"AndroidKotlinViewManager"}),(0,i.kt)(o.ZP,{language:"kotlin",namespace:"rangesliderpackage",packageClass:"RangeSliderTurboPackage",viewManagerClass:"RangeSliderViewManager",mdxType:"AndroidTurboPackage"}))}B.isMDXComponent=!0;const _={sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},H=void 0,F={unversionedId:"guides/range-slider-view/android-impl",id:"guides/range-slider-view/android-impl",title:"Android implementation",description:"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under /android path.",source:"@site/docs/guides/range-slider-view/android-impl.mdx",sourceDirName:"guides/range-slider-view",slug:"/guides/range-slider-view/android-impl",permalink:"/rnbridgingtutorial/docs/guides/range-slider-view/android-impl",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/guides/range-slider-view/android-impl.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},sidebar:"tutorialSidebar",previous:{title:"iOS implementation",permalink:"/rnbridgingtutorial/docs/guides/range-slider-view/ios-impl"},next:{title:"Usage in practice",permalink:"/rnbridgingtutorial/docs/guides/range-slider-view/usage"}},U={},Z=[],G={toc:Z},X="wrapper";function $(e){let{components:n,...a}=e;return(0,i.kt)(X,(0,t.Z)({},G,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under ",(0,i.kt)("inlineCode",{parentName:"p"},"<your-project-dir>/android")," path.\nWhen the project is opened, find ",(0,i.kt)("inlineCode",{parentName:"p"},"range-slider-package")," inside project-tree"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"range-slider-package")," contains 3 packages with the same name ",(0,i.kt)("inlineCode",{parentName:"p"},"com.rangesliderpackage"),". After expanding them, you'll notice that these contain following things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"code-generated Java spec files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RangeSliderViewManager")," view manager class stub files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RangeSliderView")," class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RangeSliderTurboPackage")," class stub file")),(0,i.kt)("p",null,"Let's start implementing!"),(0,i.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)(B,{mdxType:"AndroidKotlinImpl"})),(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(N,{mdxType:"AndroidJavaImpl"}))),(0,i.kt)("p",null,"You can check training repo for Kotlin implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/range-slider-package"},"here")," and Java implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/range-slider-package-classic"},"here"),"."),(0,i.kt)("p",null,"That's Android part, now let's wrap things up and ",(0,i.kt)("a",{parentName:"p",href:"./usage"},"see our range slider")," in action!"))}$.isMDXComponent=!0}}]);