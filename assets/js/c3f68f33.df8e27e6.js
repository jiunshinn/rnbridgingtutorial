"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[6094],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>w});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=m(t),p=r,w=u["".concat(s,".").concat(p)]||u[p]||d[p]||o;return t?a.createElement(w,i(i({ref:n},c),{},{components:t})):a.createElement(w,i({ref:n},c))}));function w(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>k});var a=t(7462),r=t(7294),o=t(6010),i=t(2466),l=t(6550),s=t(1980),m=t(7392),c=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,m.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function w(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,m]=w({queryString:t,groupId:a}),[u,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),v=(()=>{const e=s??u;return p({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),b(e)}),[m,b,o]),tabValues:o}}var v=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:m}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=m[t].value;a!==l&&(u(n),s(a))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},m.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:d},i,{className:(0,o.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function h(e){const n=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(g,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function k(e){const n=(0,v.Z)();return r.createElement(h,(0,a.Z)({key:String(n)},e))}},8586:(e,n,t)=>{t.d(n,{ZP:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={toc:[]},i="wrapper";function l(e){let{components:n,...t}=e;return(0,r.kt)(i,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You may notice, that JS specs contain codegen-related methods, classes, types, etc. to make things more future-proof."),(0,r.kt)("p",null,"That's because:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"those elements are available since RN older versions (even from v0.65)"),(0,r.kt)("li",{parentName:"ul"},'those elements are falling back to "old architecture" implementation (e.g. codegenNativeComponent)'),(0,r.kt)("li",{parentName:"ul"},"it introduces type safety for exposed native parts on JS side"),(0,r.kt)("li",{parentName:"ul"},"it's much easier to keep single specification on JS side - when old arch will be dropped, there'll be no need to change anything on JS side")),(0,r.kt)("p",null,"So to make it easier, let's use them, to get you more familiar with it \ud83d\udc4d"))}l.isMDXComponent=!0},4337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),i=t(5162),l=t(8586);const s={sidebar_label:"View commands (old arch)",sidebar_position:6,title:"View commands (old arch)"},m=void 0,c={unversionedId:"view-reference/view-commands-old",id:"view-reference/view-commands-old",title:"View commands (old arch)",description:"Commands declaration",source:"@site/docs/view-reference/view-commands-old.mdx",sourceDirName:"view-reference",slug:"/view-reference/view-commands-old",permalink:"/rnbridgingtutorial/docs/view-reference/view-commands-old",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/bridging-tutorial-website/docs/view-reference/view-commands-old.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"View commands (old arch)",sidebar_position:6,title:"View commands (old arch)"},sidebar:"tutorialSidebar",previous:{title:"View commands",permalink:"/rnbridgingtutorial/docs/view-reference/view-commands"}},u={},d=[{value:"Commands declaration",id:"commands-declaration",level:3},{value:"Commands implementation in native code",id:"commands-implementation-in-native-code",level:3}],p={toc:d},w="wrapper";function b(e){let{components:n,...t}=e;return(0,r.kt)(w,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)(l.ZP,{mdxType:"CodegenForOldArchInfo"})),(0,r.kt)("h3",{id:"commands-declaration"},"Commands declaration"),(0,r.kt)("p",null,"To add commands to native component, JS spec needs to commands object made with ",(0,r.kt)("inlineCode",{parentName:"p"},"codegenNativeCommands")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import * as React from 'react';\nimport type { HostComponent, ViewProps } from 'react-native';\nimport type { Double } from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nexport interface MyAwesomeViewProps extends ViewProps {}\n\nexport interface MyAwesomeViewNativeCommands {\n  doAwesomeJob: (viewRef: React.ElementRef<<HostComponent<MyAwesomeViewProps>>>, arg: Double) => void\n}\n\n// codegenNativeCommands uses UIManager.dispatchViewManagerCommand on old arch\nexport const MyAwesomeViewCommands = codegenNativeCommands<MyAwesomeViewNativeCommands>({\n  supportedCommands: [ 'doAwesomeJob' ],\n});\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n")),(0,r.kt)("h3",{id:"commands-implementation-in-native-code"},"Commands implementation in native code"),(0,r.kt)(o.Z,{groupId:"native_side",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"iOS",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"#import <React/RCTUIManager.h>\n\n// ...\n\nRCT_EXPORT_METHOD(doAwesomeJob:(nonnull NSNumber*) reactTag, arg:(double) arg) {\n    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {\n        MyAwesomeView *view = viewRegistry[reactTag];\n        if (!view || ![view isKindOfClass:[MyAwesomeView class]]) {\n            return;\n        }\n        // ...\n    }];\n}\n")),(0,r.kt)("p",null,"To implement commands for iOS native component, view manager class has to declare method with ",(0,r.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_METHOD")," macro,\nwhere view that should handle the command is retrieved with UIManager's ",(0,r.kt)("inlineCode",{parentName:"p"},"- addUIBlock:")," method.")),(0,r.kt)(i.Z,{value:"Android",label:"Android",mdxType:"TabItem"},(0,r.kt)(o.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ViewGroupManager\n\n// ...\n\n@ReactModule(name = MyAwesomeView.NAME)\nclass MyAwesomeViewManager : ViewGroupManager<MyAwesomeView>() {\n    override fun receiveCommand(root: MyAwesomeView, commandId: String?, args: ReadableArray?) {\n        super.receiveCommand(root, commandId, args)\n\n        when (commandId) {\n            "doAwesomeJob" -> {\n                val value = args!!.getDouble(0)\n                doAwesomeJob(root, value)\n            }\n        }\n    }\n\n    private fun doAwesomeJob(view: MyAwesomeView, arg: Double) {\n        // ...\n    }\n\n    // ...\n}\n'))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ViewGroupManager;\n\n// ...\n\n@ReactModule(name = MyAwesomeView.NAME)\npublic class MyAwesomeViewManager extends ViewGroupManager<MyAwesomeView> {\n    @Override\n    public void receiveCommand(MyAwesomeView root, String commandId, @Nullable ReadableArray args) {\n        super.receiveCommand(root, commandId, args);\n\n        switch (commandId) {\n            case "doAwesomeJob":\n                final double value = args.getDouble(0);\n                doAwesomeJob(root, value);\n                break;\n        }\n    }\n\n    private void doAwesomeJob(MyAwesomeView view, double arg) {\n        // ...\n    }\n\n    // ...\n}\n')))),(0,r.kt)("p",null,"To implement command for Android native component, it has to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"receiveCommand")," method in view manager class, where command and args are parsed and forwarded to specific method."))))}b.isMDXComponent=!0}}]);