"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[509],{5162:(e,n,a)=>{a.d(n,{Z:()=>o});var t=a(7294),i=a(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:a,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,o),hidden:a},n)}},4866:(e,n,a)=>{a.d(n,{Z:()=>b});var t=a(7462),i=a(7294),r=a(6010),o=a(2466),d=a(6550),l=a(1980),m=a(7392),c=a(12);function g(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:i}}=e;return{value:n,label:a,attributes:t,default:i}}))}function s(e){const{values:n,children:a}=e;return(0,i.useMemo)((()=>{const e=n??g(a);return function(e){const n=(0,m.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:a}=e;const t=(0,d.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function w(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,r=s(e),[o,d]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[l,m]=u({queryString:a,groupId:t}),[g,w]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,r]=(0,c.Nk)(a);return[t,(0,i.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:t}),v=(()=>{const e=l??g;return p({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{v&&d(v)}),[v]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),m(e),w(e)}),[m,w,r]),tabValues:r}}var v=a(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:a,selectedValue:d,selectValue:l,tabValues:m}=e;const c=[],{blockElementScrollPositionUntilNextRender:g}=(0,o.o5)(),s=e=>{const n=e.currentTarget,a=c.indexOf(n),t=m[a].value;t!==d&&(g(n),l(t))},p=e=>{let n=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n)},m.map((e=>{let{value:n,label:a,attributes:o}=e;return i.createElement("li",(0,t.Z)({role:"tab",tabIndex:d===n?0:-1,"aria-selected":d===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:s},o,{className:(0,r.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":d===n})}),a??n)})))}function k(e){let{lazy:n,children:a,selectedValue:t}=e;if(a=Array.isArray(a)?a:[a],n){const e=a.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function V(e){const n=w(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",f.tabList)},i.createElement(h,(0,t.Z)({},e,n)),i.createElement(k,(0,t.Z)({},e,n)))}function b(e){const n=(0,v.Z)();return i.createElement(V,(0,t.Z)({key:String(n)},e))}},6105:(e,n,a)=>{a.d(n,{ZP:()=>l});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const o={toc:[]},d="wrapper";function l(e){let{components:n,...a}=e;return(0,i.kt)(d,(0,t.Z)({},o,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",null,(0,i.kt)("code",null,a.packageClass,".","java"===a.language?"java":"kt")),(0,i.kt)("p",null,"The last thing we need to do is to export ",(0,i.kt)("code",null,a.viewManagerClass?a.viewManagerClass:a.moduleClass)," in the ",(0,i.kt)("code",null,"TurboReactPackage")," instance. Let's go to ",(0,i.kt)("code",null,a.packageClass,".","java"===a.language?"java":"kt")," and add our new module."),(0,i.kt)(r.Z,{language:a.language,title:`android/src/main/java/com/${a.namespace}/${a.packageClass}.${"java"===a.language?"java":"kt"}`,mdxType:"CodeBlock"},"java"===a.language?`package com.${a.namespace};\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.TurboReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.module.model.ReactModuleInfo;\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule;\n${a.viewManagerClass?"// highlight-start\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.Arrays;\n// highlight-end":""}\nimport java.util.HashMap;${a.viewManagerClass?"\n// highlight-start\nimport java.util.List;\n// highlight-end":""}\nimport java.util.Map;\n\npublic class ${a.packageClass} extends TurboReactPackage {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    @Override\n    @Nullable\n    public NativeModule getModule(String name, ReactApplicationContext reactContext) {\n        ${a.moduleClass?`// highlight-start\n        if (name.equals(${a.moduleClass}.NAME)) {\n            return new ${a.moduleClass}(reactContext);\n        }\n        return null;\n// highlight-end`:"return null;"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    @Override\n    public ReactModuleInfoProvider getReactModuleInfoProvider() {\n        /**\n         * Here declare the array of exported modules\n         */\n        Class<? extends NativeModule>[] moduleList = new Class[] {${a.moduleClass?`\n// highlight-start\n            ${a.moduleClass}.class\n            // highlight-end`:""}\n        };\n        final Map<String, ReactModuleInfo> reactModuleInfoMap = new HashMap<>();\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (Class<? extends NativeModule> moduleClass : moduleList) {\n            ReactModule reactModule = moduleClass.getAnnotation(ReactModule.class);\n\n            reactModuleInfoMap.put(\n                reactModule.name(),\n                new ReactModuleInfo(\n                    reactModule.name(),\n                    moduleClass.getName(),\n                    true,\n                    reactModule.needsEagerInit(),\n                    reactModule.hasConstants(),\n                    reactModule.isCxxModule(),\n                    TurboModule.class.isAssignableFrom(moduleClass)\n                )\n            );\n        }\n\n        return new ReactModuleInfoProvider() {\n            @Override\n            public Map<String, ReactModuleInfo> getReactModuleInfos() {\n                return reactModuleInfoMap;\n            }\n        };\n    }${a.viewManagerClass?`\n\n// highlight-start\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n        /**\n        * Here declare the list of exported native components\n        */\n        return Arrays.<ViewManager>asList(new ${a.viewManagerClass}());\n    }\n    // highlight-end`:""}\n}`:`package com.${a.namespace}\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ${a.packageClass} : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        ${a.moduleClass?`// highlight-start\n        return when (name) {\n            ${a.moduleClass}.NAME -> ${a.moduleClass}(reactContext)\n            else -> null\n        }\n        // highlight-end`:"return null"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(${a.moduleClass?`\n// highlight-start\n            ${a.moduleClass}::class.java\n            // highlight-end`:""}\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }${a.viewManagerClass?`\n\n// highlight-start\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(${a.viewManagerClass}())\n    }\n    // highlight-end`:""}\n}`),(0,i.kt)("div",null,a.moduleClass?(0,i.kt)("div",null,(0,i.kt)("p",null,"To export the module, as the first step, we need to return it from ",(0,i.kt)("code",null,"getModule")," method inside ",(0,i.kt)("code",null,a.packageClass),", if it's requested (the method takes name as a parameter and makes decision which module should be served)."),(0,i.kt)("p",null,"The second step is to implement ",(0,i.kt)("code",null,"getReactModuleInfoProvider")," method, where the module is injected to the info provider instance.")):a.viewManagerClass?(0,i.kt)("p",null,"Here the most important bit is ",(0,i.kt)("code",null,"createViewManagers")," method, which returns collection of view manager classes. Because our package exports only a single view, we register one-element list, with ",(0,i.kt)("code",null,a.viewManagerClass)," class."):null))}l.isMDXComponent=!0},6162:(e,n,a)=>{a.d(n,{ZP:()=>l});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const o={toc:[]},d="wrapper";function l(e){let{components:n,...a}=e;return(0,i.kt)(d,(0,t.Z)({},o,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Complete ",(0,i.kt)("code",null,a.filename)," file"),(0,i.kt)("div",null,(0,i.kt)(r.Z,{language:a.language,mdxType:"CodeBlock"},a.children))))}l.isMDXComponent=!0},6571:(e,n,a)=>{a.d(n,{ZP:()=>l});var t=a(7462),i=(a(7294),a(3905)),r=a(814);const o={toc:[]},d="wrapper";function l(e){let{components:n,...a}=e;return(0,i.kt)(d,(0,t.Z)({},o,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Old architecture view manager"),(0,i.kt)("div",null,"The implementation of old architecture view manager won't be visible in Android Studio when you have new architecture enabled. To handle that, you can open ",(0,i.kt)("code",null,a.filename)," at other text editor and paste following content:",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)(r.Z,{language:a.language,mdxType:"CodeBlock"},a.children))))}l.isMDXComponent=!0},5748:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>ie,contentTitle:()=>ae,default:()=>le,frontMatter:()=>ne,metadata:()=>te,toc:()=>re});var t=a(7462),i=(a(7294),a(3905)),r=a(4866),o=a(5162),d=a(6105);const l={toc:[{value:"Add native libraries as dependencies for the package",id:"add-native-libraries-as-dependencies-for-the-package",level:4}]},m="wrapper";function c(e){let{components:n,...a}=e;return(0,i.kt)(m,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"add-native-libraries-as-dependencies-for-the-package"},"Add native libraries as dependencies for the package"),(0,i.kt)("p",null,"When developing some Android native code, you often need to use some external package, whether it's from Jetpack, MaterialComponents or some 3rd party.\nUsually those libraries are integrated with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/userguide.html"},"Gradle"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For more information on how to add dependencies to Android project visit ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/build/dependencies"},"Android's dedicated docs"),".")),(0,i.kt)("p",null,"Each RN library that includes some Android native code is, in fact, integrated with Gradle and our native list will also need to depend on Jetpack libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.android.com/develop/ui/views/layout/cardview"},(0,i.kt)("inlineCode",{parentName:"a"},"CardView"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.android.com/develop/ui/views/layout/constraint-layout"},(0,i.kt)("inlineCode",{parentName:"a"},"ConstraintLayout"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.android.com/develop/ui/views/layout/recyclerview"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView")))),(0,i.kt)("p",null,"So let's not waste time and navigate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," in our package."),(0,i.kt)(r.Z,{groupId:"gradle",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"groovy",label:"Groovy script (build.gradle)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="android/build.gradle"',title:'"android/build.gradle"'},'buildscript {\n    // ...\n}\n\n// ...\n\nandroid {\n    // ...\n}\n\nrepositories {\n    // ...\n}\n\ndependencies {\n    // ...\n\n// highlight-start\n    // Add the dependency to the Jetpack libraries\n    implementation "androidx.cardview:cardview:1.0.0"\n    implementation "androidx.constraintlayout:constraintlayout:2.1.4"\n    implementation "androidx.recyclerview:recyclerview:1.2.1"\n// highlight-end\n}\n'))),(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin script (build.gradle.kts)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/build.gradle.kts"',title:'"android/build.gradle.kts"'},'buildscript {\n    // ...\n}\n\n// ...\n\nplugins {\n    // ...\n}\n\n// ...\n\nandroid {\n    // ...\n}\n\nrepositories {\n    // ...\n}\n\n// ...\n\ndependencies {\n    // ...\n\n// highlight-start\n    // Add the dependency to the Jetpack libraries\n    implementation("androidx.cardview:cardview:1.0.0")\n    implementation("androidx.constraintlayout:constraintlayout:2.1.4")\n    implementation("androidx.recyclerview:recyclerview:1.2.1")\n// highlight-end\n}\n')))),(0,i.kt)("p",null,"To add a dependency we need to write ",(0,i.kt)("inlineCode",{parentName:"p"},"implementation")," keyword and declare the package (and its version) we want to include.\nAfter that you can invoke Gradle Sync in the Android Studio."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In this guide, version 1.0.0 of CardView, 2.1.4 of ConstraintLayout and 1.2.1 of RecyclerView are used. In your case these versions may be different, you can visit ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/androidx/versions"},"Jetpack's releases page")," and check available versions.")))}c.isMDXComponent=!0;const g={toc:[{value:"<code>card_item.xml</code>",id:"card_itemxml",level:4}]},s="wrapper";function p(e){let{components:n,...a}=e;return(0,i.kt)(s,(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"card_itemxml"},(0,i.kt)("inlineCode",{parentName:"h4"},"card_item.xml")),(0,i.kt)("p",null,"Let's start by defining XML layouts for the list and its items. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"android/src/main/res/layout/card_item.xml")," file in Android Studio and paste following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/src/main/res/layout/card_item.xml"',title:'"android/src/main/res/layout/card_item.xml"'},'<?xml version="1.0" encoding="utf-8"?>\n<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:id="@+id/list_card"\n    android:layout_width="100dp"\n    android:layout_height="100dp"\n    android:layout_marginTop="10dp"\n    android:layout_marginLeft="10dp"\n    android:layout_marginRight="10dp"\n    app:cardBackgroundColor="#89CC65"\n    app:cardCornerRadius="10dp"\n    app:cardElevation="10dp">\n\n    <LinearLayout\n        android:orientation="vertical"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent">\n\n        <ImageView\n            android:id="@+id/list_card_image"\n            android:layout_width="match_parent"\n            android:layout_height="70dp" />\n\n        <TextView\n            android:id="@+id/list_card_label"\n            android:textSize="10sp"\n            android:gravity="center"\n            android:textAlignment="center"\n            android:layout_width="match_parent"\n            android:layout_height="20dp" />\n\n    </LinearLayout>\n\n</androidx.cardview.widget.CardView>\n')),(0,i.kt)("p",null,"Here we are defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"CardView")," element that will hold an image and text views.\nEach of these will have ",(0,i.kt)("inlineCode",{parentName:"p"},"android:id")," attribute assigned - in the code, we will be able to interact with these elements by their ids.\n",(0,i.kt)("strong",{parentName:"p"},"To simplify the example"),", the card items will have a fixed size 100x100."),(0,i.kt)("p",null,"Next, let's declare the layout for the list element."))}p.isMDXComponent=!0;const u={toc:[{value:"<code>fragment_list.xml</code>",id:"fragment_listxml",level:4}]},w="wrapper";function v(e){let{components:n,...a}=e;return(0,i.kt)(w,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"fragment_listxml"},(0,i.kt)("inlineCode",{parentName:"h4"},"fragment_list.xml")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"android/src/main/res/layout/fragment_list.xml")," file in Android Studio and paste the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/src/main/res/layout/fragment_list.xml"',title:'"android/src/main/res/layout/fragment_list.xml"'},'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/list"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n')),(0,i.kt)("p",null,"Here we're wrapping ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," (the native list element) inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConstraintLayout")," and make it fill parent's size.\nAs in the card item layout, we declare ",(0,i.kt)("inlineCode",{parentName:"p"},"android:id")," attribute, to reference the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," later inside the code."))}v.isMDXComponent=!0;const f={toc:[{value:"<code>DataItem.java</code>",id:"dataitemjava",level:4}]},h="wrapper";function k(e){let{components:n,...a}=e;return(0,i.kt)(h,(0,t.Z)({},f,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"dataitemjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"DataItem.java")),(0,i.kt)("p",null,"After defining the layouts, let's jump to code and start by defining Java class ",(0,i.kt)("inlineCode",{parentName:"p"},"DataItem")," which will be used to hold items passed from JS code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/nativelistpackage/DataItem.java"',title:'"android/src/main/java/com/nativelistpackage/DataItem.java"'},"package com.nativelistpackage;\n\npublic class DataItem {\n    public String imageUrl;\n    public String description;\n\n    public DataItem(String imageUrl, String description) {\n        this.imageUrl = imageUrl;\n        this.description = description;\n    }\n}\n")))}k.isMDXComponent=!0;const V={toc:[{value:"<code>NativeListAdapter.java</code>",id:"nativelistadapterjava",level:4}]},b="wrapper";function C(e){let{components:n,...a}=e;return(0,i.kt)(b,(0,t.Z)({},V,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"nativelistadapterjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"NativeListAdapter.java")),(0,i.kt)("p",null,"With view holder ready, let's use it inside ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.Adapter"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.Adapter"))," custom class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/nativelistpackage/NativeListAdapter.java"',title:'"android/src/main/java/com/nativelistpackage/NativeListAdapter.java"'},'package com.nativelistpackage;\n\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.graphics.drawable.Drawable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport androidx.core.content.res.ResourcesCompat;\nimport androidx.recyclerview.widget.RecyclerView;\nimport java.lang.reflect.Field;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class NativeListAdapter extends RecyclerView.Adapter<NativeListViewHolder> {\n    public List<DataItem> data = Collections.emptyList();\n    public String placeholderImage = "";\n    private final Context context;\n\n    public NativeListAdapter(Context context) {\n        super();\n        this.context = context;\n    }\n\n    @Override\n    public NativeListViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.card_item, parent, false);\n        return new NativeListViewHolder(itemView); \n    }\n\n    @Override\n    public void onBindViewHolder(NativeListViewHolder holder, int position) {\n        Drawable drawable = ResourcesCompat.getDrawable(\n            context.getResources(),\n            getDrawableIdWithName(placeholderImage),\n            null\n        );\n        holder.imageView.setImageDrawable(drawable);\n        holder.label.setText(data.get(position).description);\n    }\n\n    @Override\n    public int getItemCount() {\n        return data.size();\n    }\n\n    private int getDrawableIdWithName(String name) {\n        Resources appResources = context.getResources();\n        int resourceId = appResources.getIdentifier(name, "drawable", context.getPackageName());\n        if (resourceId == 0) {\n            // If drawable is not present in app\'s resources, check system\'s resources\n            resourceId = getResId(name, android.R.drawable.class);\n        }\n        return resourceId;\n    }\n\n    private int getResId(String resName, Class c) {\n        try {\n            Field idField = c.getDeclaredField(resName);\n            return idField.getInt(idField);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Inside the custom adapter class we have to override 3 methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onCreateViewHolder")," - it creates the view for the item and wraps it in the instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"RecyclerView.ViewHolder")," class (in this case ",(0,i.kt)("inlineCode",{parentName:"li"},"NativeListViewHolder"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onBindViewHolder")," - it binds the data for specific item to dedicated view holder instance (in this case the description text and the name of the system image to the drawable displayed in the image view)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getItemCount")," - it returns the size of the list (in this case size of ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," property, which represents the JS prop value)")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"For learning purposes"),", we only use system images/icons for the image view.\nAfter completing this guide, you can work on enhancing the experience by using remote images with e.g. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bumptech/glide"},"Glide library"),".")))}C.isMDXComponent=!0;const M={toc:[{value:"<code>AndroidNativeListViewFragment.java</code>",id:"androidnativelistviewfragmentjava",level:4}]},N="wrapper";function y(e){let{components:n,...a}=e;return(0,i.kt)(N,(0,t.Z)({},M,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"androidnativelistviewfragmentjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"AndroidNativeListViewFragment.java")),(0,i.kt)("p",null,"Let's make all ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," setup in the custom ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/fragment/app/Fragment.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Fragment"))," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/nativelistpackage/AndroidNativeListViewFragment.java"',title:'"android/src/main/java/com/nativelistpackage/AndroidNativeListViewFragment.java"'},'package com.nativelistpackage;\n\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AndroidNativeListViewFragment extends Fragment {\n    public static final String NAME = "AndroidNativeListView";\n    private static final int NUM_OF_COLUMNS = 3;\n\n    @Override\n    public View onCreateView(\n        LayoutInflater inflater,\n        ViewGroup container,\n        Bundle savedInstanceState\n    ) {\n        return inflater.inflate(R.layout.fragment_list, container, false);\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        RecyclerView recyclerView = view.findViewById(R.id.list);\n        recyclerView.setLayoutManager(new GridLayoutManager(\n                requireContext(),\n                NUM_OF_COLUMNS,\n                GridLayoutManager.VERTICAL,\n                false\n        ));\n        recyclerView.setAdapter(new NativeListAdapter(requireContext()));\n    }\n\n    public void setBackgroundColor(@Nullable Integer backgroundColor) {\n        Integer color = backgroundColor;\n        if (color == null) {\n            color = Color.TRANSPARENT;\n        }\n        requireView().setBackgroundColor(color);\n    }\n\n    public void setData(ReadableArray data) {\n        List<DataItem> listData = new ArrayList<>();\n        for (int i = 0; i < data.size(); i++) {\n            ReadableMap item = data.getMap(i);\n            DataItem dataItem = new DataItem(item.getString("imageUrl"), item.getString("description"));\n            listData.add(dataItem);\n        }\n        RecyclerView recyclerView = requireView().findViewById(R.id.list);\n        ((NativeListAdapter)recyclerView.getAdapter()).data = listData;\n    }\n\n    public void setOptions(ReadableMap options) {\n        String placeholderImage = options.getString("placeholderImage");\n        RecyclerView recyclerView = requireView().findViewById(R.id.list);\n        ((NativeListAdapter)recyclerView.getAdapter()).placeholderImage = placeholderImage;\n    }\n\n    public void scrollToItem(int index) {\n        RecyclerView recyclerView = requireView().findViewById(R.id.list);\n        recyclerView.smoothScrollToPosition(index);\n    }\n}\n')),(0,i.kt)("p",null,"To connect the XML layout we created before, we need to override ",(0,i.kt)("inlineCode",{parentName:"p"},"onCreateView")," method.\nThat method returns the root view of the fragment, which in our case is inflated XML layout with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("p",null,"In order to set the properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),", we need to override ",(0,i.kt)("inlineCode",{parentName:"p"},"onViewCreated")," method.\nIt provides the instance of fragment's root view, that we can use to find the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," and attach the adapter class created before.\nAdditionally we need to specify the type of ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.LayoutManager"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.LayoutManager"))," used by the list - in our case we want to have vertical list with multiple columns and we can achieve it with ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/recyclerview/widget/GridLayoutManager"},(0,i.kt)("inlineCode",{parentName:"a"},"GridLayoutManager"))," (",(0,i.kt)("strong",{parentName:"p"},"to simplify the example"),", we will set 3 columns - after finishing the guide if you want, you can think how to make it dynamic and controlled from JS code)."),(0,i.kt)("p",null,"To handle props and scroll command, we also need to declare additional methods that interact with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("p",null,"With the fragment ready, let's finish by connecting it to the RN's views hierarchy."))}y.isMDXComponent=!0;const F={toc:[{value:"<code>NativeListViewHolder.java</code>",id:"nativelistviewholderjava",level:4}]},x="wrapper";function A(e){let{components:n,...a}=e;return(0,i.kt)(x,(0,t.Z)({},F,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"nativelistviewholderjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"NativeListViewHolder.java")),(0,i.kt)("p",null,"Now, we need to define the view holder class that will be used by ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," to keep reference to the UI elements inside single list item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/nativelistpackage/NativeListViewHolder.java"',title:'"android/src/main/java/com/nativelistpackage/NativeListViewHolder.java"'},"package com.nativelistpackage;\n\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport androidx.recyclerview.widget.RecyclerView;\n\npublic class NativeListViewHolder extends RecyclerView.ViewHolder {\n    public ImageView imageView;\n    public TextView label;\n\n    public NativeListViewHolder(View itemView) {\n        super(itemView);\n        this.imageView = itemView.findViewById(R.id.list_card_image);\n        this.label = itemView.findViewById(R.id.list_card_label);\n    }\n}\n")),(0,i.kt)("p",null,"Each class needs to extend base ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.ViewHolder"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.ViewHolder"))," class.\nAdditionally we declare properties for image and text views, to make it easier later to interact with them."))}A.isMDXComponent=!0;var L=a(6162),I=a(6571);const R={toc:[{value:"<code>AndroidNativeListViewManager.java</code>",id:"androidnativelistviewmanagerjava",level:4}]},T="wrapper";function D(e){let{components:n,...a}=e;return(0,i.kt)(T,(0,t.Z)({},R,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"androidnativelistviewmanagerjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"AndroidNativeListViewManager.java")),(0,i.kt)("p",null,"The view manager class will connect the custom fragment with our RN app. However, RN does not support Android fragments out-of-the-box.\nTo embed a fragment inside a view, we will use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/fragment/app/FragmentContainerView"},"FragmentContainerView")," - let's start by creating the boilerplate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"'},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentContainerView;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n  \n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        //\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        //\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        //\n    }\n}\n')),(0,i.kt)("p",null,"We start by creating view manager class that extends ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleViewManager")," base class and implements code-generated interface.\nThe class needs to override required methods (",(0,i.kt)("inlineCode",{parentName:"p"},"getName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"getDelegate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"receiveCommand")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance"),") as well as prop & command handlers declared in code-generated interface."),(0,i.kt)("p",null,"You can take a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance")," method - it returns already mentioned ",(0,i.kt)("inlineCode",{parentName:"p"},"FragmentContainerView"),". This is specialized kind of Android UI element, that is able to encapsulate custom fragment layout and handle its lifecycle."),(0,i.kt)("p",null,"Now, let's define a few helper functions that will be needed when adding/removing fragment layout:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"'},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\n// highlight-start\nimport androidx.fragment.app.FragmentActivity;\n// highlight-end\nimport androidx.fragment.app.FragmentContainerView;\n// highlight-start\nimport androidx.fragment.app.FragmentManager;\n// highlight-end\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n\n// highlight-start\n    private int mHeight = 0;\n    private int mWidth = 0;\n// highlight-end\n\n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        //\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        //\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        //\n    }\n\n// highlight-start\n    private void layoutChildren(View view) {\n        final int width = mWidth;\n        final int height = mHeight;\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        );\n        view.layout(0, 0, width, height);\n    }\n\n    private AndroidNativeListViewFragment findFragment(FragmentManager fragmentManager, View view) {\n        return (AndroidNativeListViewFragment)fragmentManager.findFragmentByTag(getFragmentTag(view));\n    }\n\n    @Nullable\n    private FragmentManager getFragmentManager(View view) {\n        final ThemedReactContext reactContext = (ThemedReactContext) view.getContext();\n\n        if (reactContext == null) {\n            return null;\n        }\n\n        final FragmentActivity activity = (FragmentActivity) reactContext.getCurrentActivity();\n    \n        if (activity == null) {\n            return null;\n        }\n\n        return activity.getSupportFragmentManager();\n    }\n\n    private String getFragmentTag(View view) {\n        return "AndroidNativeListViewFragment-" + view.getId();\n    }\n// highlight-end\n}\n')),(0,i.kt)("p",null,"The first helper method will be used to measure and layout the ",(0,i.kt)("inlineCode",{parentName:"p"},"FragmentContainerView")," instance, based on the size declared inside JS code (via ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," prop).\nOther helpers are used to simplify getting the custom fragment instance, the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/fragment/app/FragmentManager"},"FragmentManager")," (used to perform operations with fragments) and the tag associated to custom fragment's instance."),(0,i.kt)("p",null,"Now let's add two functions responsible for fragment mounting and unmounting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"'},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.fragment.app.FragmentContainerView;\nimport androidx.fragment.app.FragmentManager;\n// highlight-start\nimport androidx.fragment.app.FragmentTransaction;\n// highlight-end\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\n// highlight-start\nimport com.facebook.react.bridge.UiThreadUtil;\n// highlight-end\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n\n    private int mHeight = 0;\n    private int mWidth = 0;\n\n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        //\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        //\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        //\n    }\n\n// highlight-start\n    private void mountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                view.post(() -> layoutChildren(view));\n                return;\n            }\n\n            final AndroidNativeListViewFragment newFragment = new AndroidNativeListViewFragment();\n            view.removeAllViews();\n            final FragmentTransaction transaction = fragmentManager.beginTransaction();\n            transaction.add(newFragment, getFragmentTag(view));\n            transaction.runOnCommit(() -> {\n                view.addView(newFragment.requireView());\n                layoutChildren(view);\n            });\n            transaction.commitNowAllowingStateLoss();\n        }\n    }\n\n    private void unmountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                final FragmentTransaction transaction = fragmentManager.beginTransaction();\n                transaction.remove(fragment);\n                transaction.commitNowAllowingStateLoss();\n            }\n        }\n    }\n// highlight-end\n\n    // ...\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mountFragment")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"unmountFragment")," functions will be run on the UI thread and will be responsible for adding/removing the fragment via fragment manager's transaction."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more, visit official guides about ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/fragments/fragmentmanager"},(0,i.kt)("inlineCode",{parentName:"a"},"FragmentManager"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/fragments/transactions"},"fragment transactions"))),(0,i.kt)("p",null,"Next let's synchronize those 2 functions with the lifecycle of our view manager class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"'},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.fragment.app.FragmentContainerView;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.UiThreadUtil;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n\n    private int mHeight = 0;\n    private int mWidth = 0;\n\n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n// highlight-start\n    @Override\n    public void onDropViewInstance(FragmentContainerView view) {\n        unmountFragment(view);\n\n        super.onDropViewInstance(view);\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, FragmentContainerView view) {\n        super.addEventEmitters(reactContext, view);\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view);\n    }\n// highlight-end\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        //\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        //\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        //\n    }\n\n    // ...\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventEmitters")," method is called after ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance")," with view already having its id set up.\nThis is the time when bridged view is created and the fragment layout should be injected."),(0,i.kt)("p",null,"On the other hand, when the view is about to be destroyed, we should use ",(0,i.kt)("inlineCode",{parentName:"p"},"onDropViewInstance")," method, to remove our fragment layout from the view hierarchy."),(0,i.kt)("p",null,"The last thing to do in the view manager class is to connect the prop & command handlers to the fragment instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.java"'},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.fragment.app.FragmentContainerView;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n// highlight-start\nimport com.facebook.react.bridge.Dynamic;\n// highlight-end\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.UiThreadUtil;\nimport com.facebook.react.module.annotations.ReactModule;\n// highlight-start\nimport com.facebook.react.uimanager.PixelUtil;\n// highlight-end\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n// highlight-start\nimport com.facebook.react.uimanager.annotations.ReactPropGroup;\n// highlight-end\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n\n    private int mHeight = 0;\n    private int mWidth = 0;\n\n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    public void onDropViewInstance(FragmentContainerView view) {\n        unmountFragment(view);\n\n        super.onDropViewInstance(view);\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, FragmentContainerView view) {\n        super.addEventEmitters(reactContext, view);\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view);\n    }\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        // highlight-start\n        if (data == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setData(data);\n            }\n        }\n        // highlight-end\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        // highlight-start\n        if (options == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setOptions(options);\n            }\n        }\n        // highlight-end\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        // highlight-start\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.scrollToItem(index);\n            }\n        }\n        // highlight-end\n    }\n\n// highlight-start\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    public void setBackgroundColor(FragmentContainerView view, @Nullable Integer backgroundColor) {\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setBackgroundColor(backgroundColor);\n            }\n        }\n    }\n\n    @ReactPropGroup(names = {"width", "height"}, customType = "Style")\n    public void setStyle(FragmentContainerView view, int index, Dynamic value) {\n        if (value == null) {\n            return;\n        }\n\n        if (index == 0) {\n            mWidth = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        if (index == 1) {\n            mHeight = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        view.post(() -> layoutChildren(view));\n    }\n// highlight-end\n\n    // ...\n}\n')),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," &  ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," props as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"scrollToItem")," command we just need to forward the input arguments to fragment instance's methods."),(0,i.kt)("p",null,"Additionally, we need to explicitly handle styles from ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," prop.\nIn case of ",(0,i.kt)("inlineCode",{parentName:"p"},"backgroundColor"),", we need to set it on the fragment instance (and not the FragmentContainerView).\nAnd for ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," values we need to trigger measuring & layout of the view (with our ",(0,i.kt)("inlineCode",{parentName:"p"},"layoutChildren")," helper)."),(0,i.kt)(L.ZP,{filename:"AndroidNativeListViewManager.java",language:"java",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.fragment.app.FragmentContainerView;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport com.facebook.react.bridge.Dynamic;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.UiThreadUtil;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.PixelUtil;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.annotations.ReactPropGroup;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate;\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> implements AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private final ViewManagerDelegate<FragmentContainerView> mDelegate = new AndroidNativeListViewManagerDelegate(this);\n\n    private int mHeight = 0;\n    private int mWidth = 0;\n  \n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public ViewManagerDelegate<FragmentContainerView> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        mDelegate.receiveCommand(root, commandId, args);\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    public void onDropViewInstance(FragmentContainerView view) {\n        unmountFragment(view);\n\n        super.onDropViewInstance(view);\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, FragmentContainerView view) {\n        super.addEventEmitters(reactContext, view);\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view);\n    }\n\n    @Override\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        if (data == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setData(data);\n            }\n        }\n    }\n\n    @Override\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        if (options == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setOptions(options);\n            }\n        }\n    }\n\n    @Override\n    public void scrollToItem(FragmentContainerView view, int index) {\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.scrollToItem(index);\n            }\n        }\n    }\n\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    public void setBackgroundColor(FragmentContainerView view, @Nullable Integer backgroundColor) {\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setBackgroundColor(backgroundColor);\n            }\n        }\n    }\n\n    @ReactPropGroup(names = {"width", "height"}, customType = "Style")\n    public void setStyle(FragmentContainerView view, int index, Dynamic value) {\n        if (value == null) {\n            return;\n        }\n\n        if (index == 0) {\n            mWidth = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        if (index == 1) {\n            mHeight = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        view.post(() -> layoutChildren(view));\n    }\n\n    private void mountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                view.post(() -> layoutChildren(view));\n                return;\n            }\n\n            final AndroidNativeListViewFragment newFragment = new AndroidNativeListViewFragment();\n            view.removeAllViews();\n            final FragmentTransaction transaction = fragmentManager.beginTransaction();\n            transaction.add(newFragment, getFragmentTag(view));\n            transaction.runOnCommit(() -> {\n                view.addView(newFragment.requireView());\n                layoutChildren(view);\n            });\n            transaction.commitNowAllowingStateLoss();\n        }\n    }\n\n    private void unmountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                final FragmentTransaction transaction = fragmentManager.beginTransaction();\n                transaction.remove(fragment);\n                transaction.commitNowAllowingStateLoss();\n            }\n        }\n    }\n\n    private void layoutChildren(View view) {\n        final int width = mWidth;\n        final int height = mHeight;\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        );\n        view.layout(0, 0, width, height);\n    }\n\n    private AndroidNativeListViewFragment findFragment(FragmentManager fragmentManager, View view) {\n        return (AndroidNativeListViewFragment)fragmentManager.findFragmentByTag(getFragmentTag(view));\n    }\n\n    @Nullable\n    private FragmentManager getFragmentManager(View view) {\n        final ThemedReactContext reactContext = (ThemedReactContext) view.getContext();\n\n        if (reactContext == null) {\n            return null;\n        }\n\n        final FragmentActivity activity = (FragmentActivity) reactContext.getCurrentActivity();\n    \n        if (activity == null) {\n            return null;\n        }\n\n        return activity.getSupportFragmentManager();\n    }\n\n    private String getFragmentTag(View view) {\n        return "AndroidNativeListViewFragment-" + view.getId();\n    }\n}\n'))),(0,i.kt)(I.ZP,{filename:"android/src/oldarch/java/com/nativelistpackage/AndroidNativeListViewManager.java",language:"java",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.nativelistpackage;\n\nimport android.view.View;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.fragment.app.FragmentContainerView;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport com.facebook.react.bridge.Dynamic;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.UiThreadUtil;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.PixelUtil;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.uimanager.annotations.ReactPropGroup;\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\npublic class AndroidNativeListViewManager extends SimpleViewManager<FragmentContainerView> {\n    private int mHeight = 0;\n    private int mWidth = 0;\n  \n    @Override\n    public String getName() {\n        return AndroidNativeListViewFragment.NAME;\n    }\n\n    @Override\n    public void receiveCommand(FragmentContainerView root, String commandId, @Nullable ReadableArray args) {\n        super.receiveCommand(root, commandId, args);\n\n        switch (commandId) {\n            case "scrollToItem":\n                final int index = args.getInt(0);\n                scrollToItem(root, index);\n                break;\n        }\n    }\n\n    @Override\n    public FragmentContainerView createViewInstance(ThemedReactContext reactContext) {\n        return new FragmentContainerView(reactContext);\n    }\n\n    @Override\n    public void onDropViewInstance(FragmentContainerView view) {\n        unmountFragment(view);\n\n        super.onDropViewInstance(view);\n    }\n\n    @Override\n    protected void addEventEmitters(ThemedReactContext reactContext, FragmentContainerView view) {\n        super.addEventEmitters(reactContext, view);\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view);\n    }\n\n    @ReactProp(name = "data")\n    public void setData(FragmentContainerView view, @Nullable ReadableArray data) {\n        if (data == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setData(data);\n            }\n        }\n    }\n\n    @ReactProp(name = "options")\n    public void setOptions(FragmentContainerView view, @Nullable ReadableMap options) {\n        if (options == null) {\n            return;\n        }\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setOptions(options);\n            }\n        }\n    }\n\n    private void scrollToItem(FragmentContainerView view, int index) {\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.scrollToItem(index);\n            }\n        }\n    }\n\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    public void setBackgroundColor(FragmentContainerView view, @Nullable Integer backgroundColor) {\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                fragment.setBackgroundColor(backgroundColor);\n            }\n        }\n    }\n\n    @ReactPropGroup(names = {"width", "height"}, customType = "Style")\n    public void setStyle(FragmentContainerView view, int index, Dynamic value) {\n        if (value == null) {\n            return;\n        }\n\n        if (index == 0) {\n            mWidth = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        if (index == 1) {\n            mHeight = (int)PixelUtil.toPixelFromDIP(value.asDouble());\n        }\n\n        view.post(() -> layoutChildren(view));\n    }\n\n    private void mountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                view.post(() -> layoutChildren(view));\n                return;\n            }\n\n            final AndroidNativeListViewFragment newFragment = new AndroidNativeListViewFragment();\n            view.removeAllViews();\n            final FragmentTransaction transaction = fragmentManager.beginTransaction();\n            transaction.add(newFragment, getFragmentTag(view));\n            transaction.runOnCommit(() -> {\n                view.addView(newFragment.requireView());\n                layoutChildren(view);\n            });\n            transaction.commitNowAllowingStateLoss();\n        }\n    }\n\n    private void unmountFragment(FragmentContainerView view) {\n        UiThreadUtil.assertOnUiThread();\n        final FragmentManager fragmentManager = getFragmentManager(view);\n\n        if (fragmentManager != null) {\n            final AndroidNativeListViewFragment fragment = findFragment(fragmentManager, view);\n\n            if (fragment != null) {\n                final FragmentTransaction transaction = fragmentManager.beginTransaction();\n                transaction.remove(fragment);\n                transaction.commitNowAllowingStateLoss();\n            }\n        }\n    }\n\n    private void layoutChildren(View view) {\n        final int width = mWidth;\n        final int height = mHeight;\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        );\n        view.layout(0, 0, width, height);\n    }\n\n    private AndroidNativeListViewFragment findFragment(FragmentManager fragmentManager, View view) {\n        return (AndroidNativeListViewFragment)fragmentManager.findFragmentByTag(getFragmentTag(view));\n    }\n\n    @Nullable\n    private FragmentManager getFragmentManager(View view) {\n        final ThemedReactContext reactContext = (ThemedReactContext) view.getContext();\n\n        if (reactContext == null) {\n            return null;\n        }\n\n        final FragmentActivity activity = (FragmentActivity) reactContext.getCurrentActivity();\n    \n        if (activity == null) {\n            return null;\n        }\n\n        return activity.getSupportFragmentManager();\n    }\n\n    private String getFragmentTag(View view) {\n        return "AndroidNativeListViewFragment-" + view.getId();\n    }\n}\n'))))}D.isMDXComponent=!0;const S={toc:[]},P="wrapper";function j(e){let{components:n,...a}=e;return(0,i.kt)(P,(0,t.Z)({},S,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(c,{mdxType:"AndroidAddLibraryInGradle"}),(0,i.kt)(p,{mdxType:"AndroidCardItemLayout"}),(0,i.kt)(v,{mdxType:"AndroidFragmentListLayout"}),(0,i.kt)(k,{mdxType:"AndroidJavaDataItem"}),(0,i.kt)(A,{mdxType:"AndroidJavaListViewHolder"}),(0,i.kt)(C,{mdxType:"AndroidJavaListAdapter"}),(0,i.kt)(y,{mdxType:"AndroidJavaListFragment"}),(0,i.kt)(D,{mdxType:"AndroidJavaViewManager"}),(0,i.kt)(d.ZP,{language:"java",namespace:"nativelistpackage",packageClass:"NativeListTurboPackage",viewManagerClass:"AndroidNativeListViewManager",mdxType:"AndroidTurboPackage"}))}j.isMDXComponent=!0;const O={toc:[{value:"<code>DataItem.kt</code>",id:"dataitemkt",level:4}]},E="wrapper";function U(e){let{components:n,...a}=e;return(0,i.kt)(E,(0,t.Z)({},O,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"dataitemkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"DataItem.kt")),(0,i.kt)("p",null,"After defining the layouts, let's jump to code and start by defining Kotlin data class ",(0,i.kt)("inlineCode",{parentName:"p"},"DataItem")," which will be used to hold items passed from JS code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/nativelistpackage/DataItem.kt"',title:'"android/src/main/java/com/nativelistpackage/DataItem.kt"'},"package com.nativelistpackage\n\ndata class DataItem(\n    val imageUrl: String,\n    val description: String,\n)\n")))}U.isMDXComponent=!0;const _={toc:[{value:"<code>NativeListAdapter.kt</code>",id:"nativelistadapterkt",level:4}]},H="wrapper";function X(e){let{components:n,...a}=e;return(0,i.kt)(H,(0,t.Z)({},_,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"nativelistadapterkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"NativeListAdapter.kt")),(0,i.kt)("p",null,"With view holder ready, let's use it inside ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView.Adapter"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.Adapter"))," custom class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/nativelistpackage/NativeListAdapter.kt"',title:'"android/src/main/java/com/nativelistpackage/NativeListAdapter.kt"'},'package com.nativelistpackage\n\nimport android.content.Context\nimport android.content.res.Resources\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.recyclerview.widget.RecyclerView\nimport java.lang.reflect.Field\n\nclass NativeListAdapter(private val context: Context): RecyclerView.Adapter<NativeListViewHolder>() {\n    var data: List<DataItem> = emptyList()\n    var placeholderImage: String = ""\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NativeListViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.card_item, parent, false)\n        return NativeListViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: NativeListViewHolder, position: Int) {\n        val drawable = ResourcesCompat.getDrawable(\n            context.resources,\n            getDrawableIdWithName(placeholderImage),\n            null\n        )\n        holder.imageView.setImageDrawable(drawable)\n        holder.label.text = data[position].description\n    }\n\n    override fun getItemCount(): Int {\n        return data.size\n    }\n\n    private fun getDrawableIdWithName(name: String): Int {\n        val appResources: Resources = context.resources\n        var resourceId = appResources.getIdentifier(name, "drawable", context.packageName)\n        if (resourceId == 0) {\n            // If drawable is not present in app\'s resources, check system\'s resources\n            resourceId = getResId(name, android.R.drawable::class.java)\n        }\n        return resourceId\n    }\n\n    private fun getResId(resName: String, c: Class<*>): Int {\n        return try {\n            val idField: Field = c.getDeclaredField(resName)\n            idField.getInt(idField)\n        } catch (e: Exception) {\n            e.printStackTrace()\n            0\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Inside the custom adapter class we have to override 3 methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onCreateViewHolder")," - it creates the view for the item and wraps it in the instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"RecyclerView.ViewHolder")," class (in this case ",(0,i.kt)("inlineCode",{parentName:"li"},"NativeListViewHolder"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onBindViewHolder")," - it binds the data for specific item to dedicated view holder instance (in this case the description text and the name of the system image to the drawable displayed in the image view)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getItemCount")," - it returns the size of the list (in this case size of ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," property, which represents the JS prop value)")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"For learning purposes"),", we only use system images/icons for the image view.\nAfter completing this guide, you can work on enhancing the experience by using remote images with e.g. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bumptech/glide"},"Glide library"),".")))}X.isMDXComponent=!0;const B={toc:[{value:"<code>AndroidNativeListViewFragment.kt</code>",id:"androidnativelistviewfragmentkt",level:4}]},Z="wrapper";function G(e){let{components:n,...a}=e;return(0,i.kt)(Z,(0,t.Z)({},B,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"androidnativelistviewfragmentkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"AndroidNativeListViewFragment.kt")),(0,i.kt)("p",null,"Let's make all ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," setup in the custom ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/fragment/app/Fragment"},(0,i.kt)("inlineCode",{parentName:"a"},"Fragment"))," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/nativelistpackage/AndroidNativeListViewFragment.kt"',title:'"android/src/main/java/com/nativelistpackage/AndroidNativeListViewFragment.kt"'},'package com.nativelistpackage\n\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\n\nclass AndroidNativeListViewFragment: Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        return inflater.inflate(R.layout.fragment_list, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        val recyclerView: RecyclerView = view.findViewById(R.id.list)\n        recyclerView.layoutManager = GridLayoutManager(\n            requireContext(),\n            NUM_OF_COLUMNS,\n            GridLayoutManager.VERTICAL,\n            false\n        )\n        recyclerView.adapter = NativeListAdapter(requireContext())\n    }\n\n    fun setBackgroundColor(backgroundColor: Int?) {\n        requireView().setBackgroundColor(backgroundColor ?: Color.TRANSPARENT)\n    }\n\n    fun setData(data: ReadableArray) {\n        val listData = mutableListOf<DataItem>()\n        for (i in 0 until data.size()) {\n            val item = data.getMap(i)\n            listData.add(DataItem(item.getString("imageUrl")!!, item.getString("description")!!))\n        }\n        val recyclerView: RecyclerView = requireView().findViewById(R.id.list)\n        (recyclerView.adapter as NativeListAdapter).data = listData\n        (recyclerView.adapter as NativeListAdapter).notifyDataSetChanged()\n    }\n\n    fun setOptions(options: ReadableMap) {\n        val placeholderImage = options.getString("placeholderImage")!!\n        val recyclerView: RecyclerView = requireView().findViewById(R.id.list)\n        (recyclerView.adapter as NativeListAdapter).placeholderImage = placeholderImage\n    }\n\n    fun scrollToItem(index: Int) {\n        val recyclerView: RecyclerView = requireView().findViewById(R.id.list)\n        recyclerView.smoothScrollToPosition(index)\n    }\n\n    companion object {\n        const val NAME = "AndroidNativeListView"\n        private const val NUM_OF_COLUMNS = 3\n    }\n}\n')),(0,i.kt)("p",null,"To connect the XML layout we created before, we need to override ",(0,i.kt)("inlineCode",{parentName:"p"},"onCreateView")," method.\nThat method returns the root view of the fragment, which in our case is inflated XML layout with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("p",null,"In order to set the properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),", we need to override ",(0,i.kt)("inlineCode",{parentName:"p"},"onViewCreated")," method.\nIt provides the instance of fragment's root view, that we can use to find the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," and attach the adapter class created before.\nAdditionally we need to specify the type of ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView.LayoutManager"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.LayoutManager"))," used by the list - in our case we want to have vertical list with multiple columns and we can achieve it with ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/GridLayoutManager"},(0,i.kt)("inlineCode",{parentName:"a"},"GridLayoutManager"))," (",(0,i.kt)("strong",{parentName:"p"},"to simplify the example"),", we will set 3 columns - after finishing the guide if you want, you can think how to make it dynamic and controlled from JS code)."),(0,i.kt)("p",null,"To handle props and scroll command, we also need to declare additional methods that interact with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("p",null,"With the fragment ready, let's finish by connecting it to the RN's views hierarchy."))}G.isMDXComponent=!0;const q={toc:[{value:"<code>NativeListViewHolder.kt</code>",id:"nativelistviewholderkt",level:4}]},W="wrapper";function $(e){let{components:n,...a}=e;return(0,i.kt)(W,(0,t.Z)({},q,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"nativelistviewholderkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"NativeListViewHolder.kt")),(0,i.kt)("p",null,"Now, we need to define the view holder class that will be used by ",(0,i.kt)("inlineCode",{parentName:"p"},"RecyclerView")," to keep reference to the UI elements inside single list item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/nativelistpackage/NativeListViewHolder.kt"',title:'"android/src/main/java/com/nativelistpackage/NativeListViewHolder.kt"'},"package com.nativelistpackage\n\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\n\nclass NativeListViewHolder(itemView: View): RecyclerView.ViewHolder(itemView) {\n    var imageView: ImageView\n    var label: TextView\n\n    init {\n        imageView = itemView.findViewById(R.id.list_card_image)\n        label = itemView.findViewById(R.id.list_card_label)\n    }\n}\n")),(0,i.kt)("p",null,"Each class needs to extend base ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView.ViewHolder"},(0,i.kt)("inlineCode",{parentName:"a"},"RecyclerView.ViewHolder"))," class.\nAdditionally we declare properties for image and text views, to make it easier later to interact with them."))}$.isMDXComponent=!0;const z={toc:[{value:"<code>AndroidNativeListViewManager.kt</code>",id:"androidnativelistviewmanagerkt",level:4}]},J="wrapper";function Y(e){let{components:n,...a}=e;return(0,i.kt)(J,(0,t.Z)({},z,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"androidnativelistviewmanagerkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"AndroidNativeListViewManager.kt")),(0,i.kt)("p",null,"The view manager class will connect the custom fragment with our RN app. However, RN does not support Android fragments out-of-the-box.\nTo embed a fragment inside a view, we will use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/fragment/app/FragmentContainerView"},"FragmentContainerView")," - let's start by creating the boilerplate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"'},'package com.nativelistpackage\n\nimport androidx.fragment.app.FragmentContainerView\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n  \n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        //\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        //\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n        //\n    }\n}\n')),(0,i.kt)("p",null,"We start by creating view manager class that extends ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleViewManager")," base class and implements code-generated interface.\nThe class needs to override required methods (",(0,i.kt)("inlineCode",{parentName:"p"},"getName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"getDelegate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"receiveCommand")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance"),") as well as prop & command handlers declared in code-generated interface."),(0,i.kt)("p",null,"You can take a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance")," method - it returns already mentioned ",(0,i.kt)("inlineCode",{parentName:"p"},"FragmentContainerView"),". This is specialized kind of Android UI element, that is able to encapsulate custom fragment layout and handle its lifecycle."),(0,i.kt)("p",null,"Now, let's define a few helper functions that will be needed when adding/removing fragment layout:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"'},'package com.nativelistpackage\n\n// highlight-start\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\n// highlight-end\nimport androidx.fragment.app.FragmentContainerView\n// highlight-start\nimport androidx.fragment.app.FragmentManager\n// highlight-end\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n\n// highlight-start\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n// highlight-end\n\n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        //\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        //\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n        //\n    }\n\n// highlight-start\n    private fun layoutChildren(view: View) {\n        val width = mWidth\n        val height = mHeight\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        )\n        view.layout(0, 0, width, height)\n    }\n\n    private fun findFragment(fragmentManager: FragmentManager, view: View): AndroidNativeListViewFragment? {\n        return fragmentManager.findFragmentByTag(getFragmentTag(view)) as? AndroidNativeListViewFragment\n    }\n\n    private fun getFragmentManager(view: View): FragmentManager? {\n        val reactContext = view.context as? ThemedReactContext ?: return null\n        val activity = reactContext.currentActivity as? FragmentActivity ?: return null\n\n        return activity.supportFragmentManager\n    }\n\n    private fun getFragmentTag(view: View) = "AndroidNativeListViewFragment-" + view.id\n// highlight-end\n}\n')),(0,i.kt)("p",null,"The first helper method will be used to measure and layout the ",(0,i.kt)("inlineCode",{parentName:"p"},"FragmentContainerView")," instance, based on the size declared inside JS code (via ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," prop).\nOther helpers are used to simplify getting the custom fragment instance, the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/fragment/app/FragmentManager"},"FragmentManager")," (used to perform operations with fragments) and the tag associated to custom fragment's instance."),(0,i.kt)("p",null,"Now let's add two functions responsible for fragment mounting and unmounting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"'},'package com.nativelistpackage\n\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentContainerView\nimport androidx.fragment.app.FragmentManager\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\n// highlight-start\nimport com.facebook.react.bridge.UiThreadUtil\n// highlight-end\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n\n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        //\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        //\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n        //\n    }\n\n// highlight-start\n    private fun mountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                view.post {\n                    layoutChildren(view)\n                }\n                return\n            }\n\n            val newFragment = AndroidNativeListViewFragment()\n            view.removeAllViews()\n            val transaction = fragmentManager.beginTransaction()\n            transaction.add(newFragment, getFragmentTag(view))\n            transaction.runOnCommit {\n                view.addView(newFragment.requireView())\n                layoutChildren(view)\n            }\n            transaction.commitNowAllowingStateLoss()\n        }\n    }\n\n    private fun unmountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                val transaction = fragmentManager.beginTransaction()\n                transaction.remove(fragment)\n                transaction.commitNowAllowingStateLoss()\n            }\n        }\n    }\n// highlight-end\n\n    // ...\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mountFragment")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"unmountFragment")," functions will be run on the UI thread and will be responsible for adding/removing the fragment via fragment manager's transaction."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more, visit official guides about ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/fragments/fragmentmanager"},(0,i.kt)("inlineCode",{parentName:"a"},"FragmentManager"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/guide/fragments/transactions"},"fragment transactions"))),(0,i.kt)("p",null,"Next let's synchronize those 2 functions with the lifecycle of our view manager class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"'},'package com.nativelistpackage\n\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentContainerView\nimport androidx.fragment.app.FragmentManager\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.bridge.UiThreadUtil\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n\n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n// highlight-start\n    override fun onDropViewInstance(view: FragmentContainerView) {\n        unmountFragment(view)\n\n        super.onDropViewInstance(view)\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: FragmentContainerView) {\n        super.addEventEmitters(reactContext, view)\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view)\n    }\n// highlight-end\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        //\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        //\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n        //\n    }\n\n    // ...\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventEmitters")," method is called after ",(0,i.kt)("inlineCode",{parentName:"p"},"createViewInstance")," with view already having its id set up.\nThis is the time when bridged view is created and the fragment layout should be injected."),(0,i.kt)("p",null,"On the other hand, when the view is about to be destroyed, we should use ",(0,i.kt)("inlineCode",{parentName:"p"},"onDropViewInstance")," method, to remove our fragment layout from the view hierarchy."),(0,i.kt)("p",null,"The last thing to do in the view manager class is to connect the prop & command handlers to the fragment instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"',title:'"android/src/newarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt"'},'package com.nativelistpackage\n\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentContainerView\nimport androidx.fragment.app.FragmentManager\n// highlight-start\nimport com.facebook.react.bridge.Dynamic\n// highlight-end\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.bridge.UiThreadUtil\nimport com.facebook.react.module.annotations.ReactModule\n// highlight-start\nimport com.facebook.react.uimanager.PixelUtil\n// highlight-end\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\n// highlight-start\nimport com.facebook.react.uimanager.annotations.ReactPropGroup\n// highlight-end\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n\n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    override fun onDropViewInstance(view: FragmentContainerView) {\n        unmountFragment(view)\n\n        super.onDropViewInstance(view)\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: FragmentContainerView) {\n        super.addEventEmitters(reactContext, view)\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view)\n    }\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n// highlight-start\n        if (data == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setData(data)\n        }\n// highlight-end\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n// highlight-start\n        if (options == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setOptions(options)\n        }\n// highlight-end\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n// highlight-start\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.scrollToItem(index)\n        }\n// highlight-end\n    }\n\n// highlight-start\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    fun setBackgroundColor(view: FragmentContainerView, backgroundColor: Int?) {\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setBackgroundColor(backgroundColor)\n        }\n    }\n\n    @ReactPropGroup(names = ["width", "height"], customType = "Style")\n    fun setStyle(view: FragmentContainerView, index: Int, value: Dynamic?) {\n        if (value == null) {\n            return\n        }\n\n        if (index == 0) {\n            mWidth = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        if (index == 1) {\n            mHeight = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        view.post {\n            layoutChildren(view)\n        }\n    }\n// highlight-end\n\n    // ...\n}\n')),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," &  ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," props as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"scrollToItem")," command we just need to forward the input arguments to fragment instance's methods."),(0,i.kt)("p",null,"Additionally, we need to explicitly handle styles from ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," prop.\nIn case of ",(0,i.kt)("inlineCode",{parentName:"p"},"backgroundColor"),", we need to set it on the fragment instance (and not the FragmentContainerView).\nAnd for ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," values we need to trigger measuring & layout of the view (with our ",(0,i.kt)("inlineCode",{parentName:"p"},"layoutChildren")," helper)."),(0,i.kt)(L.ZP,{filename:"AndroidNativeListViewManager.kt",language:"kotlin",mdxType:"CompleteFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.nativelistpackage\n\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentContainerView\nimport androidx.fragment.app.FragmentManager\nimport com.facebook.react.bridge.Dynamic\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.bridge.UiThreadUtil\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.PixelUtil\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.uimanager.annotations.ReactPropGroup\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerDelegate\nimport com.facebook.react.viewmanagers.AndroidNativeListViewManagerInterface\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>(), AndroidNativeListViewManagerInterface<FragmentContainerView> {\n    private val mDelegate: ViewManagerDelegate<FragmentContainerView> = AndroidNativeListViewManagerDelegate(this)\n\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n  \n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun getDelegate() = mDelegate\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        mDelegate.receiveCommand(root, commandId, args)\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    override fun onDropViewInstance(view: FragmentContainerView) {\n        unmountFragment(view)\n\n        super.onDropViewInstance(view)\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: FragmentContainerView) {\n        super.addEventEmitters(reactContext, view)\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view)\n    }\n\n    @ReactProp(name = "data")\n    override fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        if (data == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setData(data)\n        }\n    }\n\n    @ReactProp(name = "options")\n    override fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        if (options == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setOptions(options)\n        }\n    }\n\n    override fun scrollToItem(view: FragmentContainerView, index: Int) {\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.scrollToItem(index)\n        }\n    }\n\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    fun setBackgroundColor(view: FragmentContainerView, backgroundColor: Int?) {\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setBackgroundColor(backgroundColor)\n        }\n    }\n\n    @ReactPropGroup(names = ["width", "height"], customType = "Style")\n    fun setStyle(view: FragmentContainerView, index: Int, value: Dynamic?) {\n        if (value == null) {\n            return\n        }\n\n        if (index == 0) {\n            mWidth = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        if (index == 1) {\n            mHeight = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        view.post {\n            layoutChildren(view)\n        }\n    }\n\n    private fun mountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                view.post {\n                    layoutChildren(view)\n                }\n                return\n            }\n\n            val newFragment = AndroidNativeListViewFragment()\n            view.removeAllViews()\n            val transaction = fragmentManager.beginTransaction()\n            transaction.add(newFragment, getFragmentTag(view))\n            transaction.runOnCommit {\n                view.addView(newFragment.requireView())\n                layoutChildren(view)\n            }\n            transaction.commitNowAllowingStateLoss()\n        }\n    }\n\n    private fun unmountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                val transaction = fragmentManager.beginTransaction()\n                transaction.remove(fragment)\n                transaction.commitNowAllowingStateLoss()\n            }\n        }\n    }\n\n    private fun layoutChildren(view: View) {\n        val width = mWidth\n        val height = mHeight\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        )\n        view.layout(0, 0, width, height)\n    }\n\n    private fun findFragment(fragmentManager: FragmentManager, view: View): AndroidNativeListViewFragment? {\n        return fragmentManager.findFragmentByTag(getFragmentTag(view)) as? AndroidNativeListViewFragment\n    }\n\n    private fun getFragmentManager(view: View): FragmentManager? {\n        val reactContext = view.context as? ThemedReactContext ?: return null\n        val activity = reactContext.currentActivity as? FragmentActivity ?: return null\n\n        return activity.supportFragmentManager\n    }\n\n    private fun getFragmentTag(view: View) = "AndroidNativeListViewFragment-" + view.id\n}\n'))),(0,i.kt)(I.ZP,{filename:"android/src/oldarch/java/com/nativelistpackage/AndroidNativeListViewManager.kt",language:"kotlin",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.nativelistpackage\n\nimport android.view.View\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentContainerView\nimport androidx.fragment.app.FragmentManager\nimport com.facebook.react.bridge.Dynamic\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.bridge.UiThreadUtil\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.PixelUtil\nimport com.facebook.react.uimanager.SimpleViewManager\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.uimanager.annotations.ReactPropGroup\n\n@ReactModule(name = AndroidNativeListViewFragment.NAME)\nclass AndroidNativeListViewManager : SimpleViewManager<FragmentContainerView>() {\n    private var mHeight: Int = 0\n    private var mWidth: Int = 0\n  \n    override fun getName() = AndroidNativeListViewFragment.NAME\n\n    override fun receiveCommand(root: FragmentContainerView, commandId: String?, args: ReadableArray?) {\n        super.receiveCommand(root, commandId, args)\n\n        when (commandId) {\n            "scrollToItem" -> {\n                val index = args!!.getInt(0)\n                scrollToItem(root, index)\n            }\n        }\n    }\n\n    override fun createViewInstance(reactContext: ThemedReactContext): FragmentContainerView {\n        return FragmentContainerView(reactContext)\n    }\n\n    override fun onDropViewInstance(view: FragmentContainerView) {\n        unmountFragment(view)\n\n        super.onDropViewInstance(view)\n    }\n\n    override fun addEventEmitters(reactContext: ThemedReactContext, view: FragmentContainerView) {\n        super.addEventEmitters(reactContext, view)\n        // Mount fragment here, because here the view already has reactTag set as a view.id\n        mountFragment(view)\n    }\n\n    @ReactProp(name = "data")\n    fun setData(view: FragmentContainerView, data: ReadableArray?) {\n        if (data == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setData(data)\n        }\n    }\n\n    @ReactProp(name = "options")\n    fun setOptions(view: FragmentContainerView, options: ReadableMap?) {\n        if (options == null) {\n            return\n        }\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setOptions(options)\n        }\n    }\n\n    private fun scrollToItem(view: FragmentContainerView, index: Int) {\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.scrollToItem(index)\n        }\n    }\n\n    @ReactProp(name = "backgroundColor", customType = "Color")\n    fun setBackgroundColor(view: FragmentContainerView, backgroundColor: Int?) {\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            findFragment(fragmentManager, view)?.setBackgroundColor(backgroundColor)\n        }\n    }\n\n    @ReactPropGroup(names = ["width", "height"], customType = "Style")\n    fun setStyle(view: FragmentContainerView, index: Int, value: Dynamic?) {\n        if (value == null) {\n            return\n        }\n\n        if (index == 0) {\n            mWidth = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        if (index == 1) {\n            mHeight = PixelUtil.toPixelFromDIP(value.asDouble()).toInt()\n        }\n\n        view.post {\n            layoutChildren(view)\n        }\n    }\n\n    private fun mountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                view.post {\n                    layoutChildren(view)\n                }\n                return\n            }\n\n            val newFragment = AndroidNativeListViewFragment()\n            view.removeAllViews()\n            val transaction = fragmentManager.beginTransaction()\n            transaction.add(newFragment, getFragmentTag(view))\n            transaction.runOnCommit {\n                view.addView(newFragment.requireView())\n                layoutChildren(view)\n            }\n            transaction.commitNowAllowingStateLoss()\n        }\n    }\n\n    private fun unmountFragment(view: FragmentContainerView) {\n        UiThreadUtil.assertOnUiThread()\n        val fragmentManager = getFragmentManager(view)\n\n        if (fragmentManager != null) {\n            val fragment = findFragment(fragmentManager, view)\n\n            if (fragment != null) {\n                val transaction = fragmentManager.beginTransaction()\n                transaction.remove(fragment)\n                transaction.commitNowAllowingStateLoss()\n            }\n        }\n    }\n\n    private fun layoutChildren(view: View) {\n        val width = mWidth\n        val height = mHeight\n\n        view.measure(\n            View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),\n            View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n        )\n        view.layout(0, 0, width, height)\n    }\n\n    private fun findFragment(fragmentManager: FragmentManager, view: View): AndroidNativeListViewFragment? {\n        return fragmentManager.findFragmentByTag(getFragmentTag(view)) as? AndroidNativeListViewFragment\n    }\n\n    private fun getFragmentManager(view: View): FragmentManager? {\n        val reactContext = view.context as? ThemedReactContext ?: return null\n        val activity = reactContext.currentActivity as? FragmentActivity ?: return null\n\n        return activity.supportFragmentManager\n    }\n\n    private fun getFragmentTag(view: View) = "AndroidNativeListViewFragment-" + view.id\n}\n'))))}Y.isMDXComponent=!0;const K={toc:[]},Q="wrapper";function ee(e){let{components:n,...a}=e;return(0,i.kt)(Q,(0,t.Z)({},K,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(c,{mdxType:"AndroidAddLibraryInGradle"}),(0,i.kt)(p,{mdxType:"AndroidCardItemLayout"}),(0,i.kt)(v,{mdxType:"AndroidFragmentListLayout"}),(0,i.kt)(U,{mdxType:"AndroidKotlinDataItem"}),(0,i.kt)($,{mdxType:"AndroidKotlinListViewHolder"}),(0,i.kt)(X,{mdxType:"AndroidKotlinListAdapter"}),(0,i.kt)(G,{mdxType:"AndroidKotlinListFragment"}),(0,i.kt)(Y,{mdxType:"AndroidKotlinViewManager"}),(0,i.kt)(d.ZP,{language:"kotlin",namespace:"nativelistpackage",packageClass:"NativeListTurboPackage",viewManagerClass:"AndroidNativeListViewManager",mdxType:"AndroidTurboPackage"}))}ee.isMDXComponent=!0;const ne={sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},ae=void 0,te={unversionedId:"guides/native-list-view/android-impl",id:"guides/native-list-view/android-impl",title:"Android implementation",description:"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under /android path.",source:"@site/docs/guides/native-list-view/android-impl.mdx",sourceDirName:"guides/native-list-view",slug:"/guides/native-list-view/android-impl",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/android-impl",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/bridging-tutorial-website/docs/guides/native-list-view/android-impl.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},sidebar:"tutorialSidebar",previous:{title:"iOS implementation",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/ios-impl"},next:{title:"Usage in practice",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/usage"}},ie={},re=[],oe={toc:re},de="wrapper";function le(e){let{components:n,...a}=e;return(0,i.kt)(de,(0,t.Z)({},oe,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under ",(0,i.kt)("inlineCode",{parentName:"p"},"<your-project-dir>/android")," path.\nWhen the project is opened, find ",(0,i.kt)("inlineCode",{parentName:"p"},"native-list-package")," inside project-tree"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"native-list-package")," contains 3 packages with the same name ",(0,i.kt)("inlineCode",{parentName:"p"},"com.nativelistpackage"),". After expanding them, you'll notice that these contain following things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"code-generated Java spec files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AndroidNativeListViewManager")," view manager class stub files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AndroidNativeListFragment")," fragment class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DataItem")," class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NativeListAdapter")," class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NativeListViewHolder")," class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NativeListTurboPackage")," class stub file")),(0,i.kt)("p",null,"Additionally, if you search for the ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," resources folder, you'll see the layout directory inside, which contains two layout files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"card_item")," that will contain the layout for each list item"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fragment_list")," that will contain the ",(0,i.kt)("inlineCode",{parentName:"li"},"RecyclerView")," element")),(0,i.kt)("p",null,"Let's start implementing!"),(0,i.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)(ee,{mdxType:"AndroidKotlinImpl"})),(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(j,{mdxType:"AndroidJavaImpl"}))),(0,i.kt)("p",null,"You can check training repo for Kotlin implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/native-list-package"},"here")," and Java implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/native-list-package-classic"},"here"),"."),(0,i.kt)("p",null,"That's Android part, now let's wrap things up and ",(0,i.kt)("a",{parentName:"p",href:"./usage"},"see our list")," in action!"))}le.isMDXComponent=!0}}]);