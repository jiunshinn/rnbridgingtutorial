"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[6546],{5162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),i=t(6010);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o.tabItem,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>f});var a=t(7462),i=t(7294),o=t(6010),r=t(2466),c=t(6550),l=t(1980),d=t(7392),s=t(12);function p(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,c.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=u(e),[r,c]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[l,d]=g({queryString:t,groupId:a}),[p,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,s.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),w=(()=>{const e=l??p;return m({value:e,tabValues:o})?e:null})();(0,i.useLayoutEffect)((()=>{w&&c(w)}),[w]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),h(e)}),[d,h,o]),tabValues:o}}var w=t(2389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function C(e){let{className:n,block:t,selectedValue:c,selectValue:l,tabValues:d}=e;const s=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),u=e=>{const n=e.currentTarget,t=s.indexOf(n),a=d[t].value;a!==c&&(p(n),l(a))},m=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},d.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:c===n?0:-1,"aria-selected":c===n,key:n,ref:e=>s.push(e),onKeyDown:m,onClick:u},r,{className:(0,o.Z)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":c===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function b(e){const n=h(e);return i.createElement("div",{className:(0,o.Z)("tabs-container",v.tabList)},i.createElement(C,(0,a.Z)({},e,n)),i.createElement(k,(0,a.Z)({},e,n)))}function f(e){const n=(0,w.Z)();return i.createElement(b,(0,a.Z)({key:String(n)},e))}},6105:(e,n,t)=>{t.d(n,{ZP:()=>l});var a=t(7462),i=(t(7294),t(3905)),o=t(814);const r={toc:[]},c="wrapper";function l(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",null,(0,i.kt)("code",null,t.packageClass,".","java"===t.language?"java":"kt")),(0,i.kt)("p",null,"The last thing we need to do is to export ",(0,i.kt)("code",null,t.viewManagerClass?t.viewManagerClass:t.moduleClass)," in the ",(0,i.kt)("code",null,"TurboReactPackage")," instance. Let's go to ",(0,i.kt)("code",null,t.packageClass,".","java"===t.language?"java":"kt")," and add our new module."),(0,i.kt)(o.Z,{language:t.language,title:`android/src/main/java/com/${t.namespace}/${t.packageClass}.${"java"===t.language?"java":"kt"}`,mdxType:"CodeBlock"},"java"===t.language?`package com.${t.namespace};\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.TurboReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.module.model.ReactModuleInfo;\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule;\n${t.viewManagerClass?"// highlight-start\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.Arrays;\n// highlight-end":""}\nimport java.util.HashMap;${t.viewManagerClass?"\n// highlight-start\nimport java.util.List;\n// highlight-end":""}\nimport java.util.Map;\n\npublic class ${t.packageClass} extends TurboReactPackage {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    @Override\n    @Nullable\n    public NativeModule getModule(String name, ReactApplicationContext reactContext) {\n        ${t.moduleClass?`// highlight-start\n        if (name.equals(${t.moduleClass}.NAME)) {\n            return new ${t.moduleClass}(reactContext);\n        }\n        return null;\n// highlight-end`:"return null;"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    @Override\n    public ReactModuleInfoProvider getReactModuleInfoProvider() {\n        /**\n         * Here declare the array of exported modules\n         */\n        Class<? extends NativeModule>[] moduleList = new Class[] {${t.moduleClass?`\n// highlight-start\n            ${t.moduleClass}.class\n            // highlight-end`:""}\n        };\n        final Map<String, ReactModuleInfo> reactModuleInfoMap = new HashMap<>();\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (Class<? extends NativeModule> moduleClass : moduleList) {\n            ReactModule reactModule = moduleClass.getAnnotation(ReactModule.class);\n\n            reactModuleInfoMap.put(\n                reactModule.name(),\n                new ReactModuleInfo(\n                    reactModule.name(),\n                    moduleClass.getName(),\n                    true,\n                    reactModule.needsEagerInit(),\n                    reactModule.hasConstants(),\n                    reactModule.isCxxModule(),\n                    TurboModule.class.isAssignableFrom(moduleClass)\n                )\n            );\n        }\n\n        return new ReactModuleInfoProvider() {\n            @Override\n            public Map<String, ReactModuleInfo> getReactModuleInfos() {\n                return reactModuleInfoMap;\n            }\n        };\n    }${t.viewManagerClass?`\n\n// highlight-start\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n        /**\n        * Here declare the list of exported native components\n        */\n        return Arrays.<ViewManager>asList(new ${t.viewManagerClass}());\n    }\n    // highlight-end`:""}\n}`:`package com.${t.namespace}\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ${t.packageClass} : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        ${t.moduleClass?`// highlight-start\n        return when (name) {\n            ${t.moduleClass}.NAME -> ${t.moduleClass}(reactContext)\n            else -> null\n        }\n        // highlight-end`:"return null"}\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(${t.moduleClass?`\n// highlight-start\n            ${t.moduleClass}::class.java\n            // highlight-end`:""}\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }${t.viewManagerClass?`\n\n// highlight-start\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(${t.viewManagerClass}())\n    }\n    // highlight-end`:""}\n}`),(0,i.kt)("div",null,t.moduleClass?(0,i.kt)("div",null,(0,i.kt)("p",null,"To export the module, as the first step, we need to return it from ",(0,i.kt)("code",null,"getModule")," method inside ",(0,i.kt)("code",null,t.packageClass),", if it's requested (the method takes name as a parameter and makes decision which module should be served)."),(0,i.kt)("p",null,"The second step is to implement ",(0,i.kt)("code",null,"getReactModuleInfoProvider")," method, where the module is injected to the info provider instance.")):t.viewManagerClass?(0,i.kt)("p",null,"Here the most important bit is ",(0,i.kt)("code",null,"createViewManagers")," method, which returns collection of view manager classes. Because our package exports only a single view, we register one-element list, with ",(0,i.kt)("code",null,t.viewManagerClass)," class."):null))}l.isMDXComponent=!0},6571:(e,n,t)=>{t.d(n,{ZP:()=>l});var a=t(7462),i=(t(7294),t(3905)),o=t(814);const r={toc:[]},c="wrapper";function l(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Old architecture view manager"),(0,i.kt)("div",null,"The implementation of old architecture view manager won't be visible in Android Studio when you have new architecture enabled. To handle that, you can open ",(0,i.kt)("code",null,t.filename)," at other text editor and paste following content:",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)(o.Z,{language:t.language,mdxType:"CodeBlock"},t.children))))}l.isMDXComponent=!0},7937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>A,contentTitle:()=>x,default:()=>D,frontMatter:()=>y,metadata:()=>G,toc:()=>T});var a=t(7462),i=(t(7294),t(3905)),o=t(4866),r=t(5162),c=t(6105);const l={toc:[{value:"<code>ConicGradientView.java</code>",id:"conicgradientviewjava",level:4}]},d="wrapper";function s(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"conicgradientviewjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"ConicGradientView.java")),(0,i.kt)("p",null,"Let's start by declaring the custom view that will extend ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactViewGroup")," (the android class that backs ",(0,i.kt)("inlineCode",{parentName:"p"},"<View />")," implementation):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/conicgradientpackage/ConicGradientView.java"',title:'"android/src/newarch/java/com/conicgradientpackage/ConicGradientView.java"'},'package com.conicgradientpackage;\n\nimport android.graphics.*;\n\nimport com.facebook.react.bridge.ColorPropConverter;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.ReadableType;\nimport com.facebook.react.views.view.ReactViewGroup;\n\npublic class ConicGradientView extends ReactViewGroup {\n    private final ReactContext reactContext;\n\n    private int[] mColors = {Color.TRANSPARENT, Color.TRANSPARENT};\n    private float[] mLocations = {0f, 0f};\n    private Double mCenterPointX = 0.5;\n    private Double mCenterPointY = 0.5;\n\n    public static final String NAME = "ConicGradientView";\n    \n    public ConicGradientView(ReactContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n    }\n\n    public void setColors(ReadableArray colors) {\n        mColors = new int[colors.size()];\n        for (int i = 0; i < colors.size(); i++) {\n            if (colors.getType(i) == ReadableType.Map) {\n                mColors[i] = ColorPropConverter.getColor(colors.getMap(i), reactContext);\n            } else {\n                mColors[i] = colors.getInt(i);\n            }\n        }\n    }\n\n    public void setLocations(ReadableArray locations) {\n        mLocations = new float[locations.size()];\n        for (int i = 0; i < locations.size(); i++) {\n            mLocations[i] = (float)locations.getDouble(i);\n        }\n    }\n\n    public void setCenterPoint(ReadableMap centerPoint) {\n        mCenterPointX = 0.5;\n        mCenterPointY = 0.5;\n        if (centerPoint.hasKey("x") && !centerPoint.isNull("x")) {\n            mCenterPointX = centerPoint.getDouble("x");\n        }\n        if (centerPoint.hasKey("y") && !centerPoint.isNull("y")) {\n            mCenterPointY = centerPoint.getDouble("y");\n        }\n    }\n}\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"setColors"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setLocations"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setCenterPoint")," we save and parse the values received from props.\nAnd we create static ",(0,i.kt)("inlineCode",{parentName:"p"},"NAME")," with the name based on JS specification."),(0,i.kt)("p",null,"Looks good, but it doesn't do anything with gradient rendering - let's add it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/conicgradientpackage/ConicGradientView.java"',title:'"android/src/main/java/com/conicgradientpackage/ConicGradientView.java"'},'class ConicGradientView(private val reactContext: ReactContext) : ReactViewGroup(reactContext) {\n    private final ReactContext reactContext;\n\n// highlight-start\n    private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    private final Path mPath = new Path();\n    private final RectF mRect = new RectF();\n// highlight-end\n    private int[] mColors = {Color.TRANSPARENT, Color.TRANSPARENT};\n    private float[] mLocations = {0f, 0f};\n    private Double mCenterPointX = 0.5;\n    private Double mCenterPointY = 0.5;\n// highlight-start\n    private int mWidth = 0;\n    private int mHeight = 0;\n// highlight-end\n\n    public static final String NAME = "ConicGradientView";\n    \n    public ConicGradientView(ReactContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n// highlight-start\n \n        /**\n         * This will invoke internal `getOrCreateReactViewBackground` method\n         * to initialize ReactViewBackgroundDrawable for this view,\n         * if ReactViewBackgroundDrawable, then view will not draw the gradient\n         */\n        this.setBorderRadius(0f);\n// highlight-end\n    }\n\n    public void setColors(ReadableArray colors) {\n        mColors = new int[colors.size()];\n        for (int i = 0; i < colors.size(); i++) {\n            if (colors.getType(i) == ReadableType.Map) {\n                mColors[i] = ColorPropConverter.getColor(colors.getMap(i), reactContext);\n            } else {\n                mColors[i] = colors.getInt(i);\n            }\n        }\n// highlight-start\n        prepareGradient();\n// highlight-end\n    }\n\n    public void setLocations(ReadableArray locations) {\n        mLocations = new float[locations.size()];\n        for (int i = 0; i < locations.size(); i++) {\n            mLocations[i] = (float)locations.getDouble(i);\n        }\n// highlight-start\n        prepareGradient();\n// highlight-end\n    }\n\n    public void setCenterPoint(ReadableMap centerPoint) {\n        mCenterPointX = 0.5;\n        mCenterPointY = 0.5;\n        if (centerPoint.hasKey("x") && !centerPoint.isNull("x")) {\n            mCenterPointX = centerPoint.getDouble("x");\n        }\n        if (centerPoint.hasKey("y") && !centerPoint.isNull("y")) {\n            mCenterPointY = centerPoint.getDouble("y");\n        }\n// highlight-start\n        prepareGradient();\n// highlight-end\n    }\n\n// highlight-start\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        mWidth = w;\n        mHeight = h;\n        preparePath();\n        prepareGradient();\n    }\n\n    @Override\n    protected void dispatchDraw(Canvas canvas) {\n        if (canvas != null) {\n            canvas.drawPath(mPath, mPaint);\n        }\n        super.dispatchDraw(canvas);\n    }\n\n    private void preparePath() {\n        mPath.reset();\n        mRect.set(\n                0f,\n                0f,\n                (float) mWidth,\n                (float) mHeight\n        );\n        mPath.addRect(mRect, Path.Direction.CW);\n    }\n\n    private void prepareGradient() {\n        if (mColors.length != mLocations.length) {\n            return;\n        }\n        mPaint.setShader(new SweepGradient(\n                (float) (mCenterPointX * mWidth),\n                (float) (mCenterPointY * mHeight),\n                mColors,\n                mLocations\n        ));\n        invalidate();\n    }\n// highlight-end\n}\n')),(0,i.kt)("p",null,"Displaying the gradient is just a bit more difficult than on iOS - first we need to grab the width and height of the view,\nwe can do it thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/view/View#onSizeChanged(int,%20int,%20int,%20int)"},(0,i.kt)("inlineCode",{parentName:"a"},"View#onSizeChanged"))," method."),(0,i.kt)("p",null,"After that we create helper private methods (",(0,i.kt)("inlineCode",{parentName:"p"},"preparePath"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"prepareGradient"),') that prepare the path and shader for our gradient background.\nWhenever each "input" value changes we are recomputing the gradient and invalidating the view (telling it that it needs to be redrawn).'),(0,i.kt)("p",null,"The actual gradient drawing takes place in ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/view/View#dispatchDraw(android.graphics.Canvas)"},(0,i.kt)("inlineCode",{parentName:"a"},"View#dispatchDraw"))," method.\nIt provides canvas argument that we can use to draw the background."),(0,i.kt)("p",null,"You may have noticed, that we also have the ",(0,i.kt)("inlineCode",{parentName:"p"},"setBorderRadius")," invoked in constructor.\nIt's a workaround for ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactViewGroup")," based classes. Without it, the gradient wouldn't be displayed at all, if you wouldn't set some color/border props on the JS side."))}s.isMDXComponent=!0;var p=t(6571);const u={toc:[{value:"<code>ConicGradientViewManager.java</code>",id:"conicgradientviewmanagerjava",level:4}]},m="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"conicgradientviewmanagerjava"},(0,i.kt)("inlineCode",{parentName:"h4"},"ConicGradientViewManager.java")),(0,i.kt)("p",null,"Paste the following code in ",(0,i.kt)("inlineCode",{parentName:"p"},"android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.java")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.java"',title:'"android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.java"'},'package com.conicgradientpackage;\n\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.ConicGradientViewManagerDelegate;\nimport com.facebook.react.viewmanagers.ConicGradientViewManagerInterface;\nimport com.facebook.react.views.view.ReactViewGroup;\nimport com.facebook.react.views.view.ReactViewManager;\n\n@ReactModule(name = ConicGradientView.NAME)\npublic class ConicGradientViewManager extends ReactViewManager implements ConicGradientViewManagerInterface<ReactViewGroup> {\n    private final ConicGradientViewManagerDelegate mDelegate = new ConicGradientViewManagerDelegate(this);\n    \n    @Override\n    public String getName() {\n        return ConicGradientView.NAME;\n    }\n\n    @Override\n    protected ViewManagerDelegate<ReactViewGroup> getDelegate() {\n        return mDelegate;\n    }\n\n    @Override\n    public ConicGradientView createViewInstance(ThemedReactContext reactContext) {\n        return new ConicGradientView(reactContext);\n    }\n\n    @Override\n    @ReactProp(name = "colors")\n    public void setColors(ReactViewGroup view, @Nullable ReadableArray colors) {\n        if (!(view instanceof ConicGradientView)) {\n            throw new IllegalStateException("Check failed.");\n        }\n        ConicGradientView typedView = (ConicGradientView)view;\n        if (colors == null) {\n            return;\n        }\n        typedView.setColors(colors);\n    }\n\n    @Override\n    @ReactProp(name = "locations")\n    public void setLocations(ReactViewGroup view, @Nullable ReadableArray locations) {\n        if (!(view instanceof ConicGradientView)) {\n            throw new IllegalStateException("Check failed.");\n        }\n        ConicGradientView typedView = (ConicGradientView)view;\n        if (locations == null) {\n            return;\n        }\n        typedView.setLocations(locations);\n    }\n\n    @Override\n    @ReactProp(name = "centerPoint")\n    public void setCenterPoint(ReactViewGroup view, @Nullable ReadableMap centerPoint) {\n        if (!(view instanceof ConicGradientView)) {\n            throw new IllegalStateException("Check failed.");\n        }\n        ConicGradientView typedView = (ConicGradientView)view;\n        if (centerPoint == null) {\n            return;\n        }\n        typedView.setCenterPoint(centerPoint);\n    }\n}\n')),(0,i.kt)("p",null,"Let's see what's happening here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we declare the view manager class that extends ",(0,i.kt)("inlineCode",{parentName:"li"},"ReactViewManager")," and implement code-generated spec interface"),(0,i.kt)("li",{parentName:"ul"},"we override required methods: ",(0,i.kt)("inlineCode",{parentName:"li"},"getName"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"getDelegate")," & ",(0,i.kt)("inlineCode",{parentName:"li"},"createViewInstance")),(0,i.kt)("li",{parentName:"ul"},"we override props setters based on JS spec")),(0,i.kt)(p.ZP,{filename:"android/src/oldarch/java/com/conicgradientpackage/ConicGradientViewManager.java",language:"java",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.conicgradientpackage;\n\nimport androidx.annotation.Nullable;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.views.view.ReactViewManager;\n\n@ReactModule(name = ConicGradientView.NAME)\npublic class ConicGradientViewManager extends ReactViewManager {\n    @Override\n    public String getName() {\n        return ConicGradientView.NAME;\n    }\n\n    @Override\n    public ConicGradientView createViewInstance(ThemedReactContext reactContext) {\n        return new ConicGradientView(reactContext);\n    }\n\n    @ReactProp(name = "colors")\n    public void setColors(ConicGradientView view, @Nullable ReadableArray colors) {\n        if (colors == null) {\n            return;\n        }\n        view.setColors(colors);\n    }\n\n    @ReactProp(name = "locations")\n    public void setLocations(ConicGradientView view, @Nullable ReadableArray locations) {\n        if (locations == null) {\n            return;\n        }\n        view.setLocations(locations);\n    }\n\n    @ReactProp(name = "centerPoint")\n    public void setCenterPoint(ConicGradientView view, @Nullable ReadableMap centerPoint) {\n        if (centerPoint == null) {\n            return;\n        }\n        view.setCenterPoint(centerPoint);\n    }\n}\n'))),(0,i.kt)("p",null,"Let's finalize it by exporting the view manager in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboReactPackage")," instance."))}g.isMDXComponent=!0;const h={toc:[]},w="wrapper";function v(e){let{components:n,...t}=e;return(0,i.kt)(w,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(s,{mdxType:"AndroidJavaView"}),(0,i.kt)(g,{mdxType:"AndroidJavaViewManager"}),(0,i.kt)(c.ZP,{language:"java",namespace:"conicgradientpackage",packageClass:"ConicGradientTurboPackage",viewManagerClass:"ConicGradientViewManager",mdxType:"AndroidTurboPackage"}))}v.isMDXComponent=!0;const C={toc:[{value:"<code>ConicGradientView.kt</code>",id:"conicgradientviewkt",level:4}]},k="wrapper";function b(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,a.Z)({},C,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"conicgradientviewkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"ConicGradientView.kt")),(0,i.kt)("p",null,"Let's start by declaring the custom view that will extend ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactViewGroup")," (the android class that backs ",(0,i.kt)("inlineCode",{parentName:"p"},"<View />")," implementation):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/conicgradientpackage/ConicGradientView.kt"',title:'"android/src/newarch/java/com/conicgradientpackage/ConicGradientView.kt"'},'package com.conicgradientpackage\n\nimport android.graphics.*\nimport com.facebook.react.bridge.ColorPropConverter\nimport com.facebook.react.bridge.ReactContext\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.bridge.ReadableType\nimport com.facebook.react.views.view.ReactViewGroup\n\nclass ConicGradientView(private val reactContext: ReactContext) : ReactViewGroup(reactContext) {\n    private var mColors = mutableListOf(Color.RED, Color.YELLOW)\n    private var mLocations = mutableListOf(0f, 1f)\n    private var mCenterPointX = 0.5\n    private var mCenterPointY = 0.5\n\n    fun setColors(colors: ReadableArray) {\n        mColors.clear()\n        for (i in 0 until colors.size()) {\n            if (colors.getType(i) == ReadableType.Map) {\n                mColors.add(i, ColorPropConverter.getColor(colors.getMap(i), reactContext))\n            } else {\n                mColors.add(i, colors.getInt(i))\n            }\n        }\n    }\n\n    fun setLocations(locations: ReadableArray) {\n        mLocations.clear()\n        for (i in 0 until locations.size()) {\n            mLocations.add(i, locations.getDouble(i).toFloat())\n        }\n    }\n\n    fun setCenterPoint(centerPoint: ReadableMap) {\n        mCenterPointX = if (centerPoint.hasKey("x") && !centerPoint.isNull("x")) {\n            centerPoint.getDouble("x")\n        } else {\n            0.5\n        }\n        mCenterPointY = if (centerPoint.hasKey("y") && !centerPoint.isNull("y")) {\n            centerPoint.getDouble("y")\n        } else {\n            0.5\n        }\n    }\n\n    companion object {\n        const val NAME = "ConicGradientView"\n    }\n}\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"setColors"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setLocations"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setCenterPoint")," we save and parse the values received from props.\nAnd we create static ",(0,i.kt)("inlineCode",{parentName:"p"},"NAME")," with the name based on JS specification."),(0,i.kt)("p",null,"Looks good, but it doesn't do anything with gradient rendering - let's add it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/conicgradientpackage/ConicGradientView.kt"',title:'"android/src/main/java/com/conicgradientpackage/ConicGradientView.kt"'},'class ConicGradientView(private val reactContext: ReactContext) : ReactViewGroup(reactContext) {\n// highlight-start\n    private val mPaint = Paint(Paint.ANTI_ALIAS_FLAG)\n    private var mPath = Path()\n    private var mRect = RectF()\n// highlight-end\n    private var mColors = mutableListOf(Color.RED, Color.YELLOW)\n    private var mLocations = mutableListOf(0f, 1f)\n    private var mCenterPointX = 0.5\n    private var mCenterPointY = 0.5\n// highlight-start\n    private var mWidth = 0\n    private var mHeight = 0\n\n    init {\n        /**\n        * This will invoke internal `getOrCreateReactViewBackground` method\n        * to initialize ReactViewBackgroundDrawable for this view,\n        * if ReactViewBackgroundDrawable, then view will not draw the gradient\n        */\n        setBorderRadius(0f)\n    }\n// highlight-end\n\n    fun setColors(colors: ReadableArray) {\n        mColors.clear()\n        for (i in 0 until colors.size()) {\n            if (colors.getType(i) == ReadableType.Map) {\n                mColors.add(i, ColorPropConverter.getColor(colors.getMap(i), reactContext))\n            } else {\n                mColors.add(i, colors.getInt(i))\n            }\n        }\n// highlight-start\n        prepareGradient()\n// highlight-end\n    }\n\n    fun setLocations(locations: ReadableArray) {\n        mLocations.clear()\n        for (i in 0 until locations.size()) {\n            mLocations.add(i, locations.getDouble(i).toFloat())\n        }\n// highlight-start\n        prepareGradient()\n// highlight-end\n    }\n\n    fun setCenterPoint(centerPoint: ReadableMap) {\n        mCenterPointX = if (centerPoint.hasKey("x") && !centerPoint.isNull("x")) {\n            centerPoint.getDouble("x")\n        } else {\n            0.5\n        }\n        mCenterPointY = if (centerPoint.hasKey("y") && !centerPoint.isNull("y")) {\n            centerPoint.getDouble("y")\n        } else {\n            0.5\n        }\n// highlight-start\n        prepareGradient()\n// highlight-end\n    }\n\n// highlight-start\n    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\n        super.onSizeChanged(w, h, oldw, oldh)\n        mWidth = w\n        mHeight = h\n        preparePath()\n        prepareGradient()\n    }\n\n    override fun dispatchDraw(canvas: Canvas?) {\n        canvas?.drawPath(mPath, mPaint)\n        super.dispatchDraw(canvas)\n    }\n\n    private fun preparePath() {\n        mPath.reset()\n        mRect.set(\n            0f,\n            0f,\n            mWidth.toFloat(),\n            mHeight.toFloat()\n        )\n        mPath.addRect(mRect, Path.Direction.CW)\n    }\n\n    private fun prepareGradient() {\n        if (mColors.size != mLocations.size) {\n            return\n        }\n        mPaint.shader = SweepGradient(\n            (mCenterPointX * mWidth).toFloat(),\n            (mCenterPointY * mHeight).toFloat(),\n            mColors.toIntArray(),\n            mLocations.toFloatArray()\n        )\n        invalidate()\n    }\n// highlight-end\n\n    companion object {\n        const val NAME = "ConicGradientView"\n    }\n}\n')),(0,i.kt)("p",null,"Displaying the gradient is just a bit more difficult than on iOS - first we need to grab the width and height of the view,\nwe can do it thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/android/view/View#onSizeChanged(kotlin.Int,%20kotlin.Int,%20kotlin.Int,%20kotlin.Int)"},(0,i.kt)("inlineCode",{parentName:"a"},"View#onSizeChanged"))," method."),(0,i.kt)("p",null,"After that we create helper private methods (",(0,i.kt)("inlineCode",{parentName:"p"},"preparePath"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"prepareGradient"),') that prepare the path and shader for our gradient background.\nWhenever each "input" value changes we are recomputing the gradient and invalidating the view (telling it that it needs to be redrawn).'),(0,i.kt)("p",null,"The actual gradient drawing takes place in ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/android/view/View#dispatchDraw(android.graphics.Canvas)"},(0,i.kt)("inlineCode",{parentName:"a"},"View#dispatchDraw"))," method.\nIt provides canvas argument that we can use to draw the background."),(0,i.kt)("p",null,"You may have noticed, that we also have the ",(0,i.kt)("inlineCode",{parentName:"p"},"setBorderRadius")," invoked in ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," function.\nIt's a workaround for ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactViewGroup")," based classes. Without it, the gradient wouldn't be displayed at all, if you wouldn't set some color/border props on the JS side."))}b.isMDXComponent=!0;const f={toc:[{value:"<code>ConicGradientViewManager.kt</code>",id:"conicgradientviewmanagerkt",level:4}]},M="wrapper";function R(e){let{components:n,...t}=e;return(0,i.kt)(M,(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"conicgradientviewmanagerkt"},(0,i.kt)("inlineCode",{parentName:"h4"},"ConicGradientViewManager.kt")),(0,i.kt)("p",null,"Paste the following code in ",(0,i.kt)("inlineCode",{parentName:"p"},"android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.kt")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.kt"',title:'"android/src/newarch/java/com/conicgradientpackage/ConicGradientViewManager.kt"'},'package com.conicgradientpackage\n\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.ViewManagerDelegate\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.viewmanagers.ConicGradientViewManagerDelegate\nimport com.facebook.react.viewmanagers.ConicGradientViewManagerInterface\nimport com.facebook.react.views.view.ReactViewGroup\nimport com.facebook.react.views.view.ReactViewManager\n\n@ReactModule(name = ConicGradientView.NAME)\nclass ConicGradientViewManager : ReactViewManager(), ConicGradientViewManagerInterface<ReactViewGroup> {\n    private var mDelegate = ConicGradientViewManagerDelegate(this)\n\n    override fun getName() = ConicGradientView.NAME\n\n    override fun getDelegate(): ViewManagerDelegate<ReactViewGroup> = mDelegate\n\n    override fun createViewInstance(reactContext: ThemedReactContext): ConicGradientView {\n        return ConicGradientView(reactContext)\n    }\n\n    @ReactProp(name = "colors")\n    override fun setColors(view: ReactViewGroup, colors: ReadableArray?) {\n        check(view is ConicGradientView)\n        if (colors == null) {\n            return\n        }\n        view.setColors(colors)\n    }\n\n    @ReactProp(name = "locations")\n    override fun setLocations(view: ReactViewGroup, locations: ReadableArray?) {\n        check(view is ConicGradientView)\n        if (locations == null) {\n            return\n        }\n        view.setLocations(locations)\n    }\n\n    @ReactProp(name = "centerPoint")\n    override fun setCenterPoint(view: ReactViewGroup, centerPoint: ReadableMap?) {\n        check(view is ConicGradientView)\n        if (centerPoint == null) {\n            return\n        }\n        view.setCenterPoint(centerPoint)\n    }\n}\n')),(0,i.kt)("p",null,"Let's see what's happening here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we declare the view manager class that extends ",(0,i.kt)("inlineCode",{parentName:"li"},"ReactViewManager")," and implement code-generated spec interface"),(0,i.kt)("li",{parentName:"ul"},"we override required methods: ",(0,i.kt)("inlineCode",{parentName:"li"},"getName"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"getDelegate")," & ",(0,i.kt)("inlineCode",{parentName:"li"},"createViewInstance")),(0,i.kt)("li",{parentName:"ul"},"we override props setters based on JS spec")),(0,i.kt)(p.ZP,{filename:"android/src/oldarch/java/com/conicgradientpackage/ConicGradientViewManager.kt",language:"kotlin",mdxType:"OldArchAndroidViewManagerFile"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.conicgradientpackage\n\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.annotations.ReactProp\nimport com.facebook.react.views.view.ReactViewManager\n\n@ReactModule(name = ConicGradientView.NAME)\nclass ConicGradientViewManager : ReactViewManager() {\n    override fun getName() = ConicGradientView.NAME\n\n    override fun createViewInstance(reactContext: ThemedReactContext): ConicGradientView {\n        return ConicGradientView(reactContext)\n    }\n\n    @ReactProp(name = "colors")\n    fun setColors(view: ConicGradientView, colors: ReadableArray?) {\n        if (colors == null) {\n            return\n        }\n        view.setColors(colors)\n    }\n\n    @ReactProp(name = "locations")\n    fun setLocations(view: ConicGradientView, locations: ReadableArray?) {\n        if (locations == null) {\n            return\n        }\n        view.setLocations(locations)\n    }\n\n    @ReactProp(name = "centerPoint")\n    fun setCenterPoint(view: ConicGradientView, centerPoint: ReadableMap?) {\n        if (centerPoint == null) {\n            return\n        }\n        view.setCenterPoint(centerPoint)\n    }\n}\n'))),(0,i.kt)("p",null,"Let's finalize it by exporting the view manager in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboReactPackage")," instance."))}R.isMDXComponent=!0;const V={toc:[]},P="wrapper";function N(e){let{components:n,...t}=e;return(0,i.kt)(P,(0,a.Z)({},V,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(b,{mdxType:"AndroidKotlinView"}),(0,i.kt)(R,{mdxType:"AndroidKotlinViewManager"}),(0,i.kt)(c.ZP,{language:"kotlin",namespace:"conicgradientpackage",packageClass:"ConicGradientTurboPackage",viewManagerClass:"ConicGradientViewManager",mdxType:"AndroidTurboPackage"}))}N.isMDXComponent=!0;const y={sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},x=void 0,G={unversionedId:"guides/conic-gradient-view/android-impl",id:"guides/conic-gradient-view/android-impl",title:"Android implementation",description:"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under /android path",source:"@site/docs/guides/conic-gradient-view/android-impl.mdx",sourceDirName:"guides/conic-gradient-view",slug:"/guides/conic-gradient-view/android-impl",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/android-impl",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/guides/conic-gradient-view/android-impl.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Android implementation",sidebar_position:5,title:"Android implementation"},sidebar:"tutorialSidebar",previous:{title:"iOS implementation",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/ios-impl"},next:{title:"Usage in practice",permalink:"/rnbridgingtutorial/docs/guides/conic-gradient-view/usage"}},A={},T=[],I={toc:T},L="wrapper";function D(e){let{components:n,...t}=e;return(0,i.kt)(L,(0,a.Z)({},I,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's use Android Studio for writing Android code. Launch Android Studio and open the project under ",(0,i.kt)("inlineCode",{parentName:"p"},"<your-project-dir>/android")," path\nWhen the project is opened, find ",(0,i.kt)("inlineCode",{parentName:"p"},"conic-gradient-package")," inside project-tree"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"conic-gradient-package")," contains 3 packages with the same name ",(0,i.kt)("inlineCode",{parentName:"p"},"com.conicgradientpackage"),". After expanding them, you'll notice that these contain following things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"code-generated Java spec files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConicGradientViewManager")," view manager class stub files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConicGradientView")," class stub file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConicGradientTurboPackage")," class stub file")),(0,i.kt)("p",null,"Let's begin!"),(0,i.kt)(o.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)(N,{mdxType:"AndroidKotlinImpl"})),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(v,{mdxType:"AndroidJavaImpl"}))),(0,i.kt)("p",null,"You can check training repo for Kotlin implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/conic-gradient-package"},"here")," and Java implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/conic-gradient-package-classic"},"here"),"."),(0,i.kt)("p",null,"That's Android part, now let's wrap things up and try to ",(0,i.kt)("a",{parentName:"p",href:"./usage"},"use Conic gradient")," in action!"))}D.isMDXComponent=!0}}]);