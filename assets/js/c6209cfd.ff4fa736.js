"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[3374],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>w});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),m=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=m(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(a),u=o,w=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return a?t.createElement(w,i(i({ref:n},p),{},{components:a})):t.createElement(w,i({ref:n},p))}));function w(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=a[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5162:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(7294),o=a(6010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:a,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:a},n)}},4866:(e,n,a)=>{a.d(n,{Z:()=>M});var t=a(7462),o=a(7294),r=a(6010),i=a(2466),l=a(6550),s=a(1980),m=a(7392),p=a(12);function c(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:o}}=e;return{value:n,label:a,attributes:t,default:o}}))}function d(e){const{values:n,children:a}=e;return(0,o.useMemo)((()=>{const e=n??c(a);return function(e){const n=(0,m.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function w(e){let{queryString:n=!1,groupId:a}=e;const t=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,r=d(e),[i,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[s,m]=w({queryString:a,groupId:t}),[c,v]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,r]=(0,p.Nk)(a);return[t,(0,o.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:t}),g=(()=>{const e=s??c;return u({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),v(e)}),[m,v,r]),tabValues:r}}var g=a(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:a,selectedValue:l,selectValue:s,tabValues:m}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,a=p.indexOf(n),t=m[a].value;t!==l&&(c(n),s(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;n=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;n=p[a]??p[p.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n)},m.map((e=>{let{value:n,label:a,attributes:i}=e;return o.createElement("li",(0,t.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>p.push(e),onKeyDown:u,onClick:d},i,{className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===n})}),a??n)})))}function f(e){let{lazy:n,children:a,selectedValue:t}=e;if(a=Array.isArray(a)?a:[a],n){const e=a.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function k(e){const n=v(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},o.createElement(y,(0,t.Z)({},e,n)),o.createElement(f,(0,t.Z)({},e,n)))}function M(e){const n=(0,g.Z)();return o.createElement(k,(0,t.Z)({key:String(n)},e))}},8586:(e,n,a)=>{a.d(n,{ZP:()=>l});var t=a(7462),o=(a(7294),a(3905));const r={toc:[]},i="wrapper";function l(e){let{components:n,...a}=e;return(0,o.kt)(i,(0,t.Z)({},r,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You may notice, that JS specs contain codegen-related methods, classes, types, etc. to make things more future-proof."),(0,o.kt)("p",null,"That's because:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"those elements are available since RN older versions (even from v0.65)"),(0,o.kt)("li",{parentName:"ul"},'those elements are falling back to "old architecture" implementation (e.g. codegenNativeComponent)'),(0,o.kt)("li",{parentName:"ul"},"it introduces type safety for exposed native parts on JS side"),(0,o.kt)("li",{parentName:"ul"},"it's much easier to keep single specification on JS side - when old arch will be dropped, there'll be no need to change anything on JS side")),(0,o.kt)("p",null,"So to make it easier, let's use them, to get you more familiar with it \ud83d\udc4d"))}l.isMDXComponent=!0},515:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>v,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var t=a(7462),o=(a(7294),a(3905)),r=a(4866),i=a(5162),l=a(8586);const s={sidebar_label:"View props (old arch)",sidebar_position:4,title:"View props (old arch)"},m=void 0,p={unversionedId:"view-reference/view-props-types-old",id:"view-reference/view-props-types-old",title:"View props (old arch)",description:"Boolean prop",source:"@site/docs/view-reference/view-props-types-old.mdx",sourceDirName:"view-reference",slug:"/view-reference/view-props-types-old",permalink:"/rnbridgingtutorial/docs/view-reference/view-props-types-old",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/view-reference/view-props-types-old.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"View props (old arch)",sidebar_position:4,title:"View props (old arch)"},sidebar:"tutorialSidebar",previous:{title:"View props",permalink:"/rnbridgingtutorial/docs/view-reference/view-props-types"},next:{title:"View commands",permalink:"/rnbridgingtutorial/docs/view-reference/view-commands"}},c={},d=[{value:"Boolean prop",id:"boolean-prop",level:3},{value:"Number prop",id:"number-prop",level:3},{value:"String prop",id:"string-prop",level:3},{value:"Array prop",id:"array-prop",level:3},{value:"Object prop",id:"object-prop",level:3},{value:"Color prop",id:"color-prop",level:3},{value:"Event handler prop",id:"event-handler-prop",level:3}],u={toc:d},w="wrapper";function v(e){let{components:n,...a}=e;return(0,o.kt)(w,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)(l.ZP,{mdxType:"CodegenForOldArchInfo"})),(0,o.kt)("h3",{id:"boolean-prop"},"Boolean prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  enabled: boolean\n  checked?: boolean\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(enabled, BOOL)\nRCT_EXPORT_VIEW_PROPERTY(checked, NSNumber)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "enabled")\nfun setEnabled(view: MyAwesomeView, enabled: Boolean) {\n    //\n}\n\n@ReactProp(name = "checked")\nfun setChecked(view: MyAwesomeView, checked: Boolean?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "enabled")\npublic void setEnabled(MyAwesomeView view, boolean enabled) {\n    //\n}\n\n@ReactProp(name = "checked")\npublic void setChecked(MyAwesomeView view, @Nullable Boolean checked) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"number-prop"},"Number prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport type {\n  Double,\n  Float,\n  Int32,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  precision: Double\n  optionalPrecision?: Double\n  price: Float\n  discount?: Float\n  count: Int32\n  optionalCount?: Int32\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(precision, double)\nRCT_EXPORT_VIEW_PROPERTY(optionalPrecision, NSNumber)\nRCT_EXPORT_VIEW_PROPERTY(price, float)\nRCT_EXPORT_VIEW_PROPERTY(discount, NSNumber)\nRCT_EXPORT_VIEW_PROPERTY(count, int)\nRCT_EXPORT_VIEW_PROPERTY(optionalCount, NSNumber)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "precision")\nfun setPrecision(view: MyAwesomeView, precision: Double) {\n    //\n}\n\n@ReactProp(name = "optionalPrecision")\nfun setOptionalPrecision(view: MyAwesomeView, optionalPrecision: Double?) {\n    //\n}\n\n@ReactProp(name = "price")\nfun setPrice(view: MyAwesomeView, price: Float) {\n    //\n}\n\n@ReactProp(name = "discount")\nfun setDiscount(view: MyAwesomeView, discount: Float?) {\n    //\n}\n\n@ReactProp(name = "count")\nfun setCount(view: MyAwesomeView, count: Int) {\n    //\n}\n\n@ReactProp(name = "optionalCount")\nfun setOptionalCount(view: MyAwesomeView, optionalCount: Int?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "precision")\npublic void setPrecision(MyAwesomeView view, double precision) {\n    //\n}\n\n@ReactProp(name = "optionalPrecision")\npublic void setOptionalPrecision(MyAwesomeView view, @Nullable Double optionalPrecision) {\n    //\n}\n\n@ReactProp(name = "price")\npublic void setPrice(MyAwesomeView view, float price) {\n    //\n}\n\n@ReactProp(name = "discount")\npublic void setDiscount(MyAwesomeView view, @Nullable Float discount) {\n    //\n}\n\n@ReactProp(name = "count")\npublic void setCount(MyAwesomeView view, int count) {\n    //\n}\n\n@ReactProp(name = "optionalCount")\npublic void setOptionalCount(MyAwesomeView view, @Nullable Integer optionalCount) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"string-prop"},"String prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  name: string\n  label?: string\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(name, NSString)\nRCT_EXPORT_VIEW_PROPERTY(label, NSString)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "name")\nfun setName(view: MyAwesomeView, name: String) {\n    //\n}\n\n@ReactProp(name = "label")\nfun setLabel(view: MyAwesomeView, label: String?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "name")\npublic void setName(MyAwesomeView view, String name) {\n    //\n}\n\n@ReactProp(name = "label")\npublic void setLabel(MyAwesomeView view, @Nullable String label) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"array-prop"},"Array prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  data: ReadonlyArray<number>\n  optionalData?: ReadonlyArray<Readonly<{ title: string, description: string }>>\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(data, NSArray)\nRCT_EXPORT_VIEW_PROPERTY(optionalData, NSArray)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "data")\nfun setData(view: MyAwesomeView, data: ReadableArray) {\n    //\n}\n\n@ReactProp(name = "optionalData")\nfun setOptionalData(view: MyAwesomeView, optionalData: ReadableArray?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "data")\npublic void setData(MyAwesomeView view, ReadableArray data) {\n    //\n}\n\n@ReactProp(name = "optionalData")\npublic void setOptionalData(MyAwesomeView view, @Nullable ReadableArray optionalData) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"object-prop"},"Object prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  config: Readonly<{ flag: boolean, option: string }>\n  optionalConfig?: Readonly<{ count: number }>\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(config, NSDictionary)\nRCT_EXPORT_VIEW_PROPERTY(optionalConfig, NSDictionary)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "config")\nfun setConfig(view: MyAwesomeView, config: ReadableMap) {\n    //\n}\n\n@ReactProp(name = "optionalConfig")\nfun setOptionalConfig(view: MyAwesomeView, optionalConfig: ReadableMap?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "config")\npublic void setConfig(MyAwesomeView view, ReadableMap config) {\n    //\n}\n\n@ReactProp(name = "optionalConfig")\npublic void setOptionalConfig(MyAwesomeView view, @Nullable ReadableMap optionalConfig) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"color-prop"},"Color prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { ColorValue, HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  tintColor: ColorValue\n  optionalColor?: ColorValue\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(tintColor, UIColor)\nRCT_EXPORT_VIEW_PROPERTY(optionalColor, UIColor)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "tintColor")\nfun setTintColor(view: MyAwesomeView, tintColor: Int?) {\n    //\n}\n\n@ReactProp(name = "optionalColor")\nfun setOptionalColor(view: MyAwesomeView, optionalColor: Int?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@ReactProp(name = "tintColor")\npublic void setTintColor(MyAwesomeView view, @Nullable Integer tintColor) {\n    //\n}\n\n@ReactProp(name = "optionalColor")\npublic void setOptionalColor(MyAwesomeView view, @Nullable Integer optionalColor) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"event-handler-prop"},"Event handler prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport type {\n  BubblingEventHandler,\n  DirectEventHandler,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  onAwesomeBubblingEvent?: BubblingEventHandler<Readonly<{ arg: string }>>\n  onAwesomeDirectEvent?: DirectEventHandler<Readonly<{ arg: string }>>\n}\n\n// codegenNativeComponent uses requireNativeComponent on old arch\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(onAwesomeBubblingEvent, RCTBubblingEventBlock)\nRCT_EXPORT_VIEW_PROPERTY(onAwesomeDirectEvent, RCTDirectEventBlock)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.kt"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.kt"'},'import com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\n//\n\nclass OnAwesomeBubblingEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val payload: String\n) : Event<OnAwesomeBubblingEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putString("arg", payload)\n    }\n\n    companion object {\n        const val NAME = "topAwesomeBubblingEvent"\n        const val EVENT_PROP_NAME = "onAwesomeBubblingEvent"\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.kt"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.kt"'},'import com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\n//\n\nclass OnAwesomeDirectEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val payload: String\n) : Event<OnAwesomeDirectEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putString("arg", payload)\n    }\n\n    companion object {\n        const val NAME = "topAwesomeDirectEvent"\n        const val EVENT_PROP_NAME = "onAwesomeDirectEvent"\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.common.MapBuilder\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\n\n//\n\noverride fun addEventEmitters(reactContext: ThemedReactContext, view: MyAwesomeView) {\n    super.addEventEmitters(reactContext, view)\n    view.setOnAwesomeViewListener(object : MyAwesomeView.OnAwesomeViewListener {\n        override fun onAwesomeBubblingEvent(payload: String) {\n            UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                ?.dispatchEvent(\n                    OnAwesomeBubblingEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.id,\n                        payload\n                    )\n                )\n        }\n\n        override fun onAwesomeDirectEvent(payload: String) {\n            UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                ?.dispatchEvent(\n                    OnAwesomeDirectEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.id,\n                        payload\n                    )\n                )\n        }\n    })\n}\n\noverride fun getExportedCustomBubblingEventTypeConstants(): MutableMap<String, Any> {\n    return MapBuilder.of(\n        OnAwesomeBubblingEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeBubblingEvent.EVENT_PROP_NAME)\n    )\n}\n\noverride fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {\n    return MapBuilder.of(\n        OnAwesomeDirectEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeDirectEvent.EVENT_PROP_NAME)\n    )\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.java"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\n//\n\npublic class OnAwesomeBubblingEvent extends Event<OnAwesomeBubblingEvent> {\n    private final String payload;\n\n    public static final String NAME = "topAwesomeBubblingEvent";\n    public static final String EVENT_PROP_NAME = "onAwesomeBubblingEvent";\n\n    public OnAwesomeBubblingEvent(int surfaceId, int viewId, String payload) {\n        super(surfaceId, viewId);\n        this.payload = payload;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Override\n    @Nullable\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap eventPayload = Arguments.createMap();\n        eventPayload.putString("arg", payload);\n        return eventPayload;\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.java"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\n//\n\npublic class OnAwesomeDirectEvent extends Event<OnAwesomeDirectEvent> {\n    private final String payload;\n\n    public static final String NAME = "topAwesomeDirectEvent";\n    public static final String EVENT_PROP_NAME = "onAwesomeDirectEvent";\n\n    public OnAwesomeDirectEvent(int surfaceId, int viewId, String payload) {\n        super(surfaceId, viewId);\n        this.payload = payload;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Override\n    @Nullable\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap eventPayload = Arguments.createMap();\n        eventPayload.putString("arg", payload);\n        return eventPayload;\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import com.facebook.react.common.MapBuilder;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.events.EventDispatcher;\n\nimport java.util.Map;\n\n//\n\n@Override\nprotected void addEventEmitters(ThemedReactContext reactContext, MyAwesomeView view) {\n    super.addEventEmitters(reactContext, view);\n    view.setOnAwesomeViewListener(new MyAwesomeView.OnAwesomeViewListener() {\n        @Override\n        public void onAwesomeBubblingEvent(String payload) {\n            final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n            if (dispatcher != null) {\n                dispatcher.dispatchEvent(\n                    new OnAwesomeBubblingEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.getId(),\n                        payload\n                    )\n                );\n            }\n        }\n\n        @Override\n        public void onAwesomeDirectEvent(String payload) {\n            final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n            if (dispatcher != null) {\n                dispatcher.dispatchEvent(\n                    new OnAwesomeDirectEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.getId(),\n                        payload\n                    )\n                );\n            }\n        }\n    });\n}\n\n@Override\npublic Map<String, Object> getExportedCustomBubblingEventTypeConstants() {\n    return MapBuilder.of(\n        OnAwesomeBubblingEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeBubblingEvent.EVENT_PROP_NAME)\n    )\n}\n\n@Override\npublic Map<String, Object> getExportedCustomDirectEventTypeConstants() {\n    return MapBuilder.of(\n        OnAwesomeDirectEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeDirectEvent.EVENT_PROP_NAME)\n    )\n}\n')))))))}v.isMDXComponent=!0}}]);