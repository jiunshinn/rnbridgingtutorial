"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[4640],{5162:(e,n,t)=>{t.d(n,{Z:()=>r});var i=t(7294),o=t(6010);const a={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>f});var i=t(7462),o=t(7294),a=t(6010),r=t(2466),l=t(6550),s=t(1980),c=t(7392),p=t(12);function m(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:o}}=e;return{value:n,label:t,attributes:i,default:o}}))}function w(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??m(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const i=(0,l.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(a),(0,o.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function C(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=w(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[s,c]=u({queryString:t,groupId:i}),[m,C]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,p.Nk)(t);return[i,(0,o.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),v=(()=>{const e=s??m;return d({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),C(e)}),[c,C,a]),tabValues:a}}var v=t(2389);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,r.o5)(),w=e=>{const n=e.currentTarget,t=p.indexOf(n),i=c[t].value;i!==l&&(m(n),s(i))},d=e=>{let n=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:r}=e;return o.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>p.push(e),onKeyDown:d,onClick:w},r,{className:(0,a.Z)("tabs__item",N.tabItem,r?.className,{"tabs__item--active":l===n})}),t??n)})))}function V(e){let{lazy:n,children:t,selectedValue:i}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===i));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function g(e){const n=C(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",N.tabList)},o.createElement(h,(0,i.Z)({},e,n)),o.createElement(V,(0,i.Z)({},e,n)))}function f(e){const n=(0,v.Z)();return o.createElement(g,(0,i.Z)({key:String(n)},e))}},6162:(e,n,t)=>{t.d(n,{ZP:()=>s});var i=t(7462),o=(t(7294),t(3905)),a=t(814);const r={toc:[]},l="wrapper";function s(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,i.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Complete ",(0,o.kt)("code",null,t.filename)," file"),(0,o.kt)("div",null,(0,o.kt)(a.Z,{language:t.language,mdxType:"CodeBlock"},t.children))))}s.isMDXComponent=!0},3010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Q,contentTitle:()=>J,default:()=>ie,frontMatter:()=>K,metadata:()=>$,toc:()=>ee});var i=t(7462),o=(t(7294),t(3905)),a=t(4866),r=t(5162),l=t(6162);const s={toc:[{value:"<code>RNNativeListViewComponentView.h</code>",id:"rnnativelistviewcomponentviewh",level:4},{value:"<code>RNNativeListViewComponentView.mm</code>",id:"rnnativelistviewcomponentviewmm",level:4}]},c="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewcomponentviewh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewComponentView.h")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.h"',title:'"ios/RNNativeListViewComponentView.h"'},"#if RCT_NEW_ARCH_ENABLED\n#import <React/RCTViewComponentView.h>\n\n@interface RNNativeListViewComponentView : RCTViewComponentView\n\n@end\n\n#endif\n")),(0,o.kt)("p",null,"Inside the header file for Fabric component, we declare the ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewComponentView")," class that extends ",(0,o.kt)("inlineCode",{parentName:"p"},"RCTViewComponentView"),"."),(0,o.kt)("h4",{id:"rnnativelistviewcomponentviewmm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewComponentView.mm")),(0,o.kt)("p",null,"The boilerplate for Fabric component's implementation part will look like following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},'#if RCT_NEW_ARCH_ENABLED\n#import "RNNativeListViewComponentView.h"\n\n#import <React/RCTConversions.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n\n#import <react/renderer/components/NativeListPackage/ComponentDescriptors.h>\n#import <react/renderer/components/NativeListPackage/EventEmitters.h>\n#import <react/renderer/components/NativeListPackage/Props.h>\n#import <react/renderer/components/NativeListPackage/RCTComponentViewHelpers.h>\n\n#import "RCTFabricComponentsPlugins.h"\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    //\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\nClass<RCTComponentViewProtocol> RNNativeListViewCls(void)\n{\n    return RNNativeListViewComponentView.class;\n}\n#endif\n')),(0,o.kt)("p",null,"At the top there are new arch imports and conversion helpers.\nThe component extends code-generated protocol that declare the native commands methods from the JS spec.\nNext we implement all required methods and create ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewCls")," function."),(0,o.kt)("p",null,"As a next part, let's initialize the container view with our view controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},'//...\n\n// highlight-start\n#import "RNNativeListViewContainerView.h"\n#import "RNNativeListViewViewController.h"\n// highlight-end\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n// highlight-start\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n// highlight-end\n    }\n\n    return self;\n}\n\n// ...\n\n@end\n\n// ...\n')),(0,o.kt)("p",null,"Next step is props handling:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},"//...\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n// highlight-start\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n\n    auto dataComparator = [](const RNNativeListViewDataStruct &left, const RNNativeListViewDataStruct &right) {\n        return left.imageUrl == right.imageUrl && left.description == right.description;\n    };\n    \n    if (!std::equal(oldViewProps.data.begin(), oldViewProps.data.end(), newViewProps.data.begin(), newViewProps.data.end(), dataComparator)) {\n        NSArray *data = RCTConvertVecToArray(newViewProps.data, ^(RNNativeListViewDataStruct item){\n            DataItem *dataItem = [[DataItem alloc] initWithImageUrl:RCTNSStringFromString(item.imageUrl) itemDescription:RCTNSStringFromString(item.description)];\n            return dataItem;\n        });\n        [view.viewController setData:data];\n    }\n    \n    if (oldViewProps.options.placeholderImage != newViewProps.options.placeholderImage) {\n        [view.viewController setPlaceholderImage:RCTNSStringFromString(newViewProps.options.placeholderImage)];\n    }\n\n    if (oldViewProps.backgroundColor != newViewProps.backgroundColor) {\n        UIColor *backgroundColor = RCTUIColorFromSharedColor(newViewProps.backgroundColor);\n        [view.viewController setBackgroundColor:backgroundColor];\n    }\n// highlight-end\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n// ...\n\n@end\n\n// ...\n")),(0,o.kt)("p",null,"Here we are handling 3 props - ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"options.placeholderImage")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop is quite interesting, it's array, so we need to compare the old and new value of that array.\nTo do that in Objective-C++, we will use C++ ",(0,o.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/algorithm/equal"},(0,o.kt)("inlineCode",{parentName:"a"},"std::equal"))," function.\nIt takes the ranges of arrays and comparator function that we declare under ",(0,o.kt)("inlineCode",{parentName:"p"},"dataComparator")," variable."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To learn more about anonymous function in C++ check ",(0,o.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/lambda"},"Lambda expressions")," section in C++ reference")),(0,o.kt)("p",null,"The last thing left is to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem:")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},"//...\n\n@implementation RNNativeListViewComponentView\n\n//...\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n// highlight-start\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n    [view.viewController scrollToItem:index];\n// highlight-end\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\n// ...\n")),(0,o.kt)(l.ZP,{filename:"RNNativeListViewComponentView.mm",language:"objc",mdxType:"CompleteFile"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#if RCT_NEW_ARCH_ENABLED\n#import "RNNativeListViewComponentView.h"\n\n#import <React/RCTConversions.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n\n#import <react/renderer/components/NativeListPackage/ComponentDescriptors.h>\n#import <react/renderer/components/NativeListPackage/EventEmitters.h>\n#import <react/renderer/components/NativeListPackage/Props.h>\n#import <react/renderer/components/NativeListPackage/RCTComponentViewHelpers.h>\n\n#import "RCTFabricComponentsPlugins.h"\n\n#import "RNNativeListViewContainerView.h"\n#import "RNNativeListViewViewController.h"\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n\n    auto dataComparator = [](const RNNativeListViewDataStruct &left, const RNNativeListViewDataStruct &right) {\n        return left.imageUrl == right.imageUrl && left.description == right.description;\n    };\n    \n    if (!std::equal(oldViewProps.data.begin(), oldViewProps.data.end(), newViewProps.data.begin(), newViewProps.data.end(), dataComparator)) {\n        NSArray *data = RCTConvertVecToArray(newViewProps.data, ^(RNNativeListViewDataStruct item){\n            DataItem *dataItem = [[DataItem alloc] initWithImageUrl:RCTNSStringFromString(item.imageUrl) itemDescription:RCTNSStringFromString(item.description)];\n            return dataItem;\n        });\n        [view.viewController setData:data];\n    }\n    \n    if (oldViewProps.options.placeholderImage != newViewProps.options.placeholderImage) {\n        [view.viewController setPlaceholderImage:RCTNSStringFromString(newViewProps.options.placeholderImage)];\n    }\n\n    if (oldViewProps.backgroundColor != newViewProps.backgroundColor) {\n        UIColor *backgroundColor = RCTUIColorFromSharedColor(newViewProps.backgroundColor);\n        [view.viewController setBackgroundColor:backgroundColor];\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n    [view.viewController scrollToItem:index];\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\nClass<RCTComponentViewProtocol> RNNativeListViewCls(void)\n{\n    return RNNativeListViewComponentView.class;\n}\n#endif\n'))))}p.isMDXComponent=!0;const m={toc:[{value:"<code>RNNativeListViewContainerView.h</code>",id:"rnnativelistviewcontainerviewh",level:4},{value:"<code>RNNativeListViewContainerView.mm</code>",id:"rnnativelistviewcontainerviewmm",level:4}]},w="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(w,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewcontainerviewh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewContainerView.h")),(0,o.kt)("p",null,"Next step is to embed the view controller inside bridged view.\nIn order to handle such case, we will use container view, that will hold the underlying view of our view controller."),(0,o.kt)("p",null,"Let's start by defining header interface for container view:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewContainerView.h"',title:'"ios/RNNativeListViewContainerView.h"'},'#import <UIKit/UIKit.h>\n#import "RNNativeListViewViewController.h"\n\n@interface RNNativeListViewContainerView : UIView\n\n@property (nonatomic, strong) RNNativeListViewViewController *viewController;\n\n@end\n')),(0,o.kt)("p",null,"It will extend base ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uiview?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UIView"))," class and will hold a reference to our custom view controller class."),(0,o.kt)("p",null,"Next let's declare the implementation."),(0,o.kt)("h4",{id:"rnnativelistviewcontainerviewmm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewContainerView.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewContainerView.mm"',title:'"ios/RNNativeListViewContainerView.mm"'},'#import "RNNativeListViewContainerView.h"\n\n#import <React/UIView+React.h>\n\n@implementation RNNativeListViewContainerView {\n    RNNativeListViewViewController * _Nullable internalViewController;\n}\n\n- (RNNativeListViewViewController *)viewController\n{\n    return internalViewController;\n}\n\n- (void)setViewController:(RNNativeListViewViewController *)newViewController\n{\n    [self unmountViewController];\n    internalViewController = newViewController;\n    if (newViewController != nil) {\n        [self mountViewController];\n    }\n}\n\n- (void)removeFromSuperview\n{\n    [self unmountViewController];\n    [super removeFromSuperview];\n}\n\n- (void)willMoveToWindow:(UIWindow *)newWindow\n{\n    if (newWindow == nil) {\n        [self unmountViewController];\n    } else {\n        [self mountViewController];\n    }\n}\n\n- (void)mountViewController\n{\n    if (self.viewController == nil) {\n        return;\n    }\n\n    if (self.viewController.parentViewController != nil) {\n        return;\n    }\n\n    UIViewController *reactViewController = self.reactViewController;\n    if (reactViewController == nil) {\n        return;\n    }\n\n    [reactViewController addChildViewController:self.viewController];\n    [self addSubview:self.viewController.view];\n    \n    self.viewController.view.translatesAutoresizingMaskIntoConstraints = NO;\n    [NSLayoutConstraint activateConstraints:@[\n        [self.viewController.view.topAnchor constraintEqualToAnchor:self.topAnchor],\n        [self.viewController.view.leadingAnchor constraintEqualToAnchor:self.leadingAnchor],\n        [self.viewController.view.trailingAnchor constraintEqualToAnchor:self.trailingAnchor],\n        [self.viewController.view.bottomAnchor constraintEqualToAnchor:self.bottomAnchor]\n    ]];\n    \n    [self.viewController didMoveToParentViewController:reactViewController];\n}\n\n- (void)unmountViewController\n{\n    if (self.viewController == nil) {\n        return;\n    }\n\n    if (self.viewController.parentViewController == nil) {\n        return;\n    }\n\n    [self.viewController willMoveToParentViewController:nil];\n    [self.viewController.view removeFromSuperview];\n    [self.viewController removeFromParentViewController];\n}\n\n@end\n')),(0,o.kt)("p",null,"You can take a look at ",(0,o.kt)("inlineCode",{parentName:"p"},"mountViewController")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"unmountViewController")," methods.\nThese are the places where our custom view controller has its lifecycle synchronized with the container view (",(0,o.kt)("inlineCode",{parentName:"p"},"[self.viewController didMoveToParentViewController:reactViewController]")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"[self.viewController willMoveToParentViewController:nil]"),").\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"self.reactViewController")," returns a parent view controller that holds the container view and will hold our custom view controller.\nThe view of the ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewViewController")," is also positioned with layout constraints."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you plan to bridge multiple custom view controllers, the container view part can be refactored to be more generic and shared for all possible view controllers.")),(0,o.kt)("p",null,"Now let's connect everything inside view manager and Fabric component view."))}d.isMDXComponent=!0;const u={toc:[{value:"<code>DataItem.h</code>",id:"dataitemh",level:4},{value:"<code>DataItem.mm</code>",id:"dataitemmm",level:4}]},C="wrapper";function v(e){let{components:n,...t}=e;return(0,o.kt)(C,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"dataitemh"},(0,o.kt)("inlineCode",{parentName:"h4"},"DataItem.h")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="DataItem.h"',title:'"DataItem.h"'},"#import <Foundation/Foundation.h>\n\n@interface DataItem : NSObject\n\n@property (nonatomic, copy) NSString * _Nonnull imageUrl;\n@property (nonatomic, copy) NSString * _Nonnull itemDescription;\n\n- (instancetype)initWithImageUrl:(NSString * _Nonnull)imageUrl itemDescription:(NSString * _Nonnull)itemDescription;\n\n@end\n")),(0,o.kt)("p",null,"We start by defining ",(0,o.kt)("inlineCode",{parentName:"p"},"DataItem")," object's interface - it extends ",(0,o.kt)("inlineCode",{parentName:"p"},"NSObject")," and declares two properties (",(0,o.kt)("inlineCode",{parentName:"p"},"imageUrl")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"itemDescription"),")."),(0,o.kt)("h4",{id:"dataitemmm"},(0,o.kt)("inlineCode",{parentName:"h4"},"DataItem.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/DataItem.swift"',title:'"ios/DataItem.swift"'},'#import "DataItem.h"\n\n@implementation DataItem\n\n- (instancetype)initWithImageUrl:(NSString *)imageUrl itemDescription:(NSString *)itemDescription\n{\n    self = [super init];\n    if (self) {\n        _imageUrl = imageUrl;\n        _itemDescription = itemDescription;\n    }\n    return self;\n}\n\n@end\n')),(0,o.kt)("p",null,"Next step is declaring implementation for the object.\nWe will use it later when parsing ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop in Objective-C++ code"))}v.isMDXComponent=!0;const N={toc:[{value:"<code>NativeListCell.h</code>",id:"nativelistcellh",level:4},{value:"<code>NativeListCell.mm</code>",id:"nativelistcellmm",level:4}]},h="wrapper";function V(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,i.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"nativelistcellh"},(0,o.kt)("inlineCode",{parentName:"h4"},"NativeListCell.h")),(0,o.kt)("p",null,"To use native lists in iOS, the rows or cells needs to be defined as custom classes that extends dedicated UIKit classes - in this case ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewcell?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewCell")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/NativeListCell.h"',title:'"ios/NativeListCell.h"'},"#import <UIKit/UIKit.h>\n\n@interface NativeListCell : UICollectionViewCell\n\n- (void)setupCellWithItem:(DataItem *)item placeholderImage:(NSString *)placeholderImage;\n\n@end\n")),(0,o.kt)("h4",{id:"nativelistcellmm"},(0,o.kt)("inlineCode",{parentName:"h4"},"NativeListCell.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/NativeListCell.mm"',title:'"ios/NativeListCell.mm"'},'#import "NativeListCell.h"\n\n@implementation NativeListCell {\n    UIStackView *container;\n    UIImageView *imageView;\n    UILabel *label;\n}\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    self = [super initWithFrame:CGRectMake(0, 0, 100, 100)];\n    if (self) {\n        container = [UIStackView new];\n        imageView = [UIImageView new];\n        label = [UILabel new];\n    }\n    return self;\n}\n\n- (void)prepareForReuse\n{\n    [super prepareForReuse];\n    [container removeArrangedSubview:imageView];\n    [container removeArrangedSubview:label];\n    [container removeFromSuperview];\n    imageView.image = nil;\n}\n\n- (void)setupCellWithItem:(DataItem *)item placeholderImage:(NSString *)placeholderImage\n{\n    [label setText:item.itemDescription];\n    [label setFont:[UIFont systemFontOfSize:10]];\n    [label setTextAlignment:NSTextAlignmentCenter];\n\n    imageView.image = [UIImage systemImageNamed:placeholderImage];\n\n    [container setAxis:UILayoutConstraintAxisVertical];\n    [container setSpacing:10];\n    [container addArrangedSubview:imageView];\n    [container addArrangedSubview:label];\n    [self addSubview:container];\n\n    label.translatesAutoresizingMaskIntoConstraints = false;\n    [NSLayoutConstraint activateConstraints:@[\n        [label.centerXAnchor constraintEqualToAnchor:container.centerXAnchor],\n        [label.widthAnchor constraintEqualToConstant:100],\n        [label.heightAnchor constraintEqualToConstant:20]\n    ]];\n\n    imageView.translatesAutoresizingMaskIntoConstraints = false;\n    [NSLayoutConstraint activateConstraints:@[\n        [imageView.widthAnchor constraintEqualToConstant:100],\n        [imageView.heightAnchor constraintEqualToConstant:70]\n    ]];\n\n    container.translatesAutoresizingMaskIntoConstraints = false;\n    [NSLayoutConstraint activateConstraints:@[\n        [container.centerXAnchor constraintEqualToAnchor:self.centerXAnchor],\n        [container.centerYAnchor constraintEqualToAnchor:self.centerYAnchor],\n        [container.widthAnchor constraintEqualToConstant:100],\n        [container.heightAnchor constraintEqualToConstant:100]\n    ]];\n\n    [self setBackgroundColor:[[UIColor alloc] initWithRed:137.0 / 255 green: 204.0 / 255 blue:101.0 / 255 alpha:1]];\n    self.layer.borderColor = UIColor.blueColor.CGColor;\n    self.layer.borderWidth = 1;\n    self.layer.cornerRadius = 10;\n    self.layer.masksToBounds = YES;\n    self.layer.shadowColor = UIColor.blackColor.CGColor;\n    self.layer.shadowOffset = CGSizeMake(0, 5);\n    self.layer.shadowOpacity = 0.34;\n    self.layer.shadowRadius = 6.27;\n    self.clipsToBounds = YES;\n\n    [imageView layoutIfNeeded];\n    [self layoutIfNeeded];\n}\n\n@end\n')),(0,o.kt)("p",null,"Let's break down what is happening here. Our custom ",(0,o.kt)("inlineCode",{parentName:"p"},"UICollectionViewCell")," class declares 3 UI elements that will be displayed in the list.\n",(0,o.kt)("strong",{parentName:"p"},"To simplify the whole example"),", the size of the cell is fixed and defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"initWithFrame:"),' initializer.\nThose UI elements are set up and "bound" to the data inside ',(0,o.kt)("inlineCode",{parentName:"p"},"setupCellWithItem:placeholderImage:"),".\nTo position elements inside the cell, we will leverage layout constraints - for more on that, visit ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/nslayoutanchor?language=objc"},"Auto Layout anchors section")," in Apple's docs.\nThe last piece of code is ",(0,o.kt)("inlineCode",{parentName:"p"},"prepareForReuse")," method where elements are cleaned up when cell is being recycled."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"For learning purposes"),", we only use system images/icons for the image view.\nAfter completing this guide, you can work on enhancing the experience by using remote images with e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SDWebImage/SDWebImage"},"SDWebImage library"),".")))}V.isMDXComponent=!0;const g={toc:[{value:"<code>RNNativeListViewViewController.h</code>",id:"rnnativelistviewviewcontrollerh",level:4},{value:"<code>RNNativeListViewViewController.mm</code>",id:"rnnativelistviewviewcontrollermm",level:4}]},f="wrapper";function I(e){let{components:n,...t}=e;return(0,o.kt)(f,(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewviewcontrollerh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewViewController.h")),(0,o.kt)("p",null,"Next step is to create custom view controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewViewController.h"',title:'"ios/RNNativeListViewViewController.h"'},'#import <UIKit/UIKit.h>\n\n#import "DataItem.h"\n\n@interface RNNativeListViewViewController : UIViewController\n\n@property (nonatomic, copy) NSArray<DataItem *> * _Nonnull data;\n@property (nonatomic, copy) NSString * _Nonnull placeholderImage;\n@property (nonatomic, strong) UIColor * _Nullable backgroundColor;\n\n- (void)scrollToItem:(NSInteger)index;\n\n@end\n')),(0,o.kt)("p",null,"Let's start by defining custom class that extends base ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uiviewcontroller?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UIViewController")),"."),(0,o.kt)("h4",{id:"rnnativelistviewviewcontrollermm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewViewController.mm")),(0,o.kt)("p",null,"After declaring the header interface, let's create implementation for view controller class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewViewController.mm"',title:'"ios/RNNativeListViewViewController.mm"'},'#import <UIKit/UIKit.h>\n\n#import "RNNativeListViewViewController.h"\n#import "NativeListCell.h"\n\n@implementation RNNativeListViewViewController {\n    NSInteger NUM_OF_COLUMNS;\n    UICollectionView * _Nullable collectionView;\n    UICollectionViewFlowLayout *layout;\n}\n\n+ (NSString *)cellIdentifier\n{\n    return @"MyCell";\n}\n\n- (instancetype)init\n{\n    self = [super initWithNibName:nil bundle:nil];\n    if (self) {\n        NUM_OF_COLUMNS = 3;\n        layout = [UICollectionViewFlowLayout new];\n        layout.sectionInset = UIEdgeInsetsMake(20, 10, 10, 10);\n        layout.minimumLineSpacing = 10;\n        layout.minimumInteritemSpacing = 10;\n    }\n    return self;\n}\n\n- (void)setData:(NSArray<DataItem *> *)data\n{\n    _data = data;\n    if (collectionView != nil) {\n        [collectionView reloadData];\n    }\n}\n\n- (UIColor *)backgroundColor\n{\n    return self.view.backgroundColor;\n}\n\n- (void)setBackgroundColor:(UIColor *)backgroundColor\n{\n    [self.view setBackgroundColor:backgroundColor];\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    if (collectionView != nil) {\n        [collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:index inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredVertically animated:YES];\n    }\n}\n\n@end\n')),(0,o.kt)("p",null,"It has private fields that hold ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewFlowLayout"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionview?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionView"))," instances.\nTo handle JS props it also declares public properties (also exported to Objective-C code). And there's ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem:")," method which handles our scroll command."),(0,o.kt)("p",null,"Next step is to extend the class with ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewdatasource?language=objc"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewDataSource"))," protocol:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewViewController.mm"',title:'"ios/RNNativeListViewViewController.mm"'},'#import <UIKit/UIKit.h>\n\n#import "RNNativeListViewViewController.h"\n#import "NativeListCell.h"\n\n// highlight-start\n@interface RNNativeListViewViewController () <UICollectionViewDataSource>\n@end\n// highlight-end\n\n@implementation RNNativeListViewViewController {\n    NSInteger NUM_OF_COLUMNS;\n    UICollectionView * _Nullable collectionView;\n    UICollectionViewFlowLayout *layout;\n}\n\n// ...\n\n// highlight-start\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section\n{\n    return _data.count;\n}\n\n- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    NativeListCell *myCell = (NativeListCell *)[collectionView dequeueReusableCellWithReuseIdentifier:[RNNativeListViewViewController cellIdentifier] forIndexPath:indexPath];\n    DataItem *item = _data[indexPath.item];\n    [myCell setupCellWithItem:item placeholderImage:_placeholderImage];\n    return myCell;\n}\n\n- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView\n{\n    return 1;\n}\n// highlight-end\n\n@end\n')),(0,o.kt)("p",null,"With that extension, we declare details about items count, sections count (in that case we don't split data in sections, so we return 1) and the item that is rendered in specific column & row.\nYou can take a look at the latter method - ",(0,o.kt)("inlineCode",{parentName:"p"},"collectionView:cellForItemAtIndexPath:")," - it gets new or recycled cell for a specific column & row and bounds it to data item (via ",(0,o.kt)("inlineCode",{parentName:"p"},"setupCellWithItem:placeholderImage:")," method that we defined earlier on the cell instance)."),(0,o.kt)("p",null,"The last step is to handle mounting/unmounting our list element when the view controller is displayed or disappears:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewViewController.mm"',title:'"ios/RNNativeListViewViewController.mm"'},"// ...\n\n@implementation RNNativeListViewViewController {\n    NSInteger NUM_OF_COLUMNS;\n    UICollectionView * _Nullable collectionView;\n    UICollectionViewFlowLayout *layout;\n}\n\n// ...\n\n- (instancetype)init\n{\n    self = [super initWithNibName:nil bundle:nil];\n    if (self) {\n        NUM_OF_COLUMNS = 3;\n        layout = [UICollectionViewFlowLayout new];\n        layout.sectionInset = UIEdgeInsetsMake(20, 10, 10, 10);\n        layout.minimumLineSpacing = 10;\n        layout.minimumInteritemSpacing = 10;\n    }\n    return self;\n}\n\n// highlight-start\n- (void)viewWillLayoutSubviews\n{\n    [super viewWillLayoutSubviews];\n\n    if (collectionView == nil) {\n        return;\n    }\n\n    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)collectionView.collectionViewLayout;\n    if (layout == nil) {\n        return;\n    }\n\n    CGFloat sectionInsetMargins = layout.sectionInset.left + layout.sectionInset.right;\n    CGFloat safeAreaMargins = collectionView.safeAreaInsets.left + collectionView.safeAreaInsets.right;\n    CGFloat marginsAndInsets = sectionInsetMargins + safeAreaMargins + layout.minimumInteritemSpacing * (CGFloat)(NUM_OF_COLUMNS - 1);\n    CGFloat itemWidth = (collectionView.bounds.size.width - marginsAndInsets) / (CGFloat)NUM_OF_COLUMNS;\n    [layout setItemSize:CGSizeMake(itemWidth, itemWidth)];\n}\n\n- (void)didMoveToParentViewController:(UIViewController *)parent\n{\n    if (parent != nil) {\n        UICollectionView *newCollectionView = [[UICollectionView alloc] initWithFrame:self.view.frame collectionViewLayout:layout];\n        newCollectionView.dataSource = self;\n        [newCollectionView registerClass:[NativeListCell class] forCellWithReuseIdentifier:[RNNativeListViewViewController cellIdentifier]];\n        [newCollectionView setBackgroundColor:[[UIColor alloc] initWithWhite:1 alpha:0]];\n\n        collectionView = newCollectionView;\n        [self.view addSubview:collectionView];\n        \n        collectionView.translatesAutoresizingMaskIntoConstraints = NO;\n        [NSLayoutConstraint activateConstraints:@[\n            [collectionView.topAnchor constraintEqualToAnchor:self.view.topAnchor],\n            [collectionView.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor],\n            [collectionView.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor],\n            [collectionView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor]\n        ]];\n    }\n}\n\n- (void)willMoveToParentViewController:(UIViewController *)parent\n{\n    if (parent == nil) {\n        [collectionView removeFromSuperview];\n        collectionView = nil;\n    }\n}\n// highlight-end\n\n- (void)setData:(NSArray<DataItem *> *)data\n{\n    _data = data;\n    if (collectionView != nil) {\n        [collectionView reloadData];\n    }\n}\n\n// ...\n\n@end\n")),(0,o.kt)("p",null,"Three methods on our view controller are overriden here."),(0,o.kt)("p",null,"Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"didMoveToParentViewController:"),", when the view controller is mounted, the ",(0,o.kt)("inlineCode",{parentName:"p"},"UICollectionView")," instance is created with the flow layout.\nIt has ",(0,o.kt)("inlineCode",{parentName:"p"},"NativeListCell")," class registered, its ",(0,o.kt)("inlineCode",{parentName:"p"},"dataSource")," field is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"self")," and the collection view position inside view controller is set."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"willMoveToParentViewController:")," is used to do the cleanup (when the view controller is unmounted) - the collection view is unmounted and garbage collected."),(0,o.kt)("p",null,"Third method (",(0,o.kt)("inlineCode",{parentName:"p"},"viewWillLayoutSubviews"),") is used to declare the item size based on the width of the list element and number of columns (",(0,o.kt)("strong",{parentName:"p"},"to simplify the example"),", it's set to 3 - after finishing the guide if you want, you can think how to make it dynamic and controlled from JS code)."),(0,o.kt)(l.ZP,{filename:"RNNativeListViewViewController.mm",language:"objc",mdxType:"CompleteFile"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#import <UIKit/UIKit.h>\n\n#import "RNNativeListViewViewController.h"\n#import "NativeListCell.h"\n\n@interface RNNativeListViewViewController () <UICollectionViewDataSource>\n@end\n\n@implementation RNNativeListViewViewController {\n    NSInteger NUM_OF_COLUMNS;\n    UICollectionView * _Nullable collectionView;\n    UICollectionViewFlowLayout *layout;\n}\n\n+ (NSString *)cellIdentifier\n{\n    return @"MyCell";\n}\n\n- (instancetype)init\n{\n    self = [super initWithNibName:nil bundle:nil];\n    if (self) {\n        NUM_OF_COLUMNS = 3;\n        layout = [UICollectionViewFlowLayout new];\n        layout.sectionInset = UIEdgeInsetsMake(20, 10, 10, 10);\n        layout.minimumLineSpacing = 10;\n        layout.minimumInteritemSpacing = 10;\n    }\n    return self;\n}\n\n- (void)viewWillLayoutSubviews\n{\n    [super viewWillLayoutSubviews];\n\n    if (collectionView == nil) {\n        return;\n    }\n\n    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)collectionView.collectionViewLayout;\n    if (layout == nil) {\n        return;\n    }\n\n    CGFloat sectionInsetMargins = layout.sectionInset.left + layout.sectionInset.right;\n    CGFloat safeAreaMargins = collectionView.safeAreaInsets.left + collectionView.safeAreaInsets.right;\n    CGFloat marginsAndInsets = sectionInsetMargins + safeAreaMargins + layout.minimumInteritemSpacing * (CGFloat)(NUM_OF_COLUMNS - 1);\n    CGFloat itemWidth = (collectionView.bounds.size.width - marginsAndInsets) / (CGFloat)NUM_OF_COLUMNS;\n    [layout setItemSize:CGSizeMake(itemWidth, itemWidth)];\n}\n\n- (void)didMoveToParentViewController:(UIViewController *)parent\n{\n    if (parent != nil) {\n        UICollectionView *newCollectionView = [[UICollectionView alloc] initWithFrame:self.view.frame collectionViewLayout:layout];\n        newCollectionView.dataSource = self;\n        [newCollectionView registerClass:[NativeListCell class] forCellWithReuseIdentifier:[RNNativeListViewViewController cellIdentifier]];\n        [newCollectionView setBackgroundColor:[[UIColor alloc] initWithWhite:1 alpha:0]];\n\n        collectionView = newCollectionView;\n        [self.view addSubview:collectionView];\n        \n        collectionView.translatesAutoresizingMaskIntoConstraints = NO;\n        [NSLayoutConstraint activateConstraints:@[\n            [collectionView.topAnchor constraintEqualToAnchor:self.view.topAnchor],\n            [collectionView.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor],\n            [collectionView.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor],\n            [collectionView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor]\n        ]];\n    }\n}\n\n- (void)willMoveToParentViewController:(UIViewController *)parent\n{\n    if (parent == nil) {\n        [collectionView removeFromSuperview];\n        collectionView = nil;\n    }\n}\n\n- (void)setData:(NSArray<DataItem *> *)data\n{\n    _data = data;\n    if (collectionView != nil) {\n        [collectionView reloadData];\n    }\n}\n\n- (UIColor *)backgroundColor\n{\n    return self.view.backgroundColor;\n}\n\n- (void)setBackgroundColor:(UIColor *)backgroundColor\n{\n    [self.view setBackgroundColor:backgroundColor];\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    if (collectionView != nil) {\n        [collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:index inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredVertically animated:YES];\n    }\n}\n\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section\n{\n    return _data.count;\n}\n\n- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    NativeListCell *myCell = (NativeListCell *)[collectionView dequeueReusableCellWithReuseIdentifier:[RNNativeListViewViewController cellIdentifier] forIndexPath:indexPath];\n    DataItem *item = _data[indexPath.item];\n    [myCell setupCellWithItem:item placeholderImage:_placeholderImage];\n    return myCell;\n}\n\n- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView\n{\n    return 1;\n}\n\n@end\n'))))}I.isMDXComponent=!0;const k={toc:[{value:"<code>RNNativeListViewManager.h</code>",id:"rnnativelistviewmanagerh",level:4},{value:"<code>RNNativeListViewManager.mm</code>",id:"rnnativelistviewmanagermm",level:4}]},R="wrapper";function L(e){let{components:n,...t}=e;return(0,o.kt)(R,(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewmanagerh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewManager.h")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="RNNativeListViewManager.h"',title:'"RNNativeListViewManager.h"'},"#import <React/RCTUIManager.h>\n#import <React/RCTViewManager.h>\n\n@interface RNNativeListViewManager : RCTViewManager\n\n@end\n")),(0,o.kt)("p",null,"We declare the view manager class that extends RCTViewManager. One thing you may have noticed is RCTUIManager import - we will use it to implement native commands for the old architecture view."),(0,o.kt)("h4",{id:"rnnativelistviewmanagermm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewManager.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="RNNativeListViewManager.mm"',title:'"RNNativeListViewManager.mm"'},'#import "RNNativeListViewManager.h"\n\n#import <React/RCTConvert.h>\n\n#import "RNNativeListClassicViewContainerView.h"\n#import "RNNativeListClassicViewViewController.h"\n\n@implementation RNNativeListViewManager\n\nRCT_EXPORT_MODULE(RNNativeListView)\n\nRCT_CUSTOM_VIEW_PROPERTY(data, NSArray, RNNativeListViewContainerView)\n{\n    NSArray<NSDictionary *> *array = [RCTConvert NSDictionaryArray:json];\n    NSMutableArray<DataItem *> *data = [NSMutableArray arrayWithCapacity:array.count];\n    for (int i = 0; i < array.count; i++) {\n        [data addObject:[[DataItem alloc] initWithImageUrl:array[i][@"imageUrl"] itemDescription:array[i][@"description"]]];\n    }\n    [view.viewController setData:data];\n}\nRCT_CUSTOM_VIEW_PROPERTY(options, NSDictionary, RNNativeListViewContainerView)\n{\n    [view.viewController setPlaceholderImage:[RCTConvert NSString:json[@"placeholderImage"]]];\n}\nRCT_CUSTOM_VIEW_PROPERTY(backgroundColor, UIColor, RNNativeListViewContainerView)\n{\n    [view.viewController setBackgroundColor:[RCTConvert UIColor:json]];\n}\n\n#if RCT_NEW_ARCH_ENABLED\n#else\nRCT_EXPORT_METHOD(scrollToItem:(nonnull NSNumber*) reactTag index:(NSInteger) index) {\n    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {\n        UIView *view = viewRegistry[reactTag];\n        if (!view || ![view isKindOfClass:[RNNativeListViewContainerView class]]) {\n            return;\n        }\n        [((RNNativeListViewContainerView *) view).viewController scrollToItem:index];\n    }];\n}\n\n- (UIView *)view\n{\n    RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n    view.viewController = [RNNativeListViewViewController new];\n    return view;\n}\n#endif\n\n@end\n')),(0,o.kt)("p",null,"And as for every view manager class, we start with ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_MODULE")," macro and we declare exported properties with ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_VIEW_PROPERTY")," macro."),(0,o.kt)("p",null,"For the old architecture mode, we have to additionaly declare native command for ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem")," method (using ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_METHOD")," macro and ",(0,o.kt)("inlineCode",{parentName:"p"},"RCTUIManager")," class)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"view")," getter is also declared for the old arch - for new arch we are just using Fabric component view."))}L.isMDXComponent=!0;const b={toc:[]},y="wrapper";function S(e){let{components:n,...t}=e;return(0,o.kt)(y,(0,i.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(v,{mdxType:"IosObjCDataItem"}),(0,o.kt)(V,{mdxType:"IosObjCListCell"}),(0,o.kt)(I,{mdxType:"IosObjCViewController"}),(0,o.kt)(d,{mdxType:"IosObjCContainerView"}),(0,o.kt)(L,{mdxType:"IosObjCViewManager"}),(0,o.kt)(p,{mdxType:"IosObjCComponentView"}))}S.isMDXComponent=!0;const T={toc:[{value:"<code>RNNativeListViewComponentView.h</code>",id:"rnnativelistviewcomponentviewh",level:4},{value:"<code>RNNativeListViewComponentView.mm</code>",id:"rnnativelistviewcomponentviewmm",level:4}]},P="wrapper";function U(e){let{components:n,...t}=e;return(0,o.kt)(P,(0,i.Z)({},T,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewcomponentviewh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewComponentView.h")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.h"',title:'"ios/RNNativeListViewComponentView.h"'},"#if RCT_NEW_ARCH_ENABLED\n#import <React/RCTViewComponentView.h>\n\n@class RNNativeListViewContainerView;\n@class RNNativeListViewViewController;\n\n@interface RNNativeListViewComponentView : RCTViewComponentView\n\n@end\n\n#endif\n")),(0,o.kt)("p",null,"Inside the header file for Fabric component, we declare the ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewComponentView")," class that extends ",(0,o.kt)("inlineCode",{parentName:"p"},"RCTViewComponentView"),'.\nAdditionally, we make "forward-declaration" for ',(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewViewController")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewContainerView")," classes (check out Apple's Swift-ObjC interop ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/swift/importing-swift-into-objective-c#Include-Swift-Classes-in-Objective-C-Headers-Using-Forward-Declarations"},"dedicated docs section"),")."),(0,o.kt)("h4",{id:"rnnativelistviewcomponentviewmm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewComponentView.mm")),(0,o.kt)("p",null,"The boilerplate for Fabric component's implementation part will look like following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},'#if RCT_NEW_ARCH_ENABLED\n#import "RNNativeListViewComponentView.h"\n\n#import <React/RCTConversions.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n\n#import <react/renderer/components/NativeListPackage/ComponentDescriptors.h>\n#import <react/renderer/components/NativeListPackage/EventEmitters.h>\n#import <react/renderer/components/NativeListPackage/Props.h>\n#import <react/renderer/components/NativeListPackage/RCTComponentViewHelpers.h>\n\n#import "RCTFabricComponentsPlugins.h"\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    //\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\nClass<RCTComponentViewProtocol> RNNativeListViewCls(void)\n{\n    return RNNativeListViewComponentView.class;\n}\n#endif\n')),(0,o.kt)("p",null,"At the top there are new arch imports and conversion helpers.\nThe component extends code-generated protocol that declare the native commands methods from the JS spec.\nNext we implement all required methods and create ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewCls")," function."),(0,o.kt)("p",null,"As a next part, let's initialize the container view with our view controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},'//...\n\n// highlight-start\n#import "NativeListPackage-Swift.h"\n// highlight-end\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n// highlight-start\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n// highlight-end\n    }\n\n    return self;\n}\n\n// ...\n\n@end\n\n// ...\n')),(0,o.kt)("p",null,"Next step is props handling:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},"//...\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n// highlight-start\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n\n    auto dataComparator = [](const RNNativeListViewDataStruct &left, const RNNativeListViewDataStruct &right) {\n        return left.imageUrl == right.imageUrl && left.description == right.description;\n    };\n    \n    if (!std::equal(oldViewProps.data.begin(), oldViewProps.data.end(), newViewProps.data.begin(), newViewProps.data.end(), dataComparator)) {\n        NSArray *data = RCTConvertVecToArray(newViewProps.data, ^(RNNativeListViewDataStruct item){\n            DataItem *dataItem = [[DataItem alloc] initWithImageUrl:RCTNSStringFromString(item.imageUrl) itemDescription:RCTNSStringFromString(item.description)];\n            return dataItem;\n        });\n        [view.viewController setData:data];\n    }\n    \n    if (oldViewProps.options.placeholderImage != newViewProps.options.placeholderImage) {\n        [view.viewController setPlaceholderImage:RCTNSStringFromString(newViewProps.options.placeholderImage)];\n    }\n\n    if (oldViewProps.backgroundColor != newViewProps.backgroundColor) {\n        UIColor *backgroundColor = RCTUIColorFromSharedColor(newViewProps.backgroundColor);\n        [view.viewController setBackgroundColor:backgroundColor];\n    }\n// highlight-end\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n// ...\n\n@end\n\n// ...\n")),(0,o.kt)("p",null,"Here we are handling 3 props - ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"options.placeholderImage")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop is quite interesting, it's array, so we need to compare the old and new value of that array.\nTo do that in Objective-C++, we will use C++ ",(0,o.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/algorithm/equal"},(0,o.kt)("inlineCode",{parentName:"a"},"std::equal"))," function.\nIt takes the ranges of arrays and comparator function that we declare under ",(0,o.kt)("inlineCode",{parentName:"p"},"dataComparator")," variable."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To learn more about anonymous function in C++ check ",(0,o.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/lambda"},"Lambda expressions")," section in C++ reference")),(0,o.kt)("p",null,"The last thing left is to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem:")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/RNNativeListViewComponentView.mm"',title:'"ios/RNNativeListViewComponentView.mm"'},"//...\n\n@implementation RNNativeListViewComponentView\n\n//...\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n// highlight-start\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n    [view.viewController scrollToItem:index];\n// highlight-end\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\n// ...\n")),(0,o.kt)(l.ZP,{filename:"RNNativeListViewComponentView.mm",language:"objc",mdxType:"CompleteFile"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#if RCT_NEW_ARCH_ENABLED\n#import "RNNativeListViewComponentView.h"\n\n#import <React/RCTConversions.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n\n#import <react/renderer/components/NativeListPackage/ComponentDescriptors.h>\n#import <react/renderer/components/NativeListPackage/EventEmitters.h>\n#import <react/renderer/components/NativeListPackage/Props.h>\n#import <react/renderer/components/NativeListPackage/RCTComponentViewHelpers.h>\n\n#import "RCTFabricComponentsPlugins.h"\n\n#import "NativeListPackage-Swift.h"\n\nusing namespace facebook::react;\n\n@interface RNNativeListViewComponentView () <RCTRNNativeListViewViewProtocol>\n@end\n\n@implementation RNNativeListViewComponentView\n\n- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        static const auto defaultProps = std::make_shared<const RNNativeListViewProps>();\n        _props = defaultProps;\n\n        RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n        view.viewController = [RNNativeListViewViewController new];\n\n        self.contentView = view;\n    }\n\n    return self;\n}\n\n- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const RNNativeListViewProps>(props);\n\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n\n    auto dataComparator = [](const RNNativeListViewDataStruct &left, const RNNativeListViewDataStruct &right) {\n        return left.imageUrl == right.imageUrl && left.description == right.description;\n    };\n    \n    if (!std::equal(oldViewProps.data.begin(), oldViewProps.data.end(), newViewProps.data.begin(), newViewProps.data.end(), dataComparator)) {\n        NSArray *data = RCTConvertVecToArray(newViewProps.data, ^(RNNativeListViewDataStruct item){\n            DataItem *dataItem = [[DataItem alloc] initWithImageUrl:RCTNSStringFromString(item.imageUrl) itemDescription:RCTNSStringFromString(item.description)];\n            return dataItem;\n        });\n        [view.viewController setData:data];\n    }\n    \n    if (oldViewProps.options.placeholderImage != newViewProps.options.placeholderImage) {\n        [view.viewController setPlaceholderImage:RCTNSStringFromString(newViewProps.options.placeholderImage)];\n    }\n\n    if (oldViewProps.backgroundColor != newViewProps.backgroundColor) {\n        UIColor *backgroundColor = RCTUIColorFromSharedColor(newViewProps.backgroundColor);\n        [view.viewController setBackgroundColor:backgroundColor];\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n\n- (void)handleCommand:(const NSString *)commandName args:(const NSArray *)args\n{\n    RCTRNNativeListViewHandleCommand(self, commandName, args);\n}\n\n- (void)scrollToItem:(NSInteger)index\n{\n    RNNativeListViewContainerView *view = (RNNativeListViewContainerView *)self.contentView;\n    [view.viewController scrollToItem:index];\n}\n\n+ (ComponentDescriptorProvider)componentDescriptorProvider\n{\n    return concreteComponentDescriptorProvider<RNNativeListViewComponentDescriptor>();\n}\n\n@end\n\nClass<RCTComponentViewProtocol> RNNativeListViewCls(void)\n{\n    return RNNativeListViewComponentView.class;\n}\n#endif\n'))))}U.isMDXComponent=!0;const A={toc:[{value:"<code>RNNativeListViewContainerView.swift</code>",id:"rnnativelistviewcontainerviewswift",level:4}]},D="wrapper";function _(e){let{components:n,...t}=e;return(0,o.kt)(D,(0,i.Z)({},A,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewcontainerviewswift"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewContainerView.swift")),(0,o.kt)("p",null,"Next step is to embed the view controller inside bridged view.\nIn order to handle such case, we will use container view, that will hold the underlying view of our view controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/RNNativeListViewContainerView.swift"',title:'"ios/RNNativeListViewContainerView.swift"'},"import UIKit\n\n@objc(RNNativeListViewContainerView)\npublic class RNNativeListViewContainerView : UIView {\n    private var internalViewController: RNNativeListViewViewController? = nil\n\n    @objc public var viewController: RNNativeListViewViewController? {\n        get {\n            return internalViewController\n        }\n        set(newViewController) {\n            unmountViewController()\n            self.internalViewController = newViewController\n            if newViewController != nil {\n                mountViewController()\n            }\n        }\n    }\n\n    override public func removeFromSuperview() {\n        unmountViewController()\n        super.removeFromSuperview()\n    }\n\n    override public func willMove(toWindow window: UIWindow?) {\n        if window == nil {\n            unmountViewController()\n        } else {\n            mountViewController()\n        }\n    }\n\n    private func mountViewController() {\n        guard let viewController = viewController else {\n            return\n        }\n\n        if viewController.parent != nil {\n            return\n        }\n\n        guard let reactViewController = self.reactViewController() else {\n            return\n        }\n\n        reactViewController.addChild(viewController)\n        self.addSubview(viewController.view)\n        \n        viewController.view.translatesAutoresizingMaskIntoConstraints = false;\n        NSLayoutConstraint.activate([\n            viewController.view.topAnchor.constraint(equalTo: self.topAnchor),\n            viewController.view.leadingAnchor.constraint(equalTo: self.leadingAnchor),\n            viewController.view.trailingAnchor.constraint(equalTo: self.trailingAnchor),\n            viewController.view.bottomAnchor.constraint(equalTo: self.bottomAnchor)\n        ])\n        \n        viewController.didMove(toParent: reactViewController)\n    }\n\n    private func unmountViewController() {\n        guard let viewController = viewController else {\n            return\n        }\n\n        if viewController.parent == nil {\n            return\n        }\n\n        viewController.willMove(toParent: nil)\n        viewController.view.removeFromSuperview()\n        viewController.removeFromParent()\n    }\n}\n")),(0,o.kt)("p",null,"The container view is a subclass of ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uiview"},(0,o.kt)("inlineCode",{parentName:"a"},"UIView"))," that is exported to Objective-C code.\nIt has ",(0,o.kt)("inlineCode",{parentName:"p"},"viewController")," property, which is mounted or unmounted at the same time when the container view is.\nYou can take a look at ",(0,o.kt)("inlineCode",{parentName:"p"},"mountViewController")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"unmountViewController")," methods.\nThese are the places where our custom view controller has its lifecycle synchronized with the container view (",(0,o.kt)("inlineCode",{parentName:"p"},"viewController.didMove(toParent: reactViewController)")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"viewController.willMove(toParent: nil)"),").\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"self.reactViewController()")," returns a parent view controller that holds the container view and will hold our custom view controller.\nThe view of the ",(0,o.kt)("inlineCode",{parentName:"p"},"RNNativeListViewViewController")," is also positioned with layout constraints."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you plan to bridge multiple custom view controllers, the container view part can be refactored to be more generic and shared for all possible view controllers.")),(0,o.kt)("p",null,"Now let's connect everything inside view manager and Fabric component view."))}_.isMDXComponent=!0;const M={toc:[{value:"<code>DataItem.swift</code>",id:"dataitemswift",level:4}]},x="wrapper";function F(e){let{components:n,...t}=e;return(0,o.kt)(x,(0,i.Z)({},M,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"dataitemswift"},(0,o.kt)("inlineCode",{parentName:"h4"},"DataItem.swift")),(0,o.kt)("p",null,"Let's start by defining ",(0,o.kt)("inlineCode",{parentName:"p"},"DataItem")," object which will be used to hold items passed from JS code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/DataItem.swift"',title:'"ios/DataItem.swift"'},'import Foundation\n\n@objc(DataItem)\npublic class DataItem: NSObject {\n    @objc public var imageUrl: String = ""\n    @objc public var itemDescription: String = ""\n    \n    @objc public init(imageUrl: String, itemDescription: String) {\n        self.imageUrl = imageUrl\n        self.itemDescription = itemDescription\n    }\n}\n')),(0,o.kt)("p",null,"The class (that extends from ",(0,o.kt)("inlineCode",{parentName:"p"},"NSObject"),") defines two string fields and is exported to Objective-C - we will use it later when parsing ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop in Objective-C++ code."))}F.isMDXComponent=!0;const E={toc:[{value:"<code>NativeListCell.swift</code>",id:"nativelistcellswift",level:4}]},O="wrapper";function W(e){let{components:n,...t}=e;return(0,o.kt)(O,(0,i.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"nativelistcellswift"},(0,o.kt)("inlineCode",{parentName:"h4"},"NativeListCell.swift")),(0,o.kt)("p",null,"To use native lists in iOS, the rows or cells needs to be defined as custom classes that extends dedicated UIKit classes - in this case ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewcell"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewCell")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/NativeListCell.swift"',title:'"ios/NativeListCell.swift"'},'import UIKit\n\nclass NativeListCell: UICollectionViewCell {\n    private var container = UIStackView()\n    private var imageView = UIImageView()\n    private var label = UILabel()\n    \n    override init(frame: CGRect) {\n        super.init(frame: CGRect(x: 0, y: 0, width: 100, height: 100))\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError("init(coder:) has not been implemented")\n    }\n    \n    override func prepareForReuse() {\n        super.prepareForReuse()\n        container.removeArrangedSubview(imageView)\n        container.removeArrangedSubview(label)\n        container.removeFromSuperview()\n        imageView.image = nil\n    }\n    \n    func setupCell(with item: DataItem, placeholderImage: String) {\n        label.text = item.itemDescription\n        label.font = .systemFont(ofSize: 10)\n        label.textAlignment = .center\n        \n        imageView.image = UIImage(systemName: placeholderImage)\n\n        container.axis = .vertical\n        container.spacing = 10\n        container.addArrangedSubview(imageView)\n        container.addArrangedSubview(label)\n        self.addSubview(container)\n\n        label.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: container.centerXAnchor),\n            label.widthAnchor.constraint(equalToConstant: 100),\n            label.heightAnchor.constraint(equalToConstant: 20)\n        ])\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            imageView.widthAnchor.constraint(equalToConstant: 100),\n            imageView.heightAnchor.constraint(equalToConstant: 70)\n        ])\n\n        container.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            container.centerXAnchor.constraint(equalTo: self.centerXAnchor),\n            container.centerYAnchor.constraint(equalTo: self.centerYAnchor),\n            container.widthAnchor.constraint(equalToConstant: 100),\n            container.heightAnchor.constraint(equalToConstant: 100)\n        ])\n\n        self.backgroundColor = UIColor.init(red: 137 / 255, green: 204 / 255, blue: 101 / 255, alpha: 1)\n        self.layer.borderColor = UIColor.blue.cgColor\n        self.layer.borderWidth = 1\n        self.layer.cornerRadius = 10\n        self.layer.masksToBounds = true\n        self.layer.shadowColor = UIColor.black.cgColor\n        self.layer.shadowOffset = CGSize(width: 0, height: 5)\n        self.layer.shadowOpacity = 0.34\n        self.layer.shadowRadius = 6.27\n        self.clipsToBounds = true\n\n        imageView.layoutIfNeeded()\n        self.layoutIfNeeded()\n    }\n}\n')),(0,o.kt)("p",null,"Let's break down what is happening here. Our custom ",(0,o.kt)("inlineCode",{parentName:"p"},"UICollectionViewCell")," class declares 3 UI elements that will be displayed in the list.\n",(0,o.kt)("strong",{parentName:"p"},"To simplify"),", the size of the cell is fixed and defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"init(frame:)"),' initializer.\nThose UI elements are set up and "bound" to the data inside ',(0,o.kt)("inlineCode",{parentName:"p"},"setupCell(with:placeholderImage:)"),".\nTo position elements inside the cell, we will leverage layout constraints - for more on that, visit ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/nslayoutanchor"},"Auto Layout anchors section")," in Apple's docs.\nThe last piece of code is ",(0,o.kt)("inlineCode",{parentName:"p"},"prepareForReuse")," method where elements are cleaned up when cell is being recycled. "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"For learning purposes"),", we only use system images/icons for the image view.\nAfter completing this guide, you can work on enhancing the experience by using remote images with e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SDWebImage/SDWebImage"},"SDWebImage library"),".")))}W.isMDXComponent=!0;const j={toc:[{value:"<code>RNNativeListViewViewController.swift</code>",id:"rnnativelistviewviewcontrollerswift",level:4}]},q="wrapper";function X(e){let{components:n,...t}=e;return(0,o.kt)(q,(0,i.Z)({},j,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewviewcontrollerswift"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewViewController.swift")),(0,o.kt)("p",null,"Next step is to create custom view controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/RNNativeListViewViewController.swift"',title:'"ios/RNNativeListViewViewController.swift"'},'import UIKit\n\n@objc(RNNativeListViewViewController)\npublic class RNNativeListViewViewController : UIViewController {\n    private static let CELL_IDENTIFIER = "MyCell"\n    private let NUM_OF_COLUMNS = 3\n    private var collectionView: UICollectionView? = nil\n    private var layout: UICollectionViewFlowLayout = {\n        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()\n        layout.sectionInset = UIEdgeInsets(top: 20, left: 10, bottom: 10, right: 10)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        return layout\n    }()\n\n    @objc public var data: Array<DataItem> = [] {\n        didSet {\n            self.collectionView?.reloadData()\n        }\n    }\n\n    @objc public var backgroundColor: UIColor? {\n        get {\n            return self.view.backgroundColor\n        }\n        set(newBackgroundColor) {\n            self.view.backgroundColor = newBackgroundColor\n        }\n    }\n    \n    @objc public var placeholderImage: String = ""\n    \n    @objc public func scrollToItem(_ index: Int) {\n        self.collectionView?.scrollToItem(at: IndexPath(item: index, section: 0), at: .centeredVertically, animated: true)\n    }\n}\n')),(0,o.kt)("p",null,"Let's start by defining custom class that extends base ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uiviewcontroller/"},(0,o.kt)("inlineCode",{parentName:"a"},"UIViewController"))," and is exported to Objective-C code.\nIt has private fields that hold ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout/"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewFlowLayout"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionview/"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionView"))," instances.\nTo handle JS props it also declares public properties (also exported to Objective-C code). And there's ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem:")," method which handles our scroll command."),(0,o.kt)("p",null,"Next step is to extend the class with ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uicollectionviewdatasource"},(0,o.kt)("inlineCode",{parentName:"a"},"UICollectionViewDataSource"))," protocol:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/RNNativeListViewViewController.swift"',title:'"ios/RNNativeListViewViewController.swift"'},"import UIKit\n\n// highlight-start\nextension RNNativeListViewViewController : UICollectionViewDataSource {\n    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return self.data.count\n    }\n    \n    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let myCell = collectionView.dequeueReusableCell(withReuseIdentifier: RNNativeListViewViewController.CELL_IDENTIFIER, for: indexPath) as! NativeListCell\n        let item = self.data[indexPath.item]\n        myCell.setupCell(with: item, placeholderImage: placeholderImage)\n        return myCell\n    }\n    \n    public func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n}\n// highlight-end\n\n@objc(RNNativeListViewViewController)\npublic class RNNativeListViewViewController : UIViewController {\n    // ...\n}\n")),(0,o.kt)("p",null,"Inside that extension, we declare details about items count, sections count (in that case we don't split data in sections, so we return 1) and the item that is rendered in specific column & row.\nYou can take a look at the latter method - ",(0,o.kt)("inlineCode",{parentName:"p"},"collectionView(:cellForItemAt:)")," - it gets new or recycled cell for a specific column & row and bounds it to data item (via ",(0,o.kt)("inlineCode",{parentName:"p"},"setupCell(with:placeholderImage:)")," method that we defined earlier on the cell instance)."),(0,o.kt)("p",null,"The last step is to handle mounting/unmounting our list element when the view controller is displayed or disappears:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="ios/RNNativeListViewViewController.swift"',title:'"ios/RNNativeListViewViewController.swift"'},'// ...\n\n@objc(RNNativeListViewViewController)\npublic class RNNativeListViewViewController : UIViewController {\n    private static let CELL_IDENTIFIER = "MyCell"\n    private let NUM_OF_COLUMNS = 3\n    private var collectionView: UICollectionView? = nil\n    private var layout: UICollectionViewFlowLayout = {\n        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()\n        layout.sectionInset = UIEdgeInsets(top: 20, left: 10, bottom: 10, right: 10)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        return layout\n    }()\n\n// highlight-start\n    override public func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        \n        guard let collectionView = self.collectionView else {\n            return\n        }\n        \n        guard let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout else {\n            return\n        }\n\n        let sectionInsetMargins = layout.sectionInset.left + layout.sectionInset.right\n        let safeAreaMargins = collectionView.safeAreaInsets.left + collectionView.safeAreaInsets.right\n        let marginsAndInsets = sectionInsetMargins + safeAreaMargins + layout.minimumInteritemSpacing * CGFloat(NUM_OF_COLUMNS - 1)\n        let itemWidth = (collectionView.bounds.size.width - marginsAndInsets) / CGFloat(NUM_OF_COLUMNS)\n        layout.itemSize = CGSize(width: itemWidth, height: itemWidth)\n    }\n    \n    public override func didMove(toParent parent: UIViewController?) {\n        if parent != nil {\n            let collectionView = UICollectionView(frame: self.view.frame, collectionViewLayout: layout)\n            collectionView.dataSource = self\n            collectionView.register(NativeListCell.self, forCellWithReuseIdentifier: RNNativeListViewViewController.CELL_IDENTIFIER)\n            collectionView.backgroundColor = .init(white: 1, alpha: 0)\n            \n            self.collectionView = collectionView\n            self.view.addSubview(collectionView)\n            \n            collectionView.translatesAutoresizingMaskIntoConstraints = false\n            NSLayoutConstraint.activate([\n                collectionView.topAnchor.constraint(equalTo: self.view.topAnchor),\n                collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),\n                collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),\n                collectionView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor)\n            ])\n        }\n    }\n    \n    public override func willMove(toParent parent: UIViewController?) {\n        if parent == nil {\n            self.collectionView?.removeFromSuperview()\n            self.collectionView = nil\n        }\n    }\n// highlight-end\n\n    @objc public var data: Array<DataItem> = [] {\n        didSet {\n            self.collectionView?.reloadData()\n        }\n    }\n\n    @objc public var backgroundColor: UIColor? {\n        get {\n            return self.view.backgroundColor\n        }\n        set(newBackgroundColor) {\n            self.view.backgroundColor = newBackgroundColor\n        }\n    }\n    \n    @objc public var placeholderImage: String = ""\n    \n    @objc public func scrollToItem(_ index: Int) {\n        self.collectionView?.scrollToItem(at: IndexPath(item: index, section: 0), at: .centeredVertically, animated: true)\n    }\n}\n')),(0,o.kt)("p",null,"Three methods on our view controller are overriden here."),(0,o.kt)("p",null,"Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"didMove(toParent:)"),", when the view controller is mounted, the ",(0,o.kt)("inlineCode",{parentName:"p"},"UICollectionView")," instance is created with the flow layout.\nIt has ",(0,o.kt)("inlineCode",{parentName:"p"},"NativeListCell")," class registered, its ",(0,o.kt)("inlineCode",{parentName:"p"},"dataSource")," field is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"self")," and the collection view position inside view controller is set."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"willMove(toParent:)")," is used to do the cleanup (when the view controller is unmounted) - the collection view is unmounted and garbage collected."),(0,o.kt)("p",null,"Third method (",(0,o.kt)("inlineCode",{parentName:"p"},"viewWillLayoutSubviews"),") is used to declare the item size based on the width of the list element and number of columns (",(0,o.kt)("strong",{parentName:"p"},"to simplify the example"),", it's set to 3 - after finishing the guide if you want, you can think how to make it dynamic and controlled from JS code)."),(0,o.kt)(l.ZP,{filename:"RNNativeListViewViewController.swift",language:"swift",mdxType:"CompleteFile"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import UIKit\n\nextension RNNativeListViewViewController : UICollectionViewDataSource {\n    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return self.data.count\n    }\n    \n    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let myCell = collectionView.dequeueReusableCell(withReuseIdentifier: RNNativeListViewViewController.CELL_IDENTIFIER, for: indexPath) as! NativeListCell\n        let item = self.data[indexPath.item]\n        myCell.setupCell(with: item, placeholderImage: placeholderImage)\n        return myCell\n    }\n    \n    public func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n}\n\n@objc(RNNativeListViewViewController)\npublic class RNNativeListViewViewController : UIViewController {\n    private static let CELL_IDENTIFIER = "MyCell"\n    private let NUM_OF_COLUMNS = 3\n    private var collectionView: UICollectionView? = nil\n    private var layout: UICollectionViewFlowLayout = {\n        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()\n        layout.sectionInset = UIEdgeInsets(top: 20, left: 10, bottom: 10, right: 10)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        return layout\n    }()\n\n    override public func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        \n        guard let collectionView = self.collectionView else {\n            return\n        }\n        \n        guard let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout else {\n            return\n        }\n\n        let sectionInsetMargins = layout.sectionInset.left + layout.sectionInset.right\n        let safeAreaMargins = collectionView.safeAreaInsets.left + collectionView.safeAreaInsets.right\n        let marginsAndInsets = sectionInsetMargins + safeAreaMargins + layout.minimumInteritemSpacing * CGFloat(NUM_OF_COLUMNS - 1)\n        let itemWidth = (collectionView.bounds.size.width - marginsAndInsets) / CGFloat(NUM_OF_COLUMNS)\n        layout.itemSize = CGSize(width: itemWidth, height: itemWidth)\n    }\n    \n    public override func didMove(toParent parent: UIViewController?) {\n        if parent != nil {\n            let collectionView = UICollectionView(frame: self.view.frame, collectionViewLayout: layout)\n            collectionView.dataSource = self\n            collectionView.register(NativeListCell.self, forCellWithReuseIdentifier: RNNativeListViewViewController.CELL_IDENTIFIER)\n            collectionView.backgroundColor = .init(white: 1, alpha: 0)\n            \n            self.collectionView = collectionView\n            self.view.addSubview(collectionView)\n            \n            collectionView.translatesAutoresizingMaskIntoConstraints = false\n            NSLayoutConstraint.activate([\n                collectionView.topAnchor.constraint(equalTo: self.view.topAnchor),\n                collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),\n                collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),\n                collectionView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor)\n            ])\n        }\n    }\n    \n    public override func willMove(toParent parent: UIViewController?) {\n        if parent == nil {\n            self.collectionView?.removeFromSuperview()\n            self.collectionView = nil\n        }\n    }\n\n    @objc public var data: Array<DataItem> = [] {\n        didSet {\n            self.collectionView?.reloadData()\n        }\n    }\n\n    @objc public var backgroundColor: UIColor? {\n        get {\n            return self.view.backgroundColor\n        }\n        set(newBackgroundColor) {\n            self.view.backgroundColor = newBackgroundColor\n        }\n    }\n    \n    @objc public var placeholderImage: String = ""\n    \n    @objc public func scrollToItem(_ index: Int) {\n        self.collectionView?.scrollToItem(at: IndexPath(item: index, section: 0), at: .centeredVertically, animated: true)\n    }\n}\n'))))}X.isMDXComponent=!0;const z={toc:[{value:"<code>RNNativeListViewManager.h</code>",id:"rnnativelistviewmanagerh",level:4},{value:"<code>RNNativeListViewManager.mm</code>",id:"rnnativelistviewmanagermm",level:4}]},G="wrapper";function Z(e){let{components:n,...t}=e;return(0,o.kt)(G,(0,i.Z)({},z,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"rnnativelistviewmanagerh"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewManager.h")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="RNNativeListViewManager.h"',title:'"RNNativeListViewManager.h"'},"#import <React/RCTUIManager.h>\n#import <React/RCTViewManager.h>\n\n@class RNNativeListViewContainerView;\n@class RNNativeListViewViewController;\n\n@interface RNNativeListViewManager : RCTViewManager\n\n@end\n")),(0,o.kt)("p",null,"We declare the view manager class that extends RCTViewManager. One thing you may have noticed is RCTUIManager import - we will use it to implement native commands for the old architecture view."),(0,o.kt)("p",null,'Also to use Swift classes, we need to do "forward-declaration" (check out Apple\'s Swift-ObjC interop ',(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/swift/importing-swift-into-objective-c#Include-Swift-Classes-in-Objective-C-Headers-Using-Forward-Declarations"},"dedicated docs section"),")."),(0,o.kt)("h4",{id:"rnnativelistviewmanagermm"},(0,o.kt)("inlineCode",{parentName:"h4"},"RNNativeListViewManager.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="RNNativeListViewManager.mm"',title:'"RNNativeListViewManager.mm"'},'#import "RNNativeListViewManager.h"\n\n#import <React/RCTConvert.h>\n\n#import "NativeListPackage-Swift.h"\n\n@implementation RNNativeListViewManager\n\nRCT_EXPORT_MODULE(RNNativeListView)\n\nRCT_CUSTOM_VIEW_PROPERTY(data, NSArray, RNNativeListViewContainerView)\n{\n    NSArray<NSDictionary *> *array = [RCTConvert NSDictionaryArray:json];\n    NSMutableArray<DataItem *> *data = [NSMutableArray arrayWithCapacity:array.count];\n    for (int i = 0; i < array.count; i++) {\n        [data addObject:[[DataItem alloc] initWithImageUrl:array[i][@"imageUrl"] itemDescription:array[i][@"description"]]];\n    }\n    [view.viewController setData:data];\n}\nRCT_CUSTOM_VIEW_PROPERTY(options, NSDictionary, RNNativeListViewContainerView)\n{\n    [view.viewController setPlaceholderImage:[RCTConvert NSString:json[@"placeholderImage"]]];\n}\nRCT_CUSTOM_VIEW_PROPERTY(backgroundColor, UIColor, RNNativeListViewContainerView)\n{\n    [view.viewController setBackgroundColor:[RCTConvert UIColor:json]];\n}\n\n#if RCT_NEW_ARCH_ENABLED\n#else\nRCT_EXPORT_METHOD(scrollToItem:(nonnull NSNumber*) reactTag index:(NSInteger) index) {\n    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {\n        UIView *view = viewRegistry[reactTag];\n        if (!view || ![view isKindOfClass:[RNNativeListViewContainerView class]]) {\n            return;\n        }\n        [((RNNativeListViewContainerView *) view).viewController scrollToItem:index];\n    }];\n}\n\n- (UIView *)view\n{\n    RNNativeListViewContainerView *view = [RNNativeListViewContainerView new];\n    view.viewController = [RNNativeListViewViewController new];\n    return view;\n}\n#endif\n\n@end\n')),(0,o.kt)("p",null,"And as for every view manager class, we start with ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_MODULE")," macro and we declare exported properties with ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_VIEW_PROPERTY")," macro."),(0,o.kt)("p",null,"For the old architecture mode, we have to additionaly declare native command for ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollToItem")," method (using ",(0,o.kt)("inlineCode",{parentName:"p"},"RCT_EXPORT_METHOD")," macro and ",(0,o.kt)("inlineCode",{parentName:"p"},"RCTUIManager")," class)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"view")," getter is also declared for the old arch - for new arch we are just using Fabric component view."))}Z.isMDXComponent=!0;const B={toc:[]},H="wrapper";function Y(e){let{components:n,...t}=e;return(0,o.kt)(H,(0,i.Z)({},B,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(F,{mdxType:"IosSwiftDataItem"}),(0,o.kt)(W,{mdxType:"IosSwiftListCell"}),(0,o.kt)(X,{mdxType:"IosSwiftViewController"}),(0,o.kt)(_,{mdxType:"IosSwiftContainerView"}),(0,o.kt)(Z,{mdxType:"IosSwiftViewManager"}),(0,o.kt)(U,{mdxType:"IosSwiftComponentView"}))}Y.isMDXComponent=!0;const K={sidebar_label:"iOS implementation",sidebar_position:4,title:"iOS implementation"},J=void 0,$={unversionedId:"guides/native-list-view/ios-impl",id:"guides/native-list-view/ios-impl",title:"iOS implementation",description:"Let's use XCode, to write iOS code. Open XCode, by running this command from the root directory of your app:",source:"@site/docs/guides/native-list-view/ios-impl.mdx",sourceDirName:"guides/native-list-view",slug:"/guides/native-list-view/ios-impl",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/ios-impl",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/bridging-tutorial-website/docs/guides/native-list-view/ios-impl.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"iOS implementation",sidebar_position:4,title:"iOS implementation"},sidebar:"tutorialSidebar",previous:{title:"JS specification",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/js-spec"},next:{title:"Android implementation",permalink:"/rnbridgingtutorial/docs/guides/native-list-view/android-impl"}},Q={},ee=[],ne={toc:ee},te="wrapper";function ie(e){let{components:n,...t}=e;return(0,o.kt)(te,(0,i.Z)({},ne,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's use XCode, to write iOS code. Open XCode, by running this command from the root directory of your app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"xed ios\n")),(0,o.kt)("p",null,"When workspace is opened, locate ",(0,o.kt)("inlineCode",{parentName:"p"},"Pods")," project and expand it. Search for ",(0,o.kt)("inlineCode",{parentName:"p"},"Development Pods")," and find ",(0,o.kt)("inlineCode",{parentName:"p"},"NativeListPackage")," inside. When it's expanded, it will show all files that we created under ",(0,o.kt)("inlineCode",{parentName:"p"},"native-list-package/ios")," directory."),(0,o.kt)(a.Z,{groupId:"ios_lang",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"swift",label:"ObjC++ & Swift",mdxType:"TabItem"},(0,o.kt)(Y,{mdxType:"IosSwiftImpl"})),(0,o.kt)(r.Z,{value:"objc",label:"ObjC++ only",mdxType:"TabItem"},(0,o.kt)(S,{mdxType:"IosObjCImpl"}))),(0,o.kt)("p",null,"You can check training repo for Objective-C & Swift implementation ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/native-list-package"},"here")," and Objective-C-only implementation ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/native-list-package-classic"},"here"),"."),(0,o.kt)("p",null,"That's iOS part, now let's go to ",(0,o.kt)("a",{parentName:"p",href:"./android-impl"},"Android"),"!"))}ie.isMDXComponent=!0}}]);