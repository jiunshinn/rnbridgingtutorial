"use strict";(self.webpackChunkbridging_tutorial_website=self.webpackChunkbridging_tutorial_website||[]).push([[4195],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},w=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(t),w=o,u=c["".concat(p,".").concat(w)]||c[w]||d[w]||r;return t?a.createElement(u,i(i({ref:n},m),{},{components:t})):a.createElement(u,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=w;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}w.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),o=t(6010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>V});var a=t(7462),o=t(7294),r=t(6010),i=t(2466),s=t(6550),p=t(1980),l=t(7392),m=t(12);function c(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function d(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function w(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,p._X)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=d(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!w({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[p,l]=u({queryString:t,groupId:a}),[c,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,m.Nk)(t);return[a,(0,o.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),b=(()=>{const e=p??c;return w({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!w({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),v(e)}),[l,v,r]),tabValues:r}}var b=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:t,selectedValue:s,selectValue:p,tabValues:l}=e;const m=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=m.indexOf(n),a=l[t].value;a!==s&&(c(n),p(a))},w=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;n=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;n=m[t]??m[m.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>m.push(e),onKeyDown:w,onClick:d},i,{className:(0,r.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":s===n})}),t??n)})))}function P(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function f(e){const n=v(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},o.createElement(y,(0,a.Z)({},e,n)),o.createElement(P,(0,a.Z)({},e,n)))}function V(e){const n=(0,b.Z)();return o.createElement(f,(0,a.Z)({key:String(n)},e))}},9810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905)),r=t(4866),i=t(5162);const s={sidebar_label:"View props",sidebar_position:3,title:"View props"},p=void 0,l={unversionedId:"view-reference/view-props-types",id:"view-reference/view-props-types",title:"View props",description:"Boolean prop",source:"@site/docs/view-reference/view-props-types.mdx",sourceDirName:"view-reference",slug:"/view-reference/view-props-types",permalink:"/rnbridgingtutorial/docs/view-reference/view-props-types",draft:!1,editUrl:"https://github.com/mateusz1913/rnbridgingtutorial/tree/main/docs/docs/view-reference/view-props-types.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"View props",sidebar_position:3,title:"View props"},sidebar:"tutorialSidebar",previous:{title:"View types",permalink:"/rnbridgingtutorial/docs/view-reference/view-types"},next:{title:"View props (old arch)",permalink:"/rnbridgingtutorial/docs/view-reference/view-props-types-old"}},m={},c=[{value:"Boolean prop",id:"boolean-prop",level:3},{value:"Number prop",id:"number-prop",level:3},{value:"String prop",id:"string-prop",level:3},{value:"Array prop",id:"array-prop",level:3},{value:"Object prop",id:"object-prop",level:3},{value:"Color prop",id:"color-prop",level:3},{value:"Event handler prop",id:"event-handler-prop",level:3},{value:"Prop with default value",id:"prop-with-default-value",level:3}],d={toc:c},w="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(w,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"boolean-prop"},"Boolean prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  enabled: boolean\n  checked?: boolean\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.enabled != newViewProps.enabled) {\n        //\n    }\n\n    if (oldViewProps.checked != newViewProps.checked) {\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(enabled, BOOL)\nRCT_EXPORT_VIEW_PROPERTY(checked, NSNumber)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "enabled")\noverride fun setEnabled(view: MyAwesomeView, enabled: Boolean) {\n    //\n}\n\n@ReactProp(name = "checked")\noverride fun setChecked(view: MyAwesomeView, checked: Boolean?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "enabled")\npublic void setEnabled(MyAwesomeView view, boolean enabled) {\n    //\n}\n\n@Override\n@ReactProp(name = "checked")\npublic void setChecked(MyAwesomeView view, @Nullable Boolean checked) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"number-prop"},"Number prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/MyAwesomeViewNativeComponent.ts"',title:'"src/MyAwesomeViewNativeComponent.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport type {\n  Double,\n  Float,\n  Int32,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  precision: Double\n  optionalPrecision?: Double\n  price: Float\n  discount?: Float\n  count: Int32\n  optionalCount?: Int32\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.precision != newViewProps.precision) {\n        //\n    }\n\n    if (oldViewProps.optionalPrecision != newViewProps.optionalPrecision) {\n        //\n    }\n\n    if (oldViewProps.price != newViewProps.price) {\n        //\n    }\n\n    if (oldViewProps.discount != newViewProps.discount) {\n        //\n    }\n\n    if (oldViewProps.count != newViewProps.count) {\n        //\n    }\n\n    if (oldViewProps.optionalCount != newViewProps.optionalCount) {\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(precision, double)\nRCT_EXPORT_VIEW_PROPERTY(optionalPrecision, NSNumber)\nRCT_EXPORT_VIEW_PROPERTY(price, float)\nRCT_EXPORT_VIEW_PROPERTY(discount, NSNumber)\nRCT_EXPORT_VIEW_PROPERTY(count, int)\nRCT_EXPORT_VIEW_PROPERTY(optionalCount, NSNumber)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "precision")\noverride fun setPrecision(view: MyAwesomeView, precision: Double) {\n    //\n}\n\n@ReactProp(name = "optionalPrecision")\noverride fun setOptionalPrecision(view: MyAwesomeView, optionalPrecision: Double?) {\n    //\n}\n\n@ReactProp(name = "price")\noverride fun setPrice(view: MyAwesomeView, price: Float) {\n    //\n}\n\n@ReactProp(name = "discount")\noverride fun setDiscount(view: MyAwesomeView, discount: Float?) {\n    //\n}\n\n@ReactProp(name = "count")\noverride fun setCount(view: MyAwesomeView, count: Int) {\n    //\n}\n\n@ReactProp(name = "optionalCount")\noverride fun setOptionalCount(view: MyAwesomeView, optionalCount: Int?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "precision")\npublic void setPrecision(MyAwesomeView view, double precision) {\n    //\n}\n\n@Override\n@ReactProp(name = "optionalPrecision")\npublic void setOptionalPrecision(MyAwesomeView view, @Nullable Double optionalPrecision) {\n    //\n}\n\n@Override\n@ReactProp(name = "price")\npublic void setPrice(MyAwesomeView view, float price) {\n    //\n}\n\n@Override\n@ReactProp(name = "discount")\npublic void setDiscount(MyAwesomeView view, @Nullable Float discount) {\n    //\n}\n\n@Override\n@ReactProp(name = "count")\npublic void setCount(MyAwesomeView view, int count) {\n    //\n}\n\n@Override\n@ReactProp(name = "optionalCount")\npublic void setOptionalCount(MyAwesomeView view, @Nullable Integer optionalCount) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"string-prop"},"String prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  name: string\n  label?: string\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.name != newViewProps.name) {\n        //\n    }\n\n    if (oldViewProps.label != newViewProps.label) {\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(name, NSString)\nRCT_EXPORT_VIEW_PROPERTY(label, NSString)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "name")\noverride fun setName(view: MyAwesomeView, name: String) {\n    //\n}\n\n@ReactProp(name = "label")\noverride fun setLabel(view: MyAwesomeView, label: String?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "name")\npublic void setName(MyAwesomeView view, String name) {\n    //\n}\n\n@Override\n@ReactProp(name = "label")\npublic void setLabel(MyAwesomeView view, @Nullable String label) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"array-prop"},"Array prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  data: ReadonlyArray<number>\n  optionalData?: ReadonlyArray<Readonly<{ title: string, description: string }>>\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},'#import <React/RCTConversions.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n\n#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.data != newViewProps.data) {\n        NSArray<NSNumber *> *data = RCTConvertVecToArray(newViewProps.data, ^(double item){\n            return @(item);\n        });\n\n        //\n    }\n\n    auto optionalDataComparator = [](const facebook::react::MyAwesomeViewOptionalDataStruct &left, const facebook::react::MyAwesomeViewOptionalDataStruct &right) {\n        return left.title == right.title && left.description == right.description;\n    };\n    if (!std::equal(oldViewProps.data.begin(), oldViewProps.data.end(), newViewProps.data.begin(), newViewProps.data.end(), dataComparator)) {\n        NSArray<NSDictionary *> *data = RCTConvertVecToArray(newViewProps.data, ^(facebook::react::MyAwesomeViewOptionalDataStruct item){\n            NSString *title = RCTNSStringFromString(item.title);\n            NSString *descrption = RCTNSStringFromString(item.description);\n            return @{ @"title": title, @"description": description };\n        });\n\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(data, NSArray)\nRCT_EXPORT_VIEW_PROPERTY(optionalData, NSArray)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "data")\noverride fun setData(view: MyAwesomeView, data: ReadableArray) {\n    //\n}\n\n@ReactProp(name = "optionalData")\nfun setOptionalData(view: MyAwesomeView, optionalData: ReadableArray?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "data")\npublic void setData(MyAwesomeView view, ReadableArray data) {\n    //\n}\n\n@Override\n@ReactProp(name = "optionalData")\npublic void setOptionalData(MyAwesomeView view, @Nullable ReadableArray optionalData) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"object-prop"},"Object prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  enabled: boolean\n  checked?: boolean\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <React/RCTConversions.h>\n\n#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.config != newViewProps.config) {\n        BOOL *flag = newViewProps.config.flag;\n        NSString *option = RCTNSStringFromString(newViewProps.config.option);\n\n        //\n    }\n\n    if (oldViewProps.optionalConfig != newViewProps.optionalConfig) {\n        NSNumber *count = @(newViewProps.optionalConfig.count);\n\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(config, NSDictionary)\nRCT_EXPORT_VIEW_PROPERTY(optionalConfig, NSDictionary)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.bridge.ReadableMap\nimport com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "config")\noverride fun setConfig(view: MyAwesomeView, config: ReadableMap) {\n    //\n}\n\n@ReactProp(name = "optionalConfig")\noverride fun setOptionalConfig(view: MyAwesomeView, optionalConfig: ReadableMap?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "config")\npublic void setConfig(MyAwesomeView view, ReadableMap config) {\n    //\n}\n\n@Override\n@ReactProp(name = "optionalConfig")\npublic void setOptionalConfig(MyAwesomeView view, @Nullable ReadableMap optionalConfig) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"color-prop"},"Color prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { ColorValue, HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  tintColor: ColorValue\n  optionalColor?: ColorValue\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <React/RCTConversions.h>\n\n#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.tintColor != newViewProps.tintColor) {\n        UIColor *tintColor = RCTUIColorFromSharedColor(newViewProps.tintColor);\n\n        //\n    }\n\n    if (oldViewProps.optionalColor != newViewProps.optionalColor) {\n        UIColor *optionalColor = RCTUIColorFromSharedColor(newViewProps.optionalColor);\n\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(tintColor, UIColor)\nRCT_EXPORT_VIEW_PROPERTY(optionalColor, UIColor)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "tintColor")\noverride fun setTintColor(view: MyAwesomeView, tintColor: Int?) {\n    //\n}\n\n@ReactProp(name = "optionalColor")\noverride fun setOptionalColor(view: MyAwesomeView, optionalColor: Int?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "tintColor")\npublic void setTintColor(MyAwesomeView view, @Nullable Integer tintColor) {\n    //\n}\n\n@Override\n@ReactProp(name = "optionalColor")\npublic void setOptionalColor(MyAwesomeView view, @Nullable Integer optionalColor) {\n    //\n}\n')))))),(0,o.kt)("h3",{id:"event-handler-prop"},"Event handler prop"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport type {\n  BubblingEventHandler,\n  DirectEventHandler,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  onAwesomeBubblingEvent?: BubblingEventHandler<Readonly<{ arg: string }>>\n  onAwesomeDirectEvent?: DirectEventHandler<Readonly<{ arg: string }>>\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <react/renderer/components/MyAwesomeView/EventEmitters.h>\n\n//\n\n- (void)handleBubblingEvent:(NSString *)payload\n{\n    if (_eventEmitter != nil) {\n        std::dynamic_pointer_cast<const facebook::react::MyAwesomeViewEventEmitter>(_eventEmitter)\n            ->onAwesomeBubblingEvent(\n                facebook::react::MyAwesomeViewEventEmitter::OnAwesomeBubblingEvent{\n                    .arg = payload\n                });\n    }\n}\n\n- (void)handleDirectEvent:(NSString *)payload\n{\n    if (_eventEmitter != nil) {\n        std::dynamic_pointer_cast<const facebook::react::MyAwesomeViewEventEmitter>(_eventEmitter)\n            ->onAwesomeDirectEvent(\n                facebook::react::MyAwesomeViewEventEmitter::OnAwesomeDirectEvent{\n                    .arg = payload\n                });\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(onAwesomeBubblingEvent, RCTBubblingEventBlock)\nRCT_EXPORT_VIEW_PROPERTY(onAwesomeDirectEvent, RCTDirectEventBlock)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.kt"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.kt"'},'import com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\n//\n\nclass OnAwesomeBubblingEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val payload: String\n) : Event<OnAwesomeBubblingEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putString("arg", payload)\n    }\n\n    companion object {\n        const val NAME = "topAwesomeBubblingEvent"\n        const val EVENT_PROP_NAME = "onAwesomeBubblingEvent"\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.kt"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.kt"'},'import com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.uimanager.events.Event\n\n//\n\nclass OnAwesomeDirectEvent(\n    surfaceId: Int,\n    viewId: Int,\n    private val payload: String\n) : Event<OnAwesomeDirectEvent>(surfaceId, viewId) {\n    override fun getEventName() = NAME\n\n    override fun getEventData(): WritableMap? {\n        return createPayload()\n    }\n\n    private fun createPayload() = Arguments.createMap().apply {\n        putString("arg", payload)\n    }\n\n    companion object {\n        const val NAME = "topAwesomeDirectEvent"\n        const val EVENT_PROP_NAME = "onAwesomeDirectEvent"\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.common.MapBuilder\nimport com.facebook.react.uimanager.ThemedReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\n\n//\n\noverride fun addEventEmitters(reactContext: ThemedReactContext, view: MyAwesomeView) {\n    super.addEventEmitters(reactContext, view)\n    view.setOnAwesomeViewListener(object : MyAwesomeView.OnAwesomeViewListener {\n        override fun onAwesomeBubblingEvent(payload: String) {\n            UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                ?.dispatchEvent(\n                    OnAwesomeBubblingEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.id,\n                        payload\n                    )\n                )\n        }\n\n        override fun onAwesomeDirectEvent(payload: String) {\n            UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)\n                ?.dispatchEvent(\n                    OnAwesomeDirectEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.id,\n                        payload\n                    )\n                )\n        }\n    })\n}\n\noverride fun getExportedCustomBubblingEventTypeConstants(): MutableMap<String, Any> {\n    return MapBuilder.of(\n        OnAwesomeBubblingEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeBubblingEvent.EVENT_PROP_NAME)\n    )\n}\n\noverride fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {\n    return MapBuilder.of(\n        OnAwesomeDirectEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeDirectEvent.EVENT_PROP_NAME)\n    )\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.java"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeBubblingEvent.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\n//\n\npublic class OnAwesomeBubblingEvent extends Event<OnAwesomeBubblingEvent> {\n    private final String payload;\n\n    public static final String NAME = "topAwesomeBubblingEvent";\n    public static final String EVENT_PROP_NAME = "onAwesomeBubblingEvent";\n\n    public OnAwesomeBubblingEvent(int surfaceId, int viewId, String payload) {\n        super(surfaceId, viewId);\n        this.payload = payload;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Override\n    @Nullable\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap eventPayload = Arguments.createMap();\n        eventPayload.putString("arg", payload);\n        return eventPayload;\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.java"',title:'"android/src/main/java/com/myawesomeapp/OnAwesomeDirectEvent.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.uimanager.events.Event;\n\n//\n\npublic class OnAwesomeDirectEvent extends Event<OnAwesomeDirectEvent> {\n    private final String payload;\n\n    public static final String NAME = "topAwesomeDirectEvent";\n    public static final String EVENT_PROP_NAME = "onAwesomeDirectEvent";\n\n    public OnAwesomeDirectEvent(int surfaceId, int viewId, String payload) {\n        super(surfaceId, viewId);\n        this.payload = payload;\n    }\n\n    @Override\n    public String getEventName() {\n        return NAME;\n    }\n\n    @Override\n    @Nullable\n    public WritableMap getEventData() {\n        return createPayload();\n    }\n\n    private WritableMap createPayload() {\n        WritableMap eventPayload = Arguments.createMap();\n        eventPayload.putString("arg", payload);\n        return eventPayload;\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import com.facebook.react.common.MapBuilder;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.events.EventDispatcher;\n\nimport java.util.Map;\n\n//\n\n@Override\nprotected void addEventEmitters(ThemedReactContext reactContext, MyAwesomeView view) {\n    super.addEventEmitters(reactContext, view);\n    view.setOnAwesomeViewListener(new MyAwesomeView.OnAwesomeViewListener() {\n        @Override\n        public void onAwesomeBubblingEvent(String payload) {\n            final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n            if (dispatcher != null) {\n                dispatcher.dispatchEvent(\n                    new OnAwesomeBubblingEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.getId(),\n                        payload\n                    )\n                );\n            }\n        }\n\n        @Override\n        public void onAwesomeDirectEvent(String payload) {\n            final EventDispatcher dispatcher =\n                UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.getId());\n            if (dispatcher != null) {\n                dispatcher.dispatchEvent(\n                    new OnAwesomeDirectEvent(\n                        UIManagerHelper.getSurfaceId(reactContext),\n                        view.getId(),\n                        payload\n                    )\n                );\n            }\n        }\n    });\n}\n\n@Override\npublic Map<String, Object> getExportedCustomBubblingEventTypeConstants() {\n    return MapBuilder.of(\n        OnAwesomeBubblingEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeBubblingEvent.EVENT_PROP_NAME)\n    )\n}\n\n@Override\npublic Map<String, Object> getExportedCustomDirectEventTypeConstants() {\n    return MapBuilder.of(\n        OnAwesomeDirectEvent.NAME,\n        MapBuilder.of("registrationName", OnAwesomeDirectEvent.EVENT_PROP_NAME)\n    )\n}\n')))))),(0,o.kt)("h3",{id:"prop-with-default-value"},"Prop with default value"),(0,o.kt)(r.Z,{groupId:"specs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"JS",label:"JS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/NativeMyAwesomeModule.ts"',title:'"src/NativeMyAwesomeModule.ts"'},"import type { HostComponent, ViewProps } from 'react-native';\nimport type { WithDefault } from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n//\n\nexport interface MyAwesomeViewProps extends ViewProps {\n  interval?: WithDefault<'slow' | 'normal' | 'fast', 'normal'>\n}\n\nexport default codegenNativeComponent<MyAwesomeViewProps>('MyAwesomeView') as HostComponent<MyAwesomeViewProps>;\n"))),(0,o.kt)(i.Z,{value:"iOS",label:"iOS Spec",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewComponentView.mm"',title:'"ios/MyAwesomeViewComponentView.mm"'},"#import <react/renderer/components/MyAwesomeView/Props.h>\n\n//\n\n- (void)updateProps:(facebook::react::Props::Shared const &)props oldProps:(facebook::react::Props::Shared const &)oldProps\n{\n    const auto &oldViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(_props);\n    const auto &newViewProps = *std::static_pointer_cast<const facebook::react::MyAwesomeViewProps>(props);\n\n    if (oldViewProps.interval != newViewProps.interval) {\n        //\n    }\n\n    [super updateProps:props oldProps:oldProps];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="ios/MyAwesomeViewManager.mm"',title:'"ios/MyAwesomeViewManager.mm"'},"RCT_EXPORT_VIEW_PROPERTY(interval, NSString)\n"))),(0,o.kt)(i.Z,{value:"Android",label:"Android Spec",mdxType:"TabItem"},(0,o.kt)(r.Z,{groupId:"android_lang",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.kt"'},'import com.facebook.react.uimanager.annotations.ReactProp\n\n//\n\n@ReactProp(name = "interval")\noverride fun setInterval(view: MyAwesomeView, interval: String?) {\n    //\n}\n'))),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"',title:'"android/src/main/newarch/com/myawesomeapp/MyAwesomeViewManager.java"'},'import androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.annotations.ReactProp;\n\n//\n\n@Override\n@ReactProp(name = "interval")\npublic void setInterval(MyAwesomeView view, @Nullable String interval) {\n    //\n}\n')))))))}u.isMDXComponent=!0}}]);